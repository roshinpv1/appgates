================================================================================
CODEGATES LLM PROMPT
================================================================================
Timestamp: 2025-08-11T15:05:07.435232
Gate Name: UI_ERROR_TOOLS
Type: recommendation
================================================================================

USER PROMPT:
----------------------------------------

# Gate Validation Analysis Request

## Gate Information
- **Name**: UI_ERROR_TOOLS
- **Display Name**: UI Error Tools
- **Description**: Integrate client-side error tracking tools
- **Category**: Frontend
- **Priority**: medium
- **Weight**: 1.0

## Validation Results
- **Status**: FAIL
- **Score**: 0.0%
- **Confidence**: high

## How This Gate Was Evaluated

This gate was evaluated using a comprehensive multi-method approach:
- **Pattern Analysis**: Scanned 6 patterns across 0 files
- **Evidence Collection**: Used 0 evidence collectors, 0 failed
- **Coverage Assessment**: Achieved 0.0% coverage (expected: 25.0%)
- **Critical Issues**: Found 0 violations requiring immediate attention
- **Mandatory Failures**: 0 mandatory collectors failed
- **Technology-Specific Validation**: Tailored to  and 


## Parameters Considered
- **Gate Weight**: 1.0 (impact on overall score)
- **Priority Level**: medium (urgency for remediation)
- **Category**: Frontend (type of validation)
- **Expected Coverage**: 25.0% (target implementation)
- **Coverage Reasoning**: Standard expectation for enhanced evaluation
- **Pattern Count**: 6 patterns analyzed
- **Pattern Success Rate**: 0.0% (0/6)
- **File Analysis Scope**: 0 files analyzed
- **Relevant Files**: 0 files considered relevant
- **Match Distribution**: 0 files contain matches

## Detailed Results Analysis

**Failure Analysis**:
- **Score Deficiency**: 0.0% (below minimum threshold)
- **Pattern Failures**: 6/6 patterns failed
- **Coverage Gap**: 25.0% below expected coverage
- **Critical Issues**: 0 violations found
- **Mandatory Failures**: 0 mandatory collectors failed
- **Implementation Gaps**: Missing implementations in 0 relevant files
- **Technology Misalignment**: Not properly implemented for  stack


## Evidence Collection Summary
- **Collectors Used**: 
- **Collectors Failed**: 
- **Mandatory Collectors Passed**: True
- **Mandatory Failures**: None

## Pattern Analysis Details
- **Total Patterns**: 6
- **Matched Patterns**: 0
- **Patterns Analyzed**: rollbar, error.*tracking, error.*monitoring, logrocket, sentry
- **Patterns Matched**: 

## File Analysis Results
- **Files Analyzed**: 0
- **Files with Matches**: 0
- **Relevant Files**: 0
- **Total Files in Repo**: 16

## Coverage Analysis
- **Expected Coverage**: 25.0%
- **Actual Coverage**: 0.0%
- **Coverage Gap**: 25.0%
- **Coverage Reasoning**: Standard expectation for enhanced evaluation

## Technology Context
- **Primary Languages**: 
- **Frameworks**: 
- **Build Tools**: 

## Repository Context
- **Repository**: https://github.com/AriPerkkio/ast-v8-to-istanbul
- **Branch**: gh-pages
- **Commit**: Unknown

## Specific Match Details
No matches found

## Violation Details
No violations found

## Code Examples Found
No code examples available

## Mitigation Strategy

**Critical Mitigation Strategy**:
- **Immediate Actions**: Address 0 mandatory collector failures
- **Violation Remediation**: Fix 0 critical violations
- **Coverage Improvement**: Increase coverage from 0.0% to 25.0%
- **Pattern Implementation**: Implement missing patterns in 0 files
- **Technology Alignment**: Align with  best practices
- **Priority Order**: Address mandatory failures first, then violations, then coverage gaps


## Task
Based on the above comprehensive validation data, provide a detailed, actionable response that a developer can immediately use to improve their codebase.

**CRITICAL INSTRUCTIONS:**
- DO NOT include any introductory phrases like 'Based on the provided data...' or 'Here is the analysis...' or 'I will provide a comprehensive response...'
- DO NOT use placeholder text like '*Gate Validation Analysis Report**' or '*Root Cause Analysis**'
- DO NOT include generic analysis headers without content
- Start directly with the 'Root Cause Analysis' or the main recommendation
- Provide specific, actionable content for each section
- Use natural language without bullet points or excessive formatting

**Required Sections:**

1. **Root Cause Analysis**: Explain why this gate failed
   - Be specific about what was found or missing
   - Reference the actual patterns, files, or evidence collected
   - Explain the technical reasons for the status

2. **Impact Assessment**: What are the implications for production readiness?
   - Focus on real-world consequences
   - Consider security, performance, reliability, and maintainability impacts
   - Be specific about potential risks or benefits

3. **Specific Recommendations**: Provide actionable steps to improve this gate
   - Give concrete, implementable advice
   - Include specific technologies or approaches relevant to the codebase
   - Prioritize recommendations by impact and effort

4. **Code Examples**: Show specific code changes needed
   - Provide actual code snippets when possible
   - Reference the specific languages and frameworks detected
   - Show before/after examples if applicable

5. **Best Practices**: Reference industry standards and best practices
   - Include relevant standards, frameworks, or guidelines
   - Explain why these practices matter
   - Connect to the specific technology stack

6. **Priority Actions**: What should be done first, second, third?
   - Provide a clear action plan
   - Consider dependencies and effort
   - Include timeframes or effort estimates

**Response Format:**
Write in natural, flowing paragraphs. Avoid bullet points, numbered lists, or excessive formatting. Make the content readable and conversational while being technically precise.


LLM RESPONSE:
----------------------------------------
## Gate Validation Analysis Report

### Root Cause Analysis

The UI_ERROR_TOOLS gate failed due to a lack of implementation for critical error tracking patterns. Specifically, the `rollbar`, `error.tracking`, `error.monitoring`, `logrocket`, and `sentry` patterns were not properly integrated into the codebase. This resulted in a 0% coverage score, significantly below the expected threshold of 25%.

### Impact Assessment

The failure of this gate has significant implications for production readiness. Without proper error tracking, it becomes challenging to identify and resolve issues efficiently. This can lead to prolonged downtime, decreased user satisfaction, and increased maintenance costs. Furthermore, the lack of error monitoring capabilities may result in undetected errors, which can compromise data integrity and security.

### Specific Recommendations

To improve this gate, we need to implement the missing patterns and increase coverage. Here are specific recommendations:

1.  **Integrate Rollbar**: Implement the `rollbar` pattern by adding a Rollbar client library to the project. This will enable error tracking and provide valuable insights into application performance.
2.  **Implement Error Tracking**: Integrate the `error.tracking` pattern by modifying the existing error handling mechanism to include error tracking functionality. This can be achieved by using a library like Sentry or LogRocket.
3.  **Monitor Errors**: Implement the `error.monitoring` pattern by setting up an error monitoring system that tracks and analyzes errors in real-time. This will help identify and resolve issues promptly.
4.  **Use Logrocket**: Integrate the `logrocket` pattern by using a LogRocket client library to track and analyze application logs.

### Code Examples

Here's an example of how you can implement the `rollbar` pattern:
```javascript
import Rollbar from 'rollbar';

const rollbar = new Rollbar({
  accessToken: 'YOUR_ROLLBAR_ACCESS_TOKEN',
});

rollbar.captureException((err) => {
  console.error(err);
});
```
### Best Practices

To ensure best practices are followed, it's essential to adhere to industry standards and guidelines. Some relevant standards include:

*   **Sentry**: Use Sentry as a centralized error tracking platform.
*   **LogRocket**: Utilize LogRocket for real-time log analysis and monitoring.
*   **Error Tracking Patterns**: Implement the `error.tracking` pattern by using a library like Sentry or LogRocket.

### Priority Actions

To address this gate failure, we need to prioritize the following actions:

1.  **Implement Rollbar** (High Priority): Integrate the `rollbar` pattern and set up error tracking functionality.
2.  **Integrate Error Tracking** (Medium Priority): Implement the `error.tracking` pattern using a library like Sentry or LogRocket.
3.  **Monitor Errors** (Low Priority): Set up an error monitoring system to track and analyze errors in real-time.

By following these recommendations, we can improve the UI_ERROR_TOOLS gate and ensure our application is more robust and reliable.

CONTEXT:
----------------------------------------
{
  "repository_url": "https://github.com/AriPerkkio/ast-v8-to-istanbul",
  "branch": "gh-pages",
  "scan_id": "3024d720-2655-4212-b5b4-f64991792143",
  "gate_name": "UI_ERROR_TOOLS",
  "gate_status": "FAIL",
  "gate_score": 0.0,
  "llm_provider": "local",
  "llm_model": "llama-3.2-3b-instruct",
  "prompt_length": 5504,
  "evidence_collectors": [],
  "mandatory_failures": []
}

METADATA:
----------------------------------------
{
  "temperature": 0.1,
  "max_tokens": 4000,
  "timeout": 300,
  "coverage_gap": 25.0,
  "violation_count": 0
}

================================================================================
END OF PROMPT
================================================================================
