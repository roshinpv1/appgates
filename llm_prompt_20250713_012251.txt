You are an expert code analyzer specializing in hard gate validation patterns.
Analyze the following codebase and generate specific regex patterns for each hard gate.

--- TECHNOLOGY SUMMARY ---
Languages: Java, JavaScript
Frameworks: Spring Boot, Node.js
Databases: 
Build Tools: Gradle, NPM
Containerization: 
Frontend: 
Testing: org.gradle:test-retry-gradle-plugin:1.6.2
Code Quality: 

--- HARD GATES FOR ANALYSIS ---
- structured_logs
- avoid_logging_secrets
- audit_trail
- correlation_id
- log_api_calls
- log_background_jobs
- log_application_messages
- ui_errors
- retry_logic
- timeouts
- throttling
- circuit_breakers
- error_logs
- http_codes
- ui_error_tools
- automated_tests

--- TASK ---
For each hard gate, provide:
1. Brief analysis of how this gate applies to the detected technologies
2. 3-5 specific regex patterns to detect implementation
3. Patterns should be case-insensitive and comprehensive
4. Consider both positive (implementation found) and negative (missing implementation) patterns

--- EXPECTED RESPONSE FORMAT ---
Provide a JSON response with this structure:

{
  "tech_summary": {
    "languages": ["list", "of", "languages"],
    "frameworks": ["list", "of", "frameworks"],
    "databases": ["list", "of", "databases"],
    "build_tools": ["list", "of", "build", "tools"],
    "containerization": ["list", "of", "containerization"],
    "frontend": ["list", "of", "frontend", "technologies"],
    "testing": ["list", "of", "testing", "frameworks"],
    "code_quality": ["list", "of", "code", "quality", "tools"]
  },
  "hard_gates_analysis_short": {
    "Gate Name": {
      "analysis": "Brief analysis of how this gate applies to the technologies",
      "patterns": [
        "(?i)regex_pattern_1",
        "(?i)regex_pattern_2",
        "(?i)regex_pattern_3"
      ]
    }
  }
}
