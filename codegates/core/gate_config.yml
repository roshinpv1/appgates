hard_gates:
- id: 1
  name: Logs Searchable/Available
  description: Ensures logs are available and searchable. Accepts both structured (JSON) and standard logging formats with consistent patterns.
  validation_method: |
    AST scan for logging patterns:
    - Validates both structured and standard logging
    - Checks for consistent logging formats
    - Verifies logging configuration
    - Ensures logs are searchable and available
  patterns:
    standard_logging:
      - r'log\.(info|debug|error|warning|critical)'
      - r'logger\.(info|debug|error|warning|critical)'
      - r'console\.(log|info|debug|error|warn)'
    structured_logging:
      - r'logger\.\w+\s*\([^)]*\{[^}]*\}'
      - r'JSON\.stringify'
      - r'structlog\.get_logger'
    framework_logging:
      - r'app\.logger'
      - r'flask\.current_app\.logger'
      - r'django\.core\.logging'
      - r'winston'
      - r'bunyan'
      - r'pino'
      - r'log4js'
      - r'Serilog'
      - r'NLog'
    java:
      - \blogger\.(info|debug|error|warn|trace)
      - <encoder.*class=.*JsonEncoder.*>
      - <appender.*class=.*ConsoleAppender.*>
      - <appender.*class=.*FileAppender.*>
      - logback\.xml
      - log4j2\.xml
      - log4j\.properties
    dotnet:
      - \bLog\.(Information|Debug|Error|Warning|Critical)
      - Log\.Logger\s*=\s*new\s+LoggerConfiguration\(\)
      - WriteTo\.Console\(\)
      - WriteTo\.File\(\)
      - AddSerilog\(\)
      - AddConsole\(\)
      - appsettings\.json.*Logging
    python:
      - 'logging\.(info|debug|error|warning|critical)'
      - 'logger\.(info|debug|error|warning|critical)'
      - 'structlog\.'
      - 'loguru\.'
      - 'python-json-logger'
    javascript:
      - 'console\.(log|info|debug|error|warn)'
      - 'logger\.(info|debug|error|warn)'
      - 'winston\.'
      - 'bunyan\.'
      - 'pino'
      - 'log4js\.'
    typescript:
      - 'console\.(log|info|debug|error|warn)'
      - 'logger\.(info|debug|error|warn)'
      - 'winston\.'
      - 'bunyan\.'
      - 'pino'
      - 'log4js\.'

- id: 2
  name: Avoid Logging Confidential Data
  description: Ensure no sensitive or credential-like data is logged
  validation_method: Use regex + NLP to inspect only logging statements that output sensitive content (passwords, tokens, credentials, secrets, PII)
  patterns:
    java:
      # Common logging APIs in Java
      - (?i)\b(logger|log|slf4jLogger|log4jLogger|auditLogger)\.(info|debug|warn|error|trace|fatal)\s*\(\s*".*?(password|secret|token|apikey|access[_-]?key|auth(entication)?|credential).*?"\s*(?:,|\+)
      - (?i)\b(logger|log|slf4jLogger|log4jLogger|auditLogger)\.(info|debug|warn|error|trace|fatal)\s*\(\s*".*?"\s*,\s*.*(password|secret|token|apikey|credential).*?\)
      - (?i)"(password|secret|token|apikey|access[_-]?key)"\s*[:=]\s*["'][^"']{6,}["']
      - (?i)\bSystem\.out\.println\s*\(\s*".*?(password|token|secret).*?"\s*(?:,|\+)
      # DB connection strings inside logs
      - (?i)\b(logger|log)\.(info|debug|warn|error|trace)\s*\(\s*".*?(mongodb|mysql|postgresql|oracle|mssql):\/\/[^:]+:[^@]+@[^"']+["']?

    javascript:
      # Extensive JS logging methods (Node, browser, libs)
      - (?i)\b(console|logger|log|winston|pino|bunyan|debug|log4js|loggly|logdna|logrocket)\.(log|info|debug|warn|error|trace)\s*\(\s*["'`].*?(password|secret|token|apikey|access[_-]?key|credential).*?["'`]\s*(?:,|\+)
      - (?i)\b(console|logger|log|winston|pino|bunyan|debug)\.(log|info|debug|warn|error)\s*\(\s*.*?(password|secret|token|apikey|access[_-]?key).*?

    python:
      # Common Python logging calls
      - (?i)\b(logging|logger|log|audit_logger|app_logger)\.(debug|info|warning|warn|error|critical|exception)\s*\(\s*f?["'].*?(password|secret|token|apikey|access[_-]?key|credential).*?["']\s*\)
      - (?i)\bprint\s*\(\s*f?["'].*?(password|secret|token|apikey|access[_-]?key|credential).*?["']
      - (?i)\bloguru\.logger\.(debug|info|warning|error|critical)\s*\(\s*f?["'].*?(password|token|secret).*?["']

    go:
      # Go logging (standard + libraries)
      - (?i)\b(log|logger|zap|slog|logrus|glog|klog)\.(Print|Println|Printf|Info|Infof|Debug|Debugf|Warn|Warnf|Error|Errorf|Fatal|Fatalf|Trace|Tracef)\s*\(\s*".*?(password|token|secret|apikey|credential).*?"\s*
      - (?i)\bfmt\.Print[f|ln]?\s*\(\s*".*?(password|secret|token).*?"\s*

    csharp:
      # .NET logging
      - (?i)\b(_logger|logger|log|logFactory|serilog|nlog)\.(LogInformation|LogDebug|LogWarning|LogError|LogCritical|LogTrace|Information|Debug|Warning|Error|Trace|Fatal)\s*\(\s*".*?(password|secret|token|apikey|credential).*?"
      - (?i)\bConsole\.Write(Line)?\s*\(\s*".*?(password|token|secret).*?"

    ruby:
      # Ruby loggers
      - (?i)\b(logger|log)\.(debug|info|warn|error|fatal)\s*\(?\s*["'].*?(password|secret|token|apikey|access[_-]?key|credential).*?["']
      - (?i)\bputs\s*\(?\s*["'].*?(password|secret|token).*?["']

    shell:
      # Shell logging to stdout/stderr
      - (?i)\becho\s+["'].*?(password|token|secret|apikey|credential).*?["']
      - (?i)\bprintf\s+["'].*?(password|token|secret).*?["']

    all_languages:
      # Generic hardcoded secrets or API keys in any string
      - (?i)"(password|secret|token|apikey|credential)"\s*[:=]\s*["'][^"']{6,}["']
      - (?i)\b(?:sk_live_|pk_live_|sk_test_|pk_test_)[A-Za-z0-9]{20,}\b
      - (?i)\bgithub_pat_[A-Za-z0-9_]{20,}\b
      # Private keys
      - -----BEGIN\s+(?:RSA\s+)?PRIVATE\s+KEY-----
      - -----END\s+(?:RSA\s+)?PRIVATE\s+KEY-----
      - -----BEGIN\s+CERTIFICATE-----
      - -----END\s+CERTIFICATE-----

- id: 3
  name: Create Audit Trail Logs
  description: Logging around sensitive or state-changing actions (create, delete, update)
  validation_method: Match business-layer methods (e.g., createUser, deleteAccount) using function name regex and check for logs within method body or immediately surrounding context
  patterns:
    standard_logging:
      - r'log\.(info|debug|error|warning|critical)'
      - r'logger\.(info|debug|error|warning|critical)'
      - r'console\.(log|info|debug|error|warn)'
    structured_logging:
      - r'logger\.\w+\s*\([^)]*\{[^}]*\}'
      - r'JSON\.stringify'
      - r'structlog\.get_logger'
    framework_logging:
      - r'app\.logger'
      - r'flask\.current_app\.logger'
      - r'django\.core\.logging'
      - r'winston'
      - r'bunyan'
      - r'pino'
      - r'log4js'
      - r'Serilog'
      - r'NLog'
    java:
      - \blogger\.(info|debug|error|warn|trace)
      - <encoder.*class=.*JsonEncoder.*>
      - <appender.*class=.*ConsoleAppender.*>
      - <appender.*class=.*FileAppender.*>
      - logback\.xml
      - log4j2\.xml
      - log4j\.properties
    dotnet:
      - \bLog\.(Information|Debug|Error|Warning|Critical)
      - Log\.Logger\s*=\s*new\s+LoggerConfiguration\(\)
      - WriteTo\.Console\(\)
      - WriteTo\.File\(\)
      - AddSerilog\(\)
      - AddConsole\(\)
      - appsettings\.json.*Logging
    python:
      - 'logging\.(info|debug|error|warning|critical)'
      - 'logger\.(info|debug|error|warning|critical)'
      - 'structlog\.'
      - 'loguru\.'
      - 'python-json-logger'
    javascript:
      - 'console\.(log|info|debug|error|warn)'
      - 'logger\.(info|debug|error|warn)'
      - 'winston\.'
      - 'bunyan\.'
      - 'pino'
      - 'log4js\.'
    typescript:
      - 'console\.(log|info|debug|error|warn)'
      - 'logger\.(info|debug|error|warn)'
      - 'winston\.'
      - 'bunyan\.'
      - 'pino'
      - 'log4js\.'

- id: 4
  name: Tracking ID for Logs
  description: Presence of unique IDs like correlationId, requestId in logs
  validation_method: Detect usage of MDC.put("correlationId"), custom headers like X-Request-ID, or frameworks like Spring interceptors/middleware injecting tracking ID
  patterns:
    java:
      - 'MDC\.put\(.*correlationId.*\)'
      - 'MDC\.put\(.*requestId.*\)'
      - 'MDC\.put\(.*transactionId.*\)'
      - 'MDC\.put\(.*messageId.*\)'
      - 'MDC\.put\(.*trackId.*\)'
      - 'MDC\.put\(.*ticketId.*\)'
      - 'MDC\.put\(.*traceId.*\)'
      - 'MDC\.put\(.*wfRequestId.*\)'
      - 'X-Request-ID'
      - 'X-Correlation-ID'
      - 'X-Transaction-ID'
      - 'X-Message-ID'
      - 'X-Track-ID'
      - 'X-Ticket-ID'
      - 'X-Trace-ID'
      - 'X-WF-Request-ID'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'
      - '@Bean.*HandlerInterceptor'
      - 'HandlerInterceptorAdapter'
      - 'OncePerRequestFilter'
      - 'request.getHeader\(.*X-Request-ID.*\)'
      - 'request.getHeader\(.*X-Correlation-ID.*\)'
      - 'request.getHeader\(.*X-Transaction-ID.*\)'
      - 'request.getHeader\(.*X-Message-ID.*\)'
      - 'request.getHeader\(.*X-Track-ID.*\)'
      - 'request.getHeader\(.*X-Ticket-ID.*\)'
      - 'request.getHeader\(.*X-Trace-ID.*\)'
    dotnet:
      - 'context\.TraceIdentifier'
      - 'HttpContext\.TraceIdentifier'
      - 'Activity\.Current\.Id'
      - 'AddCorrelationId'
      - 'X-Request-ID'
      - 'X-Correlation-ID'
      - 'X-Transaction-ID'
      - 'X-Message-ID'
      - 'X-Track-ID'
      - 'X-Ticket-ID'
      - 'X-Trace-ID'
      - 'X-WF-Request-ID'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'
      - 'logger\.Log.*correlationId'
      - 'logger\.Log.*requestId'
      - 'logger\.Log.*transactionId'
      - 'logger\.Log.*messageId'
      - 'logger\.Log.*trackId'
      - 'logger\.Log.*ticketId'
      - 'logger\.Log.*traceId'
      - 'logger\.Log.*wfRequestId'
    python:
      - 'request\.headers\.get\(.*X-Request-ID.*\)'
      - 'request\.headers\.get\(.*X-Correlation-ID.*\)'
      - 'request\.headers\.get\(.*X-Transaction-ID.*\)'
      - 'request\.headers\.get\(.*X-Message-ID.*\)'
      - 'request\.headers\.get\(.*X-Track-ID.*\)'
      - 'request\.headers\.get\(.*X-Ticket-ID.*\)'
      - 'request\.headers\.get\(.*X-Trace-ID.*\)'
      - 'request_id'
      - 'correlation_id'
      - 'transaction_id'
      - 'message_id'
      - 'track_id'
      - 'ticket_id'
      - 'trace_id'
      - 'wf_request_id'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'
      - 'logging\.LoggerAdapter'
      - 'structlog.*correlation_id'
      - 'structlog.*request_id'
      - 'structlog.*transaction_id'
      - 'structlog.*message_id'
      - 'structlog.*track_id'
      - 'structlog.*ticket_id'
      - 'structlog.*trace_id'
    javascript:
      - 'req\.headers\["x-request-id"\]'
      - 'req\.headers\["x-correlation-id"\]'
      - 'req\.headers\["x-transaction-id"\]'
      - 'req\.headers\["x-message-id"\]'
      - 'req\.headers\["x-track-id"\]'
      - 'req\.headers\["x-ticket-id"\]'
      - 'req\.headers\["x-trace-id"\]'
      - 'req\.headers\["x-wf-request-id"\]'
      - 'correlationId'
      - 'requestId'
      - 'transactionId'
      - 'messageId'
      - 'trackId'
      - 'ticketId'
      - 'traceId'
      - 'wfRequestId'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'
      - 'winston.*correlationId'
      - 'winston.*requestId'
      - 'winston.*transactionId'
      - 'winston.*messageId'
      - 'winston.*trackId'
      - 'winston.*ticketId'
      - 'winston.*traceId'
    typescript:
      - 'req\.headers\["x-request-id"\]'
      - 'req\.headers\["x-correlation-id"\]'
      - 'req\.headers\["x-transaction-id"\]'
      - 'req\.headers\["x-message-id"\]'
      - 'req\.headers\["x-track-id"\]'
      - 'req\.headers\["x-ticket-id"\]'
      - 'req\.headers\["x-trace-id"\]'
      - 'req\.headers\["x-wf-request-id"\]'
      - 'correlationId'
      - 'requestId'
      - 'transactionId'
      - 'messageId'
      - 'trackId'
      - 'ticketId'
      - 'traceId'
      - 'wfRequestId'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'
      - 'winston.*correlationId'
      - 'winston.*requestId'
      - 'winston.*transactionId'
      - 'winston.*messageId'
      - 'winston.*trackId'
      - 'winston.*ticketId'
      - 'winston.*traceId'
    php:
      - '$_SERVER\["HTTP_X_REQUEST_ID"\]'
      - '$_SERVER\["HTTP_X_CORRELATION_ID"\]'
      - '$_SERVER\["HTTP_X_TRANSACTION_ID"\]'
      - '$_SERVER\["HTTP_X_MESSAGE_ID"\]'
      - '$_SERVER\["HTTP_X_TRACK_ID"\]'
      - '$_SERVER\["HTTP_X_TICKET_ID"\]'
      - '$_SERVER\["HTTP_X_TRACE_ID"\]'
      - '$_SERVER\["HTTP_X_WF_REQUEST_ID"\]'
      - 'correlationId'
      - 'requestId'
      - 'transactionId'
      - 'messageId'
      - 'trackId'
      - 'ticketId'
      - 'traceId'
      - 'wfRequestId'
      - 'TRANSACTIONID'
      - 'MESSAGEID'
      - 'TRACKID'
      - 'TICKETID'
      - 'TRACEID'
      - 'REQUESTID'
      - 'WFREQUESTID'

- id: 5
  name: Log REST API Calls
  description: Log entries per incoming/outgoing API requests
  validation_method: Scan for @RequestMapping, @GetMapping, etc., and ensure logging statements exist; additionally, check for HTTP clients like RestTemplate, WebClient, axios logs
  patterns:
    java:
      - '@RequestMapping'
      - '@GetMapping'
      - '@PostMapping'
      - '@PutMapping'
      - '@DeleteMapping'
      - 'RestTemplate'
      - 'WebClient'
      - 'logger\.(info|debug|error|warn)\s*\(.*(request|response)'
    dotnet:
      - '\[HttpGet\]'
      - '\[HttpPost\]'
      - '\[HttpPut\]'
      - '\[HttpDelete\]'
      - 'HttpClient'
      - 'ILogger.*Log.*(request|response)'
    python:
      - '@app\.route'
      - '@router\.get'
      - '@router\.post'
      - 'requests\.'
      - 'aiohttp\.'
      - 'logging\.(info|debug|error|warning|critical)\s*\(.*(request|response)'
    javascript:
      - 'app\.get\('
      - 'app\.post\('
      - 'app\.put\('
      - 'app\.delete\('
      - 'axios\.'
      - 'fetch\('
      - 'console\.(log|info|debug|error)\s*\(.*(request|response)'
    typescript:
      - 'app\.get\('
      - 'app\.post\('
      - 'app\.put\('
      - 'app\.delete\('
      - 'axios\.'
      - 'fetch\('
      - 'console\.(log|info|debug|error)\s*\(.*(request|response)'
    php:
      - '\$app->get\('
      - '\$app->post\('
      - '\$app->put\('
      - '\$app->delete\('
      - 'GuzzleHttp\\Client'
      - 'error_log.*(request|response)'

- id: 6
  name: Log Application Messages
  description: Logging of application events, services, and internal state info. Works in conjunction with Logs Searchable/Available gate.
  validation_method: |
    Detect logging across application components:
    - Service layer logging
    - Business logic logging
    - Internal state changes
    - Error handling
    - Integration with structured logging
  patterns:
    java:
      # General logging patterns
      - 'logger\.(info|debug|error|warn|trace)\s*\('
      - 'log\.(info|debug|error|warn|trace)\s*\('
      - 'Logger\.(getLogger|getAnonymousLogger)\s*\('
      # Framework logging
      - 'LoggerFactory\.getLogger\s*\('
      - '@Slf4j'
      - 'Commons.*Log'
      # Job execution logging
      - '@Scheduled.*\n.*logger\.'
      - 'JobExecutionContext.*\n.*logger\.'
      - 'TaskScheduler.*\n.*logger\.'
      # Application context logging
      - '@Component.*\n.*logger\.'
      - '@Service.*\n.*logger\.'
      - '@Controller.*\n.*logger\.'
    python:
      # General logging patterns
      - 'logging\.(info|debug|error|warning|critical)\s*\('
      - 'logger\.(info|debug|error|warning|critical)\s*\('
      - 'log\.(info|debug|error|warning|critical)\s*\('
      # Framework-specific logging
      - 'app\.logger\.'
      - 'flask\.current_app\.logger\.'
      - 'django\.core\.logging\.'
      # Structured logging
      - 'structlog\.get_logger\('
      - 'loguru\.logger\.'
      # Business logic patterns
      - 'service.*log'
      - 'business.*log'
      - 'process.*log'
      # Background tasks
      - '@celery\.task'
      - '@app\.task'
      - 'schedule='
      - 'apscheduler'
    javascript:
      # Console logging
      - 'console\.(log|info|debug|error|warn)\s*\('
      # Framework logging
      - 'winston\.'
      - 'bunyan\.'
      - 'pino\('
      - 'log4js\.'
      # Application logging
      - 'app\.log'
      - 'logger\.'
      - 'log\.'
      # Business logic
      - 'service.*log'
      - 'business.*log'
      # Background tasks
      - 'cron\.'
      - 'node-cron'
      - 'agenda\.'
      - 'bull\.'
      - 'kafka\.'
    typescript:
      # Console logging
      - 'console\.(log|info|debug|error|warn)\s*\('
      # Framework logging
      - 'winston\.'
      - 'bunyan\.'
      - 'pino\('
      - 'log4js\.'
      # Application logging
      - 'app\.log'
      - 'logger\.'
      - 'log\.'
      # Business logic
      - 'service.*log'
      - 'business.*log'
      # Background tasks
      - 'cron\.'
      - 'node-cron'
      - 'agenda\.'
      - 'bull\.'
      - 'kafka\.'
    php:
      # General logging
      - 'error_log\('
      - '\$logger->(info|debug|error|warning|critical)\s*\('
      # Framework logging
      - 'Monolog\\Logger'
      - 'Monolog\\Handler'
      - 'Monolog\\Formatter'
      # Business logic
      - 'service.*log'
      - 'business.*log'
      # Background tasks (subset)
      - 'Cron\\CronExpression'
      - 'Symfony\\Component\\Messenger'
      - 'enqueue\\client'

- id: 7
  name: Client UI Errors Logged
  description: Frontend errors are captured and logged to system like Sentry or console
  validation_method: Search for window.onerror, console.error, Sentry.captureException, or React ErrorBoundary usage in frontend code (JS/TS/React)
  patterns:
    javascript:
      - 'window\.onerror'
      - 'console\.error'
      - 'Sentry\.captureException'
      - 'ErrorBoundary'
      - 'try\s*{.*}\s*catch\s*\('
    typescript:
      - 'window\.onerror'
      - 'console\.error'
      - 'Sentry\.captureException'
      - 'ErrorBoundary'
      - 'try\s*{.*}\s*catch\s*\('

- id: 8
  name: Retry Logic
  description: Operations (esp. IO-bound) have retry policies
  validation_method: Search for @Retryable, usage of RetryTemplate, or retry loops with try/catch blocks. In frontend, detect retry wrappers or retry utilities (e.g., axios-retry)
  patterns:
    java:
      - '@Retryable'
      - 'RetryTemplate'
      - 'try\s*{.*}\s*catch\s*\('
    dotnet:
      - 'Polly'
      - 'RetryPolicy'
      - 'try\s*{.*}\s*catch\s*\('
    python:
      - '@retry'
      - 'tenacity'
      - 'retrying'
      - 'try:'
      - 'except '
    javascript:
      - 'axios-retry'
      - 'retry\('
      - 'try\s*{.*}\s*catch\s*\('
    typescript:
      - 'axios-retry'
      - 'retry\('
      - 'try\s*{.*}\s*catch\s*\('

- id: 9
  name: Timeouts in IO Ops
  description: IO calls (HTTP, DB, MQ) have timeout parameters
  validation_method: Look into HTTP client configs (RestTemplate, HttpClient, WebClient, axios.timeout) and DB configs (jdbc.timeout, connectionTimeout, etc.)
  patterns:
    java:
      - 'RestTemplateBuilder.*setConnectTimeout'
      - 'HttpClientBuilder.*setConnectionTimeToLive'
      - 'WebClient.*responseTimeout'
      - 'DataSource.*setLoginTimeout'
      - 'HikariConfig.*setConnectionTimeout'
    dotnet:
      - 'HttpClient.Timeout'
      - 'SqlConnection.ConnectionTimeout'
      - 'Task.Delay'
    python:
      - 'requests\..*timeout='
      - 'aiohttp\..*timeout='
      - 'pymysql.connect.*connect_timeout='
      - 'psycopg2.connect.*connect_timeout='
    javascript:
      - 'axios\.timeout'
      - 'fetch\(.*,\s*\{.*timeout:'
      - 'setTimeout\('
    typescript:
      - 'axios\.timeout'
      - 'fetch\(.*,\s*\{.*timeout:'
      - 'setTimeout\('
    php:
      - 'CURLOPT_TIMEOUT'
      - 'stream_context_create.*timeout'
      - 'PDO::ATTR_TIMEOUT'

- id: 10
  name: Throttling & Drop Request
  description: Rate limits are applied on endpoints
  validation_method: Detect use of libraries like Bucket4j, Resilience4j, @RateLimiter, or NGINX ingress rules with limit_req, rate-limit-zone, etc.
  patterns:
    java:
      - 'Bucket4j'
      - 'Resilience4j.*RateLimiter'
      - '@RateLimiter'
      - 'RateLimiterConfig'
    dotnet:
      - 'AspNetCoreRateLimit'
      - 'RateLimiter'
      - 'IAsyncRateLimitPolicy'
    python:
      - 'ratelimit'
      - 'limits'
      - 'flask-limiter'
    javascript:
      - 'express-rate-limit'
      - 'rate-limiter-flexible'
      - 'bottleneck'
    typescript:
      - 'express-rate-limit'
      - 'rate-limiter-flexible'
      - 'bottleneck'
    php:
      - 'Nginx.*limit_req'
      - 'Nginx.*rate-limit-zone'
      - 'Symfony\\Component\\RateLimiter'

- id: 11
  name: Circuit Breakers
  description: Circuit breaker pattern applied to external calls
  validation_method: Identify use of @CircuitBreaker, HystrixCommand, Resilience4j annotations/configs to protect downstream service calls
  patterns:
    java:
      - '@CircuitBreaker'
      - 'HystrixCommand'
      - 'Resilience4j.*CircuitBreaker'
    dotnet:
      - 'Polly.CircuitBreaker'
      - 'CircuitBreakerPolicy'
    python:
      - 'pybreaker'
      - 'circuitbreaker'
    javascript:
      - 'opossum'
      - 'circuit-breaker-js'
    typescript:
      - 'opossum'
      - 'circuit-breaker-js'
    php:
      - 'php-circuit-breaker'
      - 'CircuitBreaker'

- id: 12
  name: Log System Errors
  description: Exceptions are captured and logged globally
  validation_method: Find @ControllerAdvice or global ExceptionHandler, or try-catch blocks that log errors via logger.error(...) or equivalent
  patterns:
    java:
      - '@ControllerAdvice'
      - '@ExceptionHandler'
      - 'logger\.error\('
      - 'try\s*{.*}\s*catch\s*\('
    dotnet:
      - 'UseExceptionHandler'
      - 'ILogger.*LogError'
      - 'try\s*{.*}\s*catch\s*\('
    python:
      - 'logging\.error\('
      - 'try:'
      - 'except '
    javascript:
      - 'console\.error\('
      - 'try\s*{.*}\s*catch\s*\('
    typescript:
      - 'console\.error\('
      - 'try\s*{.*}\s*catch\s*\('
    php:
      - 'set_exception_handler'
      - 'try\s*{.*}\s*catch\s*\('
      - 'error_log\('

- id: 13
  name: HTTP Error Codes
  description: Appropriate HTTP status codes returned on failures
  validation_method: Check for @ExceptionHandler, or usage of ResponseEntity.status(HttpStatus.XYZ).body(...) across controller methods
  patterns:
    java:
      - '@ExceptionHandler'
      - 'ResponseEntity\.status\(HttpStatus\.'
      - 'throw new ResponseStatusException'
    dotnet:
      - 'StatusCode\('
      - 'return BadRequest\('
      - 'return NotFound\('
      - 'return StatusCode\('
    python:
      - 'abort\('
      - 'return jsonify.*status='
      - 'make_response\('
    javascript:
      - 'res\.status\('
      - 'res\.sendStatus\('
      - 'next\(createError'
    typescript:
      - 'res\.status\('
      - 'res\.sendStatus\('
      - 'next\(createError'
    php:
      - 'http_response_code\('
      - 'header\("HTTP/1.1'
      - 'Response::json\('

- id: 14
  name: Client Error Tracking
  description: Client-side errors tracked and correlated with backend
  validation_method: Detect frontend init for tools like Sentry.init(), custom trackError(...) functions, integration of logging SDKs (e.g., Datadog, Bugsnag)
  patterns:
    javascript:
      - 'Sentry\.init\('
      - 'trackError\('
      - 'datadogRum\.init\('
      - 'bugsnag\.start\('
    typescript:
      - 'Sentry\.init\('
      - 'trackError\('
      - 'datadogRum\.init\('
      - 'bugsnag\.start\('

- id: 15
  name: Automated Tests
  description: Project includes automated tests and CI runs
  validation_method: Detect annotations like @Test, describe(), it() in test files; check Jenkinsfile, .github/workflows, or pipeline.yaml for test execution steps
  patterns:
    java:
      - '@Test'
      - 'JUnit'
      - 'TestNG'
      - 'Mockito'
    dotnet:
      - '[TestMethod]'
      - '[Fact]'
      - '[Theory]'
      - 'NUnit'
      - 'Xunit'
    python:
      - 'def test_'
      - 'pytest'
      - 'unittest'
      - 'nose'
    javascript:
      - 'describe\('
      - 'it\('
      - 'jest'
      - 'mocha'
      - 'chai'
    typescript:
      - 'describe\('
      - 'it\('
      - 'jest'
      - 'mocha'
      - 'chai'
    php:
      - 'PHPUnit'
      - 'Codeception'
      - 'Behat'
      - 'phpspec'
      - 'test_'
      - 'tests/'
      - 'Jenkinsfile'
      - '.github/workflows/'
      - 'pipeline.yaml'

- id: 16
  name: Correlation ID
  description: Track request flow with correlation IDs
  validation_method: Check for correlation ID usage in logs and request handling
  patterns:
    python:
      # Correlation ID in request handling
      - \bX-Correlation-ID\b
      - \bX-Request-ID\b
      - \bX-Trace-ID\b
      - correlation_id
      - request_id
      - trace_id
      - \buuid\.uuid4\(\)
      - \bgenerate_request_id\(\)
      - \bget_correlation_id\(\)
      - \bset_correlation_id\(
      - \bcontext\.correlation_id
      - \bMDC\.put\([\"']correlation[_-]id[\"']
      - \bstructlog\.bind\(correlation_id=
      - \blogging\.getLogger\(\)\..*\(.*correlation[_-]id.*\)

- id: 17
  name: HTTP Status Codes
  description: Proper use of HTTP status codes
  validation_method: Check for proper HTTP status code usage
  patterns:
    python:
      # HTTP status code usage
      - status_code\s*=\s*(?:200|201|202|204|301|302|304|400|401|403|404|405|409|422|429|500|502|503|504)
      - return\s+(?:200|201|202|204|301|302|304|400|401|403|404|405|409|422|429|500|502|503|504)
      - HTTPStatus\.(?:OK|CREATED|ACCEPTED|NO_CONTENT|MOVED_PERMANENTLY|FOUND|NOT_MODIFIED|BAD_REQUEST|UNAUTHORIZED|FORBIDDEN|NOT_FOUND|METHOD_NOT_ALLOWED|CONFLICT|UNPROCESSABLE_ENTITY|TOO_MANY_REQUESTS|INTERNAL_SERVER_ERROR|BAD_GATEWAY|SERVICE_UNAVAILABLE|GATEWAY_TIMEOUT)
      - Response\(.*status=(?:200|201|202|204|301|302|304|400|401|403|404|405|409|422|429|500|502|503|504)
      - JsonResponse\(.*status=(?:200|201|202|204|301|302|304|400|401|403|404|405|409|422|429|500|502|503|504)
      - raise\s+HTTP(?:400|401|403|404|405|409|422|429|500|502|503|504)Exception
      - abort\((?:400|401|403|404|405|409|422|429|500|502|503|504)\)

- id: 18
  name: Error Logs
  description: Proper error logging and exception handling
  validation_method: Check for error logging in exception handlers
  patterns:
    python:
      # Error logging patterns
      - \bcatch\s+Exception\s+as\s+e:.*\n\s*.*log(?:ger)?\.(?:error|exception)\(
      - \bcatch\s+\w+Error\s+as\s+e:.*\n\s*.*log(?:ger)?\.(?:error|exception)\(
      - log(?:ger)?\.error\(.*(?:exc_info=True|traceback|exception)
      - log(?:ger)?\.exception\(
      - \btraceback\.format_exc\(\)
      - \btraceback\.print_exc\(\)
      - \bsys\.exc_info\(\)
      - \blogging\.error\(
      - \blogging\.exception\(
      - \berror_log\(
      - \bexception_log\(

- id: 19
  name: Log API Calls
  description: Log API request/response details. Works with Logs Searchable/Available gate.
  validation_method: |
    Check for API call logging:
    - Request/response logging
    - Headers and parameters
    - Response status and timing
    - Integration with structured logging
  patterns:
    java:
      # API logging patterns
      - '@RequestMapping.*\n.*logger\.'
      - '@GetMapping.*\n.*logger\.'
      - '@PostMapping.*\n.*logger\.'
      - '@RestController.*\n.*logger\.'
      - 'logger\.info.*request'
      - 'logger\.info.*response'
      # Request details
      - 'logger\.(info|debug)\s*\([^)]*headers'
      - 'logger\.(info|debug)\s*\([^)]*params'
      - 'logger\.(info|debug)\s*\([^)]*body'
      # Response details
      - 'logger\.(info|debug)\s*\([^)]*status'
      - 'logger\.(info|debug)\s*\([^)]*duration'
      - 'logger\.(info|debug)\s*\([^)]*latency'
    dotnet:
      # .NET Core logging
      - 'ILogger.*Log.*(request|response)'
    python:
      # API call logging
      - log(?:ger)?\.info\(.*request.*
      - log(?:ger)?\.info\(.*response.*
      - log(?:ger)?\.debug\(.*request.*
      - log(?:ger)?\.debug\(.*response.*
      - \brequest\.method
      - \brequest\.path
      - \brequest\.url
      - \brequest\.headers
      - \brequest\.body
      - \bresponse\.status_code
      - \bresponse\.headers
      - \bresponse\.body
      - \bapi_logger\.
      - \bhttp_logger\.
      - \brest_logger\.
    javascript:
      # API call logging
      - 'axios\.(get|post|put|delete)\(.*\)'
      - 'fetch\(.*,\s*\{.*method:.*\}'
      - 'logger\.(info|debug)\s*\([^)]*url'
      - 'logger\.(info|debug)\s*\([^)]*status'
      - 'logger\.(info|debug)\s*\([^)]*duration'
      - 'logger\.(info|debug)\s*\([^)]*latency'
    typescript:
      # API call logging
      - 'axios\.(get|post|put|delete)\(.*\)'
      - 'fetch\(.*,\s*\{.*method:.*\}'
      - 'logger\.(info|debug)\s*\([^)]*url'
      - 'logger\.(info|debug)\s*\([^)]*status'
      - 'logger\.(info|debug)\s*\([^)]*duration'
      - 'logger\.(info|debug)\s*\([^)]*latency'
    php:
      # API call logging
      - 'curl_exec\(.*\)'
      - 'http_request\(.*\)'
      - 'logger\.(info|debug)\s*\([^)]*url'
      - 'logger\.(info|debug)\s*\([^)]*status'
      - 'logger\.(info|debug)\s*\([^)]*duration'
      - 'logger\.(info|debug)\s*\([^)]*latency'

- id: 20
  name: Log Background Jobs
  description: Log background job execution. Works with Logs Searchable/Available gate.
  validation_method: |
    Check for background job logging:
    - Job start/completion
    - Task status and progress
    - Error handling
    - Integration with structured logging
  patterns:
    java:
      # Job execution logging
      - '@Scheduled.*\n.*logger\.'
      - 'JobExecutionContext.*\n.*logger\.'
      - 'TaskScheduler.*\n.*logger\.'
      # Job status
      - 'logger\.(info|debug)\s*\([^)]*started'
      - 'logger\.(info|debug)\s*\([^)]*completed'
      - 'logger\.(info|debug)\s*\([^)]*progress'
      - 'logger\.(info|debug)\s*\([^)]*status'
      # Integration patterns
      - 'KafkaTemplate.*\n.*logger\.'
      - 'JmsTemplate.*\n.*logger\.'
      - '@RabbitListener.*\n.*logger\.'
    dotnet:
      # .NET Core logging
      - '_logger\.(LogInformation|LogDebug|LogError|LogWarning|LogCritical)\s*\('
      - 'ILogger.*Log\w+\s*\('
      - 'Log\.(Information|Debug|Error|Warning|Critical)\s*\('
      # Framework logging
      - 'Serilog\.'
      - 'NLog\.'
      # Application context
      - '\[Service\].*\n.*_logger\.'
      - '\[Controller\].*\n.*_logger\.'
      # Business logic
      - 'business.*log'
      - 'service.*log'
      # Background services (subset)
      - '\[Job\]'
      - '\[Scheduled\]'
      - 'Hangfire'
      - 'Quartz'
      - 'IHostedService.*_logger\.'
      - 'BackgroundService.*_logger\.'
    python:
      # Background job logging
      - log(?:ger)?\.info\(.*job.*start
      - log(?:ger)?\.info\(.*job.*complete
      - log(?:ger)?\.info\(.*task.*start
      - log(?:ger)?\.info\(.*task.*complete
      - log(?:ger)?\.info\(.*worker.*
      - log(?:ger)?\.info\(.*scheduler.*
      - log(?:ger)?\.info\(.*cron.*
      - \bcelery\.task
      - \bcelery\.shared_task
      - \brq\.job
      - \brq\.queue
      - \bhuey\.task
      - \bhuey\.periodic_task
      - \bapscheduler
      - \bschedule\.every\(\)