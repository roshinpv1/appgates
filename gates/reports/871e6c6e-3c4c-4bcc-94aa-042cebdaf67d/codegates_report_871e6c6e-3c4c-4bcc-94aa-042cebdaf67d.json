{
  "scan_id": "871e6c6e-3c4c-4bcc-94aa-042cebdaf67d",
  "project_name": "apache/fineract (develop)",
  "repository_url": "https://github.com/apache/fineract",
  "branch": "develop",
  "scan_timestamp": "2025-07-21T00:30:45.918995",
  "scan_timestamp_formatted": "2025-07-21 00:30:45",
  "overall_score": 37.79176709141038,
  "threshold": 70,
  "status": "FAIL",
  "summary": {
    "total_gates": 15,
    "passed_gates": 3,
    "failed_gates": 10,
    "warning_gates": 0,
    "not_applicable_gates": 2,
    "total_files": 5000,
    "total_lines": 502652
  },
  "gates": [
    {
      "gate": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "category": "Logging",
      "priority": "high",
      "patterns_used": 20,
      "matches_found": 411,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 11700.0% (117/1 expected files)",
        "Traditional Coverage: 11700.0% (117/1 relevant files)",
        "Confidence: medium",
        "Found 411 matches across 117 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:229 - @Slf4j",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:949 - log.debug(",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:119 - @Slf4j",
        "  ... and 408 more matches"
      ],
      "recommendations": [
        "Good: Logs Searchable/Available is well implemented",
        "Achieved: 11700.0% coverage (Target: 10%)",
        "Exceeds expectations by 11690.0%"
      ],
      "pattern_description": "Static pattern analysis for Logs Searchable/Available",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 20,
          "matches": 478,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 411,
        "overlap_matches": 67,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 411,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Structured logging should be implemented across core application files",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.8,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.3,
            "penalty_multiplier": 0.7
          }
        }
      }
    },
    {
      "gate": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "description": "Prevent sensitive data from being logged accidentally",
      "category": "Security",
      "priority": "critical",
      "patterns_used": 31,
      "matches_found": 4410,
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 35000.0% (350/1 expected files)",
        "Traditional Coverage: 35000.0% (350/1 relevant files)",
        "Confidence: medium",
        "Found 4410 matches across 350 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:127 - AccountTransferStandingInstruction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:652 - AccountTransferStandingInstruction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:655 - accountTransferStandingInstruction",
        "  ... and 4407 more matches"
      ],
      "recommendations": [
        "Critical: Implement Avoid Logging Confidential Data throughout your codebase",
        "Expected 10% coverage, currently at 35000.0% (based on 1 expected files)",
        "Focus on prevent sensitive data from being logged accidentally",
        "Moderate Gap: Need to implement in -349 more files"
      ],
      "pattern_description": "Static pattern analysis for Avoid Logging Confidential Data",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 31,
          "matches": 4794,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 4410,
        "overlap_matches": 384,
        "weighted_scoring": {
          "gate_weight": 0.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 4410,
          "expected_coverage": {
            "percentage": 0,
            "reasoning": "No secrets should be logged",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "violation_penalty": 20,
            "max_penalty": 100,
            "bonus_for_clean": 10
          },
          "security_violations": 4410,
          "penalty_applied": 100
        }
      }
    },
    {
      "gate": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "description": "Log critical business operations for audit compliance",
      "category": "Compliance",
      "priority": "high",
      "patterns_used": 28,
      "matches_found": 278,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 9100.0% (91/1 expected files)",
        "Traditional Coverage: 9100.0% (91/1 relevant files)",
        "Confidence: medium",
        "Found 278 matches across 91 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:979 - TransactionChronologicallyLatest = loanTransaction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:989 - TransactionChronolog",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:995 - TransactionChronolog",
        "  ... and 275 more matches"
      ],
      "recommendations": [
        "Good: Create Audit Trail Logs is well implemented",
        "Achieved: 9100.0% coverage (Target: 10%)",
        "Exceeds expectations by 9090.0%"
      ],
      "pattern_description": "Static pattern analysis for Create Audit Trail Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 28,
          "matches": 541,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 278,
        "overlap_matches": 263,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 278,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Audit trails should be present in business logic files",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "description": "Include correlation IDs for distributed tracing",
      "category": "Observability",
      "priority": "medium",
      "patterns_used": 16,
      "matches_found": 1,
      "score": 6.206896551724138,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 100.0% (1/1 expected files)",
        "Traditional Coverage: 100.0% (1/1 relevant files)",
        "Confidence: medium",
        "Found 1 matches across 1 files",
        "  fineract-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/rescheduleloan/service/LoanRescheduleRequestReadPlatformServiceImpl.java:111 - request_id"
      ],
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 100.0% (based on 1 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 1,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 6.896551724137931,
          "final_score": 6.206896551724138,
          "matches_count": 1,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Correlation IDs should be present in API and service files",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "description": "Log all API requests and responses for monitoring",
      "category": "API",
      "priority": "medium",
      "patterns_used": 21,
      "matches_found": 11,
      "score": 24.615384615384617,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 600.0% (6/1 expected files)",
        "Traditional Coverage: 600.0% (6/1 relevant files)",
        "Confidence: medium",
        "Found 11 matches across 6 files",
        "  fineract-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/LoanRepaymentScheduleInstallment.java:145 - https://blog.thepete.net/blog",
        "  fineract-client/src/main/java/org/apache/fineract/client/util/FineractClient.java:34 - http3.logging.HttpLog",
        "  fineract-client/src/main/java/org/apache/fineract/client/util/FineractClient.java:35 - http3.logging.HttpLog",
        "  ... and 8 more matches"
      ],
      "recommendations": [
        "Critical: Implement Log REST API Calls throughout your codebase",
        "Expected 10% coverage, currently at 600.0% (based on 1 expected files)",
        "Focus on log all api requests and responses for monitoring",
        "Moderate Gap: Need to implement in -5 more files"
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 21,
          "matches": 13,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 11,
        "overlap_matches": 2,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 24.615384615384617,
          "final_score": 24.615384615384617,
          "matches_count": 11,
          "expected_coverage": {
            "percentage": 30,
            "reasoning": "API calls should be logged for monitoring and debugging",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "description": "Log important application state changes and events",
      "category": "Logging",
      "priority": "medium",
      "patterns_used": 23,
      "matches_found": 325,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 8100.0% (81/1 expected files)",
        "Traditional Coverage: 8100.0% (81/1 relevant files)",
        "Confidence: medium",
        "Found 325 matches across 81 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:979 - Service.isChronolog",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java:1584 - Process all collected data in chronolog",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/api/LoansApiResource.java:221 - Application Log",
        "  ... and 322 more matches"
      ],
      "recommendations": [
        "Good: Log Application Messages is well implemented",
        "Achieved: 8100.0% coverage (Target: 10%)",
        "Exceeds expectations by 8090.0%"
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 23,
          "matches": 455,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 325,
        "overlap_matches": 130,
        "weighted_scoring": {
          "gate_weight": 10.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 325,
          "expected_coverage": {
            "percentage": 40,
            "reasoning": "Application messages should be logged across business logic",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "description": "Capture and log client-side UI errors",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend/client-side applications"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend/client-side applications"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend/client-side applications",
      "pattern_significance": "Only applicable for frontend/client-side applications",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend/client-side applications",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "description": "Implement retry mechanisms for resilient operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 23,
      "matches_found": 8,
      "score": 16.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 400.0% (4/1 expected files)",
        "Traditional Coverage: 400.0% (4/1 relevant files)",
        "Confidence: medium",
        "Found 8 matches across 4 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:213 - Retry(Message message, String to) throws IOExcepti",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:441 - Retry(Message message, List<String> registrationId",
        "  fineract-core/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java:171 - Retry.getMetrics().getNumberOfFailedCallsWithRetry",
        "  ... and 5 more matches"
      ],
      "recommendations": [
        "Critical: Implement Retry Logic throughout your codebase",
        "Expected 10% coverage, currently at 400.0% (based on 1 expected files)",
        "Focus on implement retry mechanisms for resilient operations",
        "Moderate Gap: Need to implement in -3 more files"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 23,
          "matches": 12,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 8,
        "overlap_matches": 4,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 16.0,
          "final_score": 16.0,
          "matches_count": 8,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Retry logic should be present in network and external service calls",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "description": "Set appropriate timeouts for I/O operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 24,
      "matches_found": 6,
      "score": 6.233766233766234,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 200.0% (2/1 expected files)",
        "Traditional Coverage: 200.0% (2/1 relevant files)",
        "Confidence: medium",
        "Found 6 matches across 2 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:120 - timeout (in milliseconds",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:135 - timeout (in milliseconds",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:142 - Timeout(int read",
        "  ... and 3 more matches"
      ],
      "recommendations": [
        "Critical: Implement Timeouts in IO Ops throughout your codebase",
        "Expected 10% coverage, currently at 200.0% (based on 1 expected files)",
        "Focus on set appropriate timeouts for i/o operations",
        "Moderate Gap: Need to implement in -1 more files"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 24,
          "matches": 16,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 6,
        "overlap_matches": 10,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 7.792207792207792,
          "final_score": 6.233766233766234,
          "matches_count": 6,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Timeouts should be present in network and database operations",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "description": "Implement rate limiting and request throttling",
      "category": "Performance",
      "priority": "medium",
      "patterns_used": 22,
      "matches_found": 2,
      "score": 7.2,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 200.0% (2/1 expected files)",
        "Traditional Coverage: 200.0% (2/1 relevant files)",
        "Confidence: medium",
        "Found 2 matches across 2 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/RecurringDepositAccount.java:151 - RateChart chart, final boolean allowOverdraft, fin",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/api/SavingsAccountsApiResource.java:158 - Rate, interestCompoundingPeriodType, interestCalcu"
      ],
      "recommendations": [
        "Critical: Implement Throttling & Drop Request throughout your codebase",
        "Expected 10% coverage, currently at 200.0% (based on 1 expected files)",
        "Focus on implement rate limiting and request throttling",
        "Moderate Gap: Need to implement in -1 more files"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 22,
          "matches": 2,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 2,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 10.0,
          "weighted_score": 8.0,
          "final_score": 7.2,
          "matches_count": 2,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Throttling should be present in API endpoints and external service calls",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.5,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Circuit Breakers"
      ],
      "recommendations": [
        "Critical: Implement Circuit Breakers throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement circuit breaker pattern for fault tolerance",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "description": "Comprehensive error logging and exception handling",
      "category": "Error Handling",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Log System Errors"
      ],
      "recommendations": [
        "Critical: Implement Log System Errors throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on comprehensive error logging and exception handling",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "description": "Use appropriate HTTP status codes for API responses",
      "category": "API",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for HTTP Error Codes"
      ],
      "recommendations": [
        "Critical: Implement HTTP Error Codes throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on use appropriate http status codes for api responses",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "description": "Integrate client-side error tracking tools",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend applications with client-side error tracking"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend applications with client-side error tracking"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend applications with client-side error tracking",
      "pattern_significance": "Only applicable for frontend applications with client-side error tracking",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend applications with client-side error tracking",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "description": "Comprehensive automated test coverage",
      "category": "Testing",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Automated Tests"
      ],
      "recommendations": [
        "Critical: Implement Automated Tests throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on comprehensive automated test coverage",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 308,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    }
  ],
  "metadata": {
    "file_count": 5000,
    "line_count": 502652,
    "language_distribution": {
      "YAML": {
        "files": 22,
        "percentage": 0.5
      },
      "JSON": {
        "files": 15,
        "percentage": 0.3
      },
      "XML": {
        "files": 73,
        "percentage": 1.6
      },
      "SQL": {
        "files": 18,
        "percentage": 0.4
      },
      "Shell": {
        "files": 1,
        "percentage": 0.0
      },
      "Gradle": {
        "files": 21,
        "percentage": 0.4
      },
      "Java": {
        "files": 4518,
        "percentage": 96.8
      }
    },
    "primary_technologies": [
      "Java"
    ],
    "scan_duration": 0,
    "pattern_library_version": "2.0.0"
  },
  "llm_info": {
    "provider": "none",
    "model": "unknown",
    "patterns_generated": 0,
    "patterns_matched": 0,
    "confidence": "low"
  },
  "weighted_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 0,
      "total_static_patterns": 208,
      "total_llm_matches": 0,
      "total_static_matches": 6312,
      "total_unique_matches": 5452,
      "total_overlap_matches": 860,
      "coverage_improvement": 0.0,
      "confidence_distribution": {
        "high": 0,
        "medium": 9,
        "low": 4
      }
    },
    "pattern_library_version": "2.0.0",
    "static_patterns_used": 208,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {
      "high": 0,
      "medium": 9,
      "low": 4
    },
    "weighted_scoring": {
      "total_weight": 116.0,
      "applicable_gates": 13,
      "gate_scores": {
        "STRUCTURED_LOGS": {
          "score": 100.0,
          "weight": 15.0,
          "weighted_score": 1500.0
        },
        "AVOID_LOGGING_SECRETS": {
          "score": 0.0,
          "weight": 25.0,
          "weighted_score": 0.0
        },
        "AUDIT_TRAIL": {
          "score": 100.0,
          "weight": 12.0,
          "weighted_score": 1200.0
        },
        "CORRELATION_ID": {
          "score": 6.206896551724138,
          "weight": 8.0,
          "weighted_score": 49.6551724137931
        },
        "LOG_API_CALLS": {
          "score": 24.615384615384617,
          "weight": 12.0,
          "weighted_score": 295.3846153846154
        },
        "LOG_APPLICATION_MESSAGES": {
          "score": 100.0,
          "weight": 10.0,
          "weighted_score": 1000.0
        },
        "RETRY_LOGIC": {
          "score": 16.0,
          "weight": 12.0,
          "weighted_score": 192.0
        },
        "TIMEOUTS": {
          "score": 6.233766233766234,
          "weight": 12.0,
          "weighted_score": 74.80519480519482
        },
        "THROTTLING": {
          "score": 7.2,
          "weight": 10.0,
          "weighted_score": 72.0
        }
      },
      "overall_weighted_score": 37.79176709141038
    },
    "pattern_statistics": {
      "total_gates": 10,
      "total_patterns": 1073,
      "supported_technologies": [
        "java",
        "python",
        "javascript",
        "typescript",
        "csharp",
        "go",
        "rust",
        "php",
        "ruby",
        "all_languages"
      ],
      "technology_coverage": {
        "java": 122,
        "python": 121,
        "javascript": 133,
        "typescript": 105,
        "csharp": 106,
        "go": 102,
        "rust": 102,
        "php": 95,
        "ruby": 94,
        "all_languages": 93
      }
    }
  },
  "applicability": {
    "enabled": true,
    "codebase_characteristics": {
      "languages": [
        "JSON",
        "SQL",
        "YAML",
        "Shell",
        "XML",
        "Java",
        "Gradle"
      ],
      "language_counts": {
        "YAML": 22,
        "JSON": 15,
        "XML": 73,
        "SQL": 18,
        "Shell": 1,
        "Gradle": 21,
        "Java": 4518
      },
      "is_frontend": false,
      "is_backend": true,
      "is_api": true,
      "is_mobile": false,
      "is_backend_only": true,
      "is_frontend_only": false,
      "is_fullstack": false,
      "primary_technology": "backend"
    },
    "total_gates": 15,
    "applicable_gates": 13,
    "non_applicable_gates": 2,
    "applicable_by_category": {},
    "non_applicable_details": [
      {
        "name": "UI_ERRORS",
        "display_name": "Client UI Errors Logged",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      },
      {
        "name": "UI_ERROR_TOOLS",
        "display_name": "Client Error Tracking",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      }
    ],
    "applicable_gate_names": [
      "STRUCTURED_LOGS",
      "AVOID_LOGGING_SECRETS",
      "AUDIT_TRAIL",
      "CORRELATION_ID",
      "LOG_API_CALLS",
      "LOG_APPLICATION_MESSAGES",
      "RETRY_LOGIC",
      "TIMEOUTS",
      "THROTTLING",
      "CIRCUIT_BREAKERS",
      "ERROR_LOGS",
      "HTTP_CODES",
      "AUTOMATED_TESTS"
    ]
  }
}