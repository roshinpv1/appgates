{
  "report_metadata": {
    "scan_id": "aeac40cc-5b53-4f93-afae-d548b85fbf1e",
    "repository_url": "https://github.com/spring-projects/spring-petclinic",
    "branch": "main",
    "generated_at": "2025-07-13T15:10:08.850069",
    "version": "2.0.0",
    "llm_source": "local",
    "llm_model": "meta-llama-3.1-8b-instruct"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 112,
    "total_lines": 14402,
    "timestamp": "2025-07-13T15:10:08.850077",
    "project_name": "spring-projects/spring-petclinic",
    "project_path": "https://github.com/spring-projects/spring-petclinic",
    "repository_url": "https://github.com/spring-projects/spring-petclinic"
  },
  "languages_detected": [
    "Docker",
    "JSON",
    "YAML",
    "Batch",
    "XML",
    "Gradle",
    "Java",
    "SQL",
    "CSS",
    "HTML",
    "SCSS"
  ],
  "gates": [
    {
      "name": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Logs Searchable/Available"
      ],
      "category": "Logging",
      "priority": "high",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Logs Searchable/Available throughout your codebase",
        "Focus on ensure logs are structured and searchable for operational monitoring"
      ],
      "pattern_description": "Structured logs are essential for operational monitoring and debugging. These patterns capture date, time, log level, and message.",
      "pattern_significance": "Well-structured logs improve the overall logging experience and make it easier to debug issues.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "status": "PASS",
      "score": 100.0,
      "details": [
        "No matches found for Avoid Logging Confidential Data"
      ],
      "category": "Security",
      "priority": "critical",
      "description": "Prevent sensitive data from being logged accidentally",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Good implementation of Avoid Logging Confidential Data",
        "Consider optimizing existing patterns"
      ],
      "pattern_description": "Sensitive data should never be logged. These patterns detect common keywords and phrases that indicate sensitive information.",
      "pattern_significance": "Accidental logging of secrets can lead to security breaches, so it's crucial to avoid this.",
      "expected": 2,
      "found": 0,
      "coverage": 100.0,
      "quality_score": 100.0,
      "matches": []
    },
    {
      "name": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Create Audit Trail Logs"
      ],
      "category": "Compliance",
      "priority": "high",
      "description": "Log critical business operations for audit compliance",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Create Audit Trail Logs throughout your codebase",
        "Focus on log critical business operations for audit compliance"
      ],
      "pattern_description": "Audit trails are essential for compliance and monitoring critical business operations. These patterns capture audit-related keywords.",
      "pattern_significance": "Comprehensive audit trails ensure regulatory compliance and provide valuable insights into system usage.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Tracking ID for Logs"
      ],
      "category": "Observability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Tracking ID for Logs throughout your codebase",
        "Focus on include correlation ids for distributed tracing"
      ],
      "pattern_description": "Correlation IDs facilitate distributed tracing and debugging. These patterns detect common correlation ID keywords.",
      "pattern_significance": "Correlation IDs improve the overall debugging experience by allowing developers to track requests across multiple systems.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "FAIL",
      "score": 8.928571428571427,
      "details": [
        "Found 3 matches across 1 files",
        "  src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java:27 - API. This configuration",
        "  src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java:42 - API.",
        "  src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java:44 - API standard, there"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 2,
      "matches_found": 3,
      "recommendations": [
        "Implement Log REST API Calls throughout your codebase",
        "Focus on log all api requests and responses for monitoring"
      ],
      "pattern_description": "Logging API calls provides valuable insights into system usage and helps debug issues. These patterns capture common API-related keywords.",
      "pattern_significance": "Comprehensive logging of API calls improves the overall debugging experience and ensures regulatory compliance.",
      "expected": 2,
      "found": 3,
      "coverage": 8.928571428571427,
      "quality_score": 8.928571428571427,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "FAIL",
      "score": 8.928571428571427,
      "details": [
        "Found 1 matches across 1 files",
        "  src/main/java/org/springframework/samples/petclinic/system/WebConfiguration.java:40 - app to switch languages using a URL parameter like"
      ],
      "category": "Logging",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 2,
      "matches_found": 1,
      "recommendations": [
        "Implement Log Application Messages throughout your codebase",
        "Focus on log important application state changes and events"
      ],
      "pattern_description": "Logging application messages provides valuable insights into system usage and helps debug issues. These patterns capture common application-related keywords.",
      "pattern_significance": "Comprehensive logging of application messages improves the overall debugging experience.",
      "expected": 2,
      "found": 1,
      "coverage": 8.928571428571427,
      "quality_score": 8.928571428571427,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "FAIL",
      "score": 26.785714285714285,
      "details": [
        "Found 3 matches across 3 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:25 - ui.Model;",
        "  src/main/java/org/springframework/samples/petclinic/owner/PetController.java:23 - ui.ModelMap;",
        "  src/main/java/org/springframework/samples/petclinic/vet/VetController.java:24 - ui.Model;"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 2,
      "matches_found": 3,
      "recommendations": [
        "Implement Client UI Errors Logged throughout your codebase",
        "Focus on capture and log client-side ui errors"
      ],
      "pattern_description": "Capturing client-side UI errors provides valuable insights into user experiences and helps debug issues. These patterns capture common UI-related keywords.",
      "pattern_significance": "Comprehensive logging of UI errors improves the overall debugging experience.",
      "expected": 2,
      "found": 3,
      "coverage": 26.785714285714285,
      "quality_score": 26.785714285714285,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Retry Logic"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Retry Logic throughout your codebase",
        "Focus on implement retry mechanisms for resilient operations"
      ],
      "pattern_description": "Implementing retry mechanisms ensures resilient operations. These patterns detect common retry-related keywords.",
      "pattern_significance": "Effective retry logic improves system reliability and fault tolerance.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Timeouts in IO Ops"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Timeouts in IO Ops throughout your codebase",
        "Focus on set appropriate timeouts for i/o operations"
      ],
      "pattern_description": "Setting appropriate timeouts ensures efficient operations. These patterns capture common timeout-related keywords.",
      "pattern_significance": "Well-configured timeouts improve system performance and prevent resource exhaustion.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Throttling & Drop Request"
      ],
      "category": "Performance",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Throttling & Drop Request throughout your codebase",
        "Focus on implement rate limiting and request throttling"
      ],
      "pattern_description": "Implementing rate limiting prevents abuse and ensures fair usage. These patterns detect common throttle-related keywords.",
      "pattern_significance": "Effective throttling improves system security and resource utilization.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Circuit Breakers"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Circuit Breakers throughout your codebase",
        "Focus on implement circuit breaker pattern for fault tolerance"
      ],
      "pattern_description": "Implementing circuit breakers ensures fault tolerance and improves system reliability. These patterns capture common circuit breaker-related keywords.",
      "pattern_significance": "Effective circuit breakers improve system resilience and prevent cascading failures.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "FAIL",
      "score": 17.857142857142854,
      "details": [
        "Found 6 matches across 2 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error\", \"There was an error in creating the owner.",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:142 - error\", \"There was an error in updating the owner.",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:148 - error\", \"Owner ID mismatch. Please try again.\");",
        "  ... and 3 more matches"
      ],
      "category": "Error Handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 2,
      "matches_found": 6,
      "recommendations": [
        "Implement Log System Errors throughout your codebase",
        "Focus on comprehensive error logging and exception handling"
      ],
      "pattern_description": "Comprehensive error logging ensures issue detection and resolution. These patterns capture common error-related keywords.",
      "pattern_significance": "Effective error logging improves system reliability and fault tolerance.",
      "expected": 2,
      "found": 6,
      "coverage": 17.857142857142854,
      "quality_score": 17.857142857142854,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for HTTP Error Codes"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement HTTP Error Codes throughout your codebase",
        "Focus on use appropriate http status codes for api responses"
      ],
      "pattern_description": "Using appropriate HTTP status codes ensures clear communication. These patterns capture common HTTP code-related keywords.",
      "pattern_significance": "Well-configured HTTP status codes improve system usability and prevent confusion.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Client Error Tracking"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Client Error Tracking throughout your codebase",
        "Focus on integrate client-side error tracking tools"
      ],
      "pattern_description": "Integrating client-side error tracking tools provides valuable insights into user experiences. These patterns capture common UI-related keywords.",
      "pattern_significance": "Comprehensive logging of UI errors improves the overall debugging experience.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "PASS",
      "score": 100.0,
      "details": [
        "Found 144 matches across 15 files",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:21 - Test;",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:24 - test.context.SpringBootTest;",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:25 - test.context.SpringBootTest.WebEnvironment;",
        "  ... and 141 more matches"
      ],
      "category": "Testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 2,
      "matches_found": 144,
      "recommendations": [
        "Good implementation of Automated Tests",
        "Consider optimizing existing patterns"
      ],
      "pattern_description": "Implementing comprehensive automated tests ensures issue detection and resolution. These patterns capture common test-related keywords.",
      "pattern_significance": "Effective automated testing improves system reliability and fault tolerance.",
      "expected": 2,
      "found": 144,
      "coverage": 100.0,
      "quality_score": 100.0,
      "matches": []
    }
  ],
  "score": 17.5,
  "overall_score": 17.5,
  "passed_gates": 2,
  "warning_gates": 0,
  "failed_gates": 13,
  "not_applicable_gates": 0,
  "total_applicable_gates": 15,
  "total_all_gates": 15,
  "critical_issues": [],
  "recommendations": [
    "Implement Logs Searchable/Available throughout your codebase",
    "Focus on ensure logs are structured and searchable for operational monitoring",
    "Good implementation of Avoid Logging Confidential Data",
    "Consider optimizing existing patterns",
    "Implement Create Audit Trail Logs throughout your codebase",
    "Focus on log critical business operations for audit compliance",
    "Implement Tracking ID for Logs throughout your codebase",
    "Focus on include correlation ids for distributed tracing",
    "Implement Log REST API Calls throughout your codebase",
    "Focus on log all api requests and responses for monitoring",
    "Implement Log Application Messages throughout your codebase",
    "Focus on log important application state changes and events",
    "Implement Client UI Errors Logged throughout your codebase",
    "Focus on capture and log client-side ui errors",
    "Implement Retry Logic throughout your codebase",
    "Focus on implement retry mechanisms for resilient operations",
    "Implement Timeouts in IO Ops throughout your codebase",
    "Focus on set appropriate timeouts for i/o operations",
    "Implement Throttling & Drop Request throughout your codebase",
    "Focus on implement rate limiting and request throttling",
    "Implement Circuit Breakers throughout your codebase",
    "Focus on implement circuit breaker pattern for fault tolerance",
    "Implement Log System Errors throughout your codebase",
    "Focus on comprehensive error logging and exception handling",
    "Implement HTTP Error Codes throughout your codebase",
    "Focus on use appropriate http status codes for api responses",
    "Implement Client Error Tracking throughout your codebase",
    "Focus on integrate client-side error tracking tools",
    "Good implementation of Automated Tests",
    "Consider optimizing existing patterns"
  ]
}