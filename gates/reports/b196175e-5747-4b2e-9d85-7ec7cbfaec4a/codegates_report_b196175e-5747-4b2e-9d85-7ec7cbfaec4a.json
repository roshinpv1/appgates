{
  "scan_id": "b196175e-5747-4b2e-9d85-7ec7cbfaec4a",
  "project_name": "spring-projects/spring-petclinic (main)",
  "repository_url": "https://github.com/spring-projects/spring-petclinic",
  "branch": "main",
  "scan_timestamp": "2025-07-22T14:35:14.155950",
  "scan_timestamp_formatted": "2025-07-22 14:35:14",
  "overall_score": 22.826204044836324,
  "threshold": 70,
  "status": "FAIL",
  "summary": {
    "total_gates": 16,
    "passed_gates": 3,
    "failed_gates": 13,
    "warning_gates": 0,
    "not_applicable_gates": 0,
    "total_files": 112,
    "total_lines": 14402
  },
  "gates": [
    {
      "gate": "ALERTING_ACTIONABLE",
      "display_name": "All alerting is actionable",
      "description": "Ensure all alerting integrations (Splunk, AppDynamics, ThousandEyes) are present and actionable.",
      "category": "Alerting",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "üéØ Infrastructure Framework Analysis:",
        "Expected Coverage: 100% (All integrations should be present)",
        "‚ö†Ô∏è Framework Detected but Not Implemented: 0/1 expected files",
        "Framework: All integrations should be present",
        "Recommendation: Implement the detected framework throughout your codebase",
        "Confidence: high",
        "No matches found for All alerting is actionable"
      ],
      "recommendations": [
        "üéØ Infrastructure Framework Detected: All integrations should be present",
        "Critical: Implement All alerting is actionable throughout your codebase",
        "Framework: All integrations should be present",
        "Expected Implementation: 1 files"
      ],
      "pattern_description": "Static pattern analysis for All alerting is actionable",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "category": "Logging",
      "priority": "high",
      "patterns_used": 20,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "import\\s+org\\.slf4j\\.Logger",
        "import\\s+org\\.slf4j\\.LoggerFactory",
        "LoggerFactory\\.getLogger\\(",
        "@Slf4j",
        "private\\s+static\\s+final\\s+Logger\\s+\\w+",
        "\\b\\w*logger\\w*\\.(info|debug|error|warn|trace|fatal)",
        "logback\\.xml",
        "application\\.properties.*logging",
        "import\\s+org\\.apache\\.logging\\.log4j",
        "import\\s+ch\\.qos\\.logback",
        "import\\s+java\\.util\\.logging",
        "Logger\\.getLogger\\(",
        "LogManager\\.getLogger\\(",
        "@Log4j2",
        "import\\s+org\\.springframework\\.boot\\.logging",
        "logging\\.level\\.",
        "logging\\.pattern\\.",
        "MDC\\.put\\(",
        "MDC\\.get\\(",
        "log\\.(info|debug|error|warn|trace)\\s*\\("
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Logs Searchable/Available"
      ],
      "recommendations": [
        "Critical: Implement Logs Searchable/Available throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on ensure logs are structured and searchable for operational monitoring",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Logs Searchable/Available",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 20,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Structured logging should be implemented across core application files",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.8,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.3,
            "penalty_multiplier": 0.7
          }
        }
      }
    },
    {
      "gate": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "description": "Prevent sensitive data from being logged accidentally",
      "category": "Security",
      "priority": "critical",
      "patterns_used": 31,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"'].*?\\)",
        "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*String\\.format\\s*\\(.*?(password|secret|token|apikey|access[_-]?key|credential)",
        "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*MessageFormat\\.format\\s*\\(.*?(password|secret|token|apikey|access[_-]?key|credential)",
        "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*\"\\{0\\}\".*?(password|secret|token|apikey|access[_-]?key|credential)",
        "(?i)\\bSystem\\.out\\.println\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
        "(?i)\\bSystem\\.err\\.println\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
        "(?i)\\bprintStackTrace\\s*\\(\\s*\\).*?(password|secret|token|apikey|access[_-]?key|credential)",
        "(?i)\"(password|secret|token|apikey|credential)\"\\s*[:=]\\s*[\"'][^\"']{6,}[\"']",
        "(?i)\\b(?:sk_live_|pk_live_|sk_test_|pk_test_)[A-Za-z0-9]{20,}\\b",
        "(?i)\\bgithub_pat_[A-Za-z0-9_]{20,}\\b",
        "-----BEGIN\\s+(?:RSA\\s+)?PRIVATE\\s+KEY-----",
        "(?i)\\b(?:ghp_|gho_|ghu_|ghs_|ghr_)[A-Za-z0-9_]{20,}\\b",
        "(?i)\\b(?:AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\\b",
        "(?i)\\b(?:ya29\\.[0-9A-Za-z\\-_]+)\\b",
        "(?i)\\b(?:1//[0-9A-Za-z\\-_]{43})\\b",
        "(?i)\\b(?:AIza[0-9A-Za-z\\-_]{35})\\b",
        "(?i)\\b(?:sk-[0-9A-Za-z]{24})\\b",
        "(?i)\\b(?:pk-[0-9A-Za-z]{24})\\b",
        "(?i)\\b(?:xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
        "(?i)\\b(?:xoxr-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
        "(?i)\\b(?:xoxa-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
        "(?i)\\b(?:xoxa-2-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
        "(?i)\\b(?:sk-[0-9A-Za-z]{48})\\b",
        "(?i)\\b(?:AC[a-z0-9]{32})\\b",
        "(?i)\\b(?:CA[a-z0-9]{32})\\b",
        "(?i)\\b(?:SG\\.[a-z0-9]{22}\\.[a-z0-9]{43})\\b",
        "(?i)\\b(?:key-[0-9a-zA-Z]{32})\\b",
        "(?i)\\b(?:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\\b",
        "(?i)\\b(?:[a-z0-9]{32})\\b",
        "(?i)\\b(?:[a-z0-9]{40})\\b",
        "(?i)\\b(?:[a-z0-9]{64})\\b"
      ],
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Security Gate Analysis:",
        "Expected Violations: 0 (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Violations: 0 violations across 0 files",
        "Files with Violations: 0.0% (0/1 relevant files)",
        "‚úÖ No security violations found - perfect implementation",
        "Confidence: medium",
        "No security violations found for Avoid Logging Confidential Data"
      ],
      "recommendations": [
        "‚úÖ Avoid Logging Confidential Data is well implemented",
        "No security violations found - perfect implementation"
      ],
      "pattern_description": "Static pattern analysis for Avoid Logging Confidential Data",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 31,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 0.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 0,
            "reasoning": "No secrets should be logged - this is a security gate where 0 violations is the goal",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "violation_penalty": 20,
            "max_penalty": 100,
            "bonus_for_clean": 10,
            "is_security_gate": true
          },
          "security_violations": 0,
          "penalty_applied": 0,
          "is_security_gate": true
        }
      }
    },
    {
      "gate": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "description": "Log critical business operations for audit compliance",
      "category": "Compliance",
      "priority": "high",
      "patterns_used": 28,
      "matches_found": 4,
      "matches": [
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "data.*access",
          "match": "DataAccess",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "data.*access",
          "match": "DataAccess",
          "line": 46,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "data.*access",
          "match": "DataAccess",
          "line": 52,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "data.*access",
          "match": "DataAccess",
          "line": 56,
          "language": "Java",
          "source": "Static"
        }
      ],
      "patterns": [
        "audit.*log",
        "audit.*trail",
        "business.*log",
        "transaction.*log",
        "@Audited",
        "@AuditTable",
        "AuditEvent",
        "AuditLogger",
        "AuditService",
        "audit\\.(info|debug|error|warn|trace)",
        "logAuditEvent",
        "recordAudit",
        "auditTrail",
        "compliance.*log",
        "regulatory.*log",
        "security.*event",
        "user.*action",
        "data.*access",
        "system.*event",
        "audit.*log",
        "audit.*trail",
        "business.*log",
        "compliance.*log",
        "regulatory.*log",
        "security.*event",
        "user.*action",
        "data.*access",
        "system.*event"
      ],
      "score": 1.777777777777778,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 100.0% (1/1 expected files)",
        "Traditional Coverage: 100.0% (1/1 relevant files)",
        "Confidence: medium",
        "Found 4 matches across 1 files",
        "  src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java:19 - DataAccess",
        "  src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java:46 - DataAccess",
        "  src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java:52 - DataAccess",
        "  ... and 1 more matches"
      ],
      "recommendations": [
        "Critical: Implement Create Audit Trail Logs throughout your codebase",
        "Expected 10% coverage, currently at 100.0% (based on 1 expected files)",
        "Focus on log critical business operations for audit compliance",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Create Audit Trail Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 28,
          "matches": 8,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 4,
        "overlap_matches": 4,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 2.2222222222222223,
          "final_score": 1.777777777777778,
          "matches_count": 4,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Audit trails should be present in business logic files",
            "confidence": "medium",
            "max_files_expected": 100
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "description": "Include correlation IDs for distributed tracing",
      "category": "Observability",
      "priority": "medium",
      "patterns_used": 16,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "x-correlation-id",
        "x-request-id",
        "x-trace-id",
        "x-b3-traceid",
        "MDC\\.put\\(\"(correlationId|traceId|requestId)\"",
        "MDC\\.get\\(\"(correlationId|traceId|requestId)\"",
        "req\\.headers\\[['\"]x-(correlation-id|request-id)['\"]\\]",
        "res\\.set\\(['\"]x-(correlation-id|request-id)['\"],",
        "request\\.headers\\.get\\(['\"]x-(correlation-id|request-id)['\"]",
        "logger\\.bind\\(correlation_id=",
        "traceparent",
        "uber-trace-id",
        "correlation_id",
        "request_id",
        "trace_id",
        "tracking.*id"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Tracking ID for Logs"
      ],
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Correlation IDs should be present in API and service files",
            "confidence": "medium",
            "max_files_expected": 80
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "description": "Log all API requests and responses for monitoring",
      "category": "API",
      "priority": "medium",
      "patterns_used": 21,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "@RequestMapping.*log",
        "@RestController.*log",
        "logger\\.(info|debug)\\(.*request",
        "logger\\.(info|debug)\\(.*response",
        "logger\\.(info|debug)\\(.*api",
        "HttpServletRequest.*log",
        "HttpServletResponse.*log",
        "RestTemplate.*log",
        "WebClient.*log",
        "FeignClient.*log",
        "logger\\.(info|debug)\\(.*endpoint",
        "logger\\.(info|debug)\\(.*url",
        "logger\\.(info|debug)\\(.*method",
        "logger\\.(info|debug)\\(.*status",
        "logger\\.(info|debug)\\(.*duration",
        "api.*log",
        "request.*log",
        "response.*log",
        "endpoint.*log",
        "http.*log",
        "rest.*log"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Log REST API Calls"
      ],
      "recommendations": [
        "Critical: Implement Log REST API Calls throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on log all api requests and responses for monitoring",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 21,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 30,
            "reasoning": "API calls should be logged for monitoring and debugging",
            "confidence": "high",
            "max_files_expected": 120
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "description": "Log important application state changes and events",
      "category": "Logging",
      "priority": "medium",
      "patterns_used": 23,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "logger\\.(info|debug)\\(.*application",
        "logger\\.(info|debug)\\(.*business",
        "logger\\.(info|debug)\\(.*event",
        "logger\\.(info|debug)\\(.*process",
        "logger\\.(info|debug)\\(.*operation",
        "logger\\.(info|debug)\\(.*service",
        "logger\\.(info|debug)\\(.*function",
        "logger\\.(info|debug)\\(.*method",
        "logger\\.(info|debug)\\(.*start",
        "logger\\.(info|debug)\\(.*end",
        "logger\\.(info|debug)\\(.*complete",
        "logger\\.(info|debug)\\(.*success",
        "logger\\.(info|debug)\\(.*failure",
        "logger\\.(info|debug)\\(.*result",
        "logger\\.(info|debug)\\(.*data",
        "application.*log",
        "business.*log",
        "event.*log",
        "process.*log",
        "operation.*log",
        "service.*log",
        "function.*log",
        "method.*log"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Log Application Messages"
      ],
      "recommendations": [
        "Critical: Implement Log Application Messages throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on log important application state changes and events",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 23,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 10.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 40,
            "reasoning": "Application messages should be logged across business logic",
            "confidence": "medium",
            "max_files_expected": 180
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "description": "Capture and log client-side UI errors",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 7,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "ui.*error",
        "client.*error",
        "frontend.*error",
        "user.*error",
        "interface.*error",
        "display.*error",
        "render.*error"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Client UI Errors Logged"
      ],
      "recommendations": [
        "Critical: Implement Client UI Errors Logged throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on capture and log client-side ui errors",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Client UI Errors Logged",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 7,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "UI error logging should be present in frontend files",
            "confidence": "medium",
            "max_files_expected": 60
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.5,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "description": "Implement retry mechanisms for resilient operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 23,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "@Retryable",
        "@EnableRetry",
        "RetryTemplate",
        "retry.*attempt",
        "retry.*count",
        "retry.*delay",
        "retry.*backoff",
        "retry.*policy",
        "retry.*strategy",
        "retry.*mechanism",
        "retry.*logic",
        "retry.*handler",
        "retry.*callback",
        "retry.*exception",
        "retry.*failure",
        "retry.*attempt",
        "retry.*count",
        "retry.*delay",
        "retry.*backoff",
        "retry.*policy",
        "retry.*strategy",
        "retry.*mechanism",
        "retry.*logic"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Retry Logic"
      ],
      "recommendations": [
        "Critical: Implement Retry Logic throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement retry mechanisms for resilient operations",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 23,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Retry logic should be present in network and external service calls",
            "confidence": "medium",
            "max_files_expected": 80
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "description": "Set appropriate timeouts for I/O operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 24,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "timeout.*milliseconds",
        "timeout.*seconds",
        "timeout.*minutes",
        "setTimeout\\(",
        "withTimeout\\(",
        "timeout.*policy",
        "timeout.*config",
        "timeout.*handler",
        "timeout.*exception",
        "timeout.*error",
        "timeout.*failure",
        "timeout.*response",
        "timeout.*request",
        "timeout.*connection",
        "timeout.*read",
        "timeout.*write",
        "timeout.*milliseconds",
        "timeout.*seconds",
        "timeout.*minutes",
        "timeout.*policy",
        "timeout.*config",
        "timeout.*connection",
        "timeout.*read",
        "timeout.*write"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Timeouts in IO Ops"
      ],
      "recommendations": [
        "Critical: Implement Timeouts in IO Ops throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on set appropriate timeouts for i/o operations",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 24,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Timeouts should be present in network and database operations",
            "confidence": "medium",
            "max_files_expected": 80
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "description": "Implement rate limiting and request throttling",
      "category": "Performance",
      "priority": "medium",
      "patterns_used": 23,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "rate.*limit",
        "throttle",
        "rate.*limiter",
        "throttling.*config",
        "request.*limit",
        "drop.*request",
        "reject.*request",
        "queue.*full",
        "backpressure",
        "circuit.*breaker",
        "bulkhead",
        "semaphore",
        "token.*bucket",
        "leaky.*bucket",
        "sliding.*window",
        "fixed.*window",
        "rate.*limit",
        "throttle",
        "request.*limit",
        "drop.*request",
        "reject.*request",
        "backpressure",
        "semaphore"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Throttling & Drop Request"
      ],
      "recommendations": [
        "Critical: Implement Throttling & Drop Request throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement rate limiting and request throttling",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 23,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 10.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Rate limiting should be present in API endpoints and external service calls",
            "confidence": "medium",
            "max_files_expected": 80
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 17,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "circuit.*breaker",
        "CircuitBreaker",
        "Hystrix",
        "Resilience4j",
        "open.*state",
        "closed.*state",
        "half.*open",
        "failure.*threshold",
        "timeout.*window",
        "error.*rate",
        "fallback",
        "degradation",
        "circuit.*breaker",
        "open.*state",
        "closed.*state",
        "half.*open",
        "fallback"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Circuit Breakers"
      ],
      "recommendations": [
        "Critical: Implement Circuit Breakers throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement circuit breaker pattern for fault tolerance",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 17,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Circuit breakers should be present in external service calls and critical operations",
            "confidence": "medium",
            "max_files_expected": 60
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "description": "Comprehensive error logging and exception handling",
      "category": "Error Handling",
      "priority": "high",
      "patterns_used": 19,
      "matches_found": 12,
      "matches": [
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java",
          "pattern": "throw.*exception",
          "match": "Throw(() -> new IllegalArgumentException",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java",
          "pattern": "throw.*exception",
          "match": "Throw(() -> new IllegalArgumentException",
          "line": 167,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/PetController.java",
          "pattern": "throw.*exception",
          "match": "Throw(() -> new IllegalArgumentException",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/PetController.java",
          "pattern": "throw.*exception",
          "match": "Throw(() -> new IllegalArgumentException",
          "line": 80,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/VisitController.java",
          "pattern": "throw.*exception",
          "match": "Throw(() -> new IllegalArgumentException",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java",
          "pattern": "throw.*exception",
          "match": "throws IllegalArgumentException",
          "line": 60,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "throw.*exception",
          "match": "throws DataAccessException",
          "line": 46,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "throw.*exception",
          "match": "throws DataAccessException",
          "line": 52,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java",
          "pattern": "throw.*exception",
          "match": "throws DataAccessException",
          "line": 56,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java",
          "pattern": "throw.*exception",
          "match": "throws ParseException",
          "line": 50,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java",
          "pattern": "throw.*exception",
          "match": "throw new ParseException",
          "line": 57,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/main/java/org/springframework/samples/petclinic/system/CrashController.java",
          "pattern": "throw.*exception",
          "match": "throw new RuntimeException",
          "line": 33,
          "language": "Java",
          "source": "Static"
        }
      ],
      "patterns": [
        "log\\.error",
        "log\\.fatal",
        "log\\.severe",
        "exception.*log",
        "error.*log",
        "catch.*exception",
        "try.*catch",
        "throw.*exception",
        "RuntimeException",
        "Exception.*handler",
        "error.*handler",
        "global.*exception",
        "ControllerAdvice",
        "ExceptionHandler",
        "log\\.error",
        "exception.*log",
        "error.*log",
        "catch.*exception",
        "try.*catch"
      ],
      "score": 31.47058823529412,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 700.0% (7/1 expected files)",
        "Traditional Coverage: 700.0% (7/1 relevant files)",
        "Confidence: medium",
        "Found 12 matches across 7 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:66 - Throw(() -> new IllegalArgumentException",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:167 - Throw(() -> new IllegalArgumentException",
        "  src/main/java/org/springframework/samples/petclinic/owner/PetController.java:66 - Throw(() -> new IllegalArgumentException",
        "  ... and 9 more matches"
      ],
      "recommendations": [
        "Critical: Implement Log System Errors throughout your codebase",
        "Expected 10% coverage, currently at 700.0% (based on 1 expected files)",
        "Focus on comprehensive error logging and exception handling",
        "Moderate Gap: Need to implement in -6 more files"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 19,
          "matches": 13,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 12,
        "overlap_matches": 1,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 31.47058823529412,
          "final_score": 31.47058823529412,
          "matches_count": 12,
          "expected_coverage": {
            "percentage": 30,
            "reasoning": "Error logging should be present across all application layers",
            "confidence": "high",
            "max_files_expected": 120
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "description": "Use appropriate HTTP status codes for API responses",
      "category": "API",
      "priority": "medium",
      "patterns_used": 18,
      "matches_found": 0,
      "matches": [],
      "patterns": [
        "HttpStatus",
        "ResponseEntity",
        "ResponseStatus",
        "HttpStatusCode",
        "status.*code",
        "200.*OK",
        "201.*Created",
        "400.*Bad.*Request",
        "401.*Unauthorized",
        "403.*Forbidden",
        "404.*Not.*Found",
        "500.*Internal.*Server.*Error",
        "502.*Bad.*Gateway",
        "503.*Service.*Unavailable",
        "status.*code",
        "200.*OK",
        "400.*Bad.*Request",
        "500.*Internal.*Server.*Error"
      ],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for HTTP Error Codes"
      ],
      "recommendations": [
        "Critical: Implement HTTP Error Codes throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on use appropriate http status codes for api responses",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 18,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 0.0,
          "final_score": 0.0,
          "matches_count": 0,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "HTTP status codes should be used consistently in API responses",
            "confidence": "medium",
            "max_files_expected": 100
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "description": "Integrate client-side error tracking tools",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 0.0% (0/1 expected files)",
        "Traditional Coverage: 0.0% (0/1 relevant files)",
        "Confidence: medium",
        "No matches found for Client Error Tracking"
      ],
      "recommendations": [
        "Critical: Implement Client Error Tracking throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on integrate client-side error tracking tools",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Client Error Tracking",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 25,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "description": "Comprehensive automated test coverage",
      "category": "Testing",
      "priority": "high",
      "patterns_used": 30,
      "matches_found": 344,
      "matches": [
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 104,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 112,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 123,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 134,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 142,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 149,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 158,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 170,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 183,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 195,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 202,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 216,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 231,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 28,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 43,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 44,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 45,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 46,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 47,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 68,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "when\\(.*\\)\\.thenReturn",
          "match": "when(this.owners.findByLastNameStartingWith(anyString(), any(Pageable.class))).thenReturn",
          "line": 145,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "when\\(.*\\)\\.thenReturn",
          "match": "when(this.owners.findByLastNameStartingWith(eq(\"Franklin\"), any(Pageable.class))).thenReturn",
          "line": 152,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "when\\(.*\\)\\.thenReturn",
          "match": "when(this.owners.findByLastNameStartingWith(eq(\"Unknown Surname\"), any(Pageable.class))).thenReturn",
          "line": 161,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "when\\(.*\\)\\.thenReturn",
          "match": "when(owners.findById(pathOwnerId)).thenReturn",
          "line": 243,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "@WebMvcTest",
          "match": "@WebMvcTest",
          "line": 58,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 29,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 30,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 48,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 49,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 50,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 106,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 114,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 125,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 136,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 146,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 153,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 162,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 172,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 185,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 197,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 204,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 218,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 245,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/new\").param(\"firstName\", \"Joe\")",
          "line": 115,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/new\").param(\"firstName\", \"Joe\").param(\"lastName\", \"Bloggs\").param(\"city\", \"London\"))",
          "line": 126,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/edit\", TEST_OWNER_ID).param(\"firstName\", \"Joe\")",
          "line": 186,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/edit\", TEST_OWNER_ID).param(\"firstName\", \"Joe\")",
          "line": 205,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 107,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 108,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 109,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 120,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 127,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 128,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 129,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 130,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 131,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 137,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 138,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 139,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 154,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 155,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 163,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 164,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 165,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 166,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 173,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 174,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 175,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 176,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 177,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 178,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 179,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 180,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 191,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 192,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 198,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 199,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 209,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 210,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 211,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 212,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 213,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 219,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 220,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 221,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 222,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 223,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 224,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 225,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 226,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 228,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 246,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 247,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 248,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 73,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 87,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 96,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 107,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 126,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 145,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 155,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 183,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 204,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 215,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 235,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 90,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 93,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 99,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 101,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 102,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 103,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 104,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 120,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 123,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 130,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 140,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 142,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 150,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 152,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 159,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 170,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 175,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 177,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 180,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 187,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 198,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 201,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 209,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 210,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 211,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 212,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 219,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 230,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 238,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 244,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java",
          "pattern": "@DataJpaTest",
          "match": "@DataJpaTest",
          "line": 70,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 88,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 96,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 109,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 122,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 135,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 148,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 164,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 174,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 187,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 199,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 30,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 37,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 63,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "@WebMvcTest",
          "match": "@WebMvcTest",
          "line": 50,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 31,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 38,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 39,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 40,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 41,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 42,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 61,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 90,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 98,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 111,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 124,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 137,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 153,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 166,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 176,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 189,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 201,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/new\", TEST_OWNER_ID).param(\"name\", \"Betty\")",
          "line": 99,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/new\", TEST_OWNER_ID).param(\"name\", \"\\t \\n\")",
          "line": 112,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/new\", TEST_OWNER_ID).param(\"name\", \"petty\")",
          "line": 125,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/new\", TEST_OWNER_ID).param(\"name\", \"Betty\")",
          "line": 138,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/new\", TEST_OWNER_ID).param(\"name\", \"Betty\")",
          "line": 154,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/{petId}/edit\", TEST_OWNER_ID, TEST_PET_ID).param(\"name\", \"Betty\")",
          "line": 177,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/{petId}/edit\", TEST_OWNER_ID, TEST_PET_ID).param(\"name\", \" \")",
          "line": 190,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/{petId}/edit\", TEST_OWNER_ID, TEST_PET_ID).param(\"name\", \"  \")",
          "line": 202,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 91,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 92,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 93,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 102,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 103,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 114,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 115,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 116,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 117,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 118,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 119,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 127,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 128,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 129,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 130,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 131,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 132,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 140,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 141,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 142,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 143,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 144,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 145,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 156,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 157,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 158,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 159,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 160,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 161,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 167,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 168,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 169,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 180,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 181,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 192,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 193,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 194,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 195,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 196,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 204,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 205,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 206,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 207,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 208,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 81,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 87,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 91,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertNotNull",
          "match": "assertNotNull",
          "line": 20,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertNotNull",
          "match": "assertNotNull",
          "line": 119,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertNotNull",
          "match": "assertNotNull",
          "line": 123,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "assertNotNull",
          "match": "assertNotNull",
          "line": 125,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java",
          "pattern": "@SpringBootTest",
          "match": "@SpringBootTest",
          "line": 51,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/I18nPropertiesSyncTest.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 39,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/I18nPropertiesSyncTest.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 85,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 59,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 75,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 65,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 66,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 67,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 68,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 69,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 70,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 72,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 81,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 82,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 83,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 85,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 89,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "@SpringBootTest",
          "match": "@SpringBootTest",
          "line": 49,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "TestRestTemplate",
          "match": "TestRestTemplate",
          "line": 33,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java",
          "pattern": "TestRestTemplate",
          "match": "TestRestTemplate",
          "line": 57,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 82,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 92,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 29,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 34,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 35,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 51,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "@WebMvcTest",
          "match": "@WebMvcTest",
          "line": 43,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 30,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 32,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 36,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 37,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 49,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 85,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 94,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 86,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 87,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 88,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 95,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 96,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 97,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 67,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 74,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 84,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 32,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 55,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "@WebMvcTest",
          "match": "@WebMvcTest",
          "line": 43,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 20,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 21,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 22,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 23,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 24,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 33,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "MockMvc",
          "line": 53,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 69,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 76,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "MockMvc",
          "match": "mockMvc",
          "line": 86,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/{petId}/visits/new\", TEST_OWNER_ID, TEST_PET_ID)",
          "line": 77,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "perform\\(.*\\)",
          "match": "perform(post(\"/owners/{ownerId}/pets/{petId}/visits/new\", TEST_OWNER_ID, TEST_PET_ID)",
          "line": 87,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 70,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 71,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 80,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 81,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 89,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 90,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java",
          "pattern": "andExpect",
          "match": "andExpect",
          "line": 91,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 65,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 80,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 92,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 103,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertTrue",
          "match": "assertTrue",
          "line": 32,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertTrue",
          "match": "assertTrue",
          "line": 89,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertTrue",
          "match": "assertTrue",
          "line": 100,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertTrue",
          "match": "assertTrue",
          "line": 112,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertFalse",
          "match": "assertFalse",
          "line": 31,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "assertFalse",
          "match": "assertFalse",
          "line": 74,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 24,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetValidatorTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 39,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 43,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 61,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 67,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 71,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java",
          "pattern": "@SpringBootTest",
          "match": "@SpringBootTest",
          "line": 41,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 55,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 63,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 70,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 60,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 67,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 20,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 33,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "Mockito",
          "match": "mockito",
          "line": 34,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "Mockito",
          "match": "Mockito",
          "line": 41,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java",
          "pattern": "@Mock",
          "match": "@Mock",
          "line": 45,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 46,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 52,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 56,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java",
          "pattern": "@SpringBootTest",
          "match": "@SpringBootTest",
          "line": 34,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 43,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 19,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 54,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 56,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 57,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 35,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 21,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 37,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetTests.java",
          "pattern": "@Test",
          "match": "@Test",
          "line": 28,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 21,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 36,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 37,
          "language": "Java",
          "source": "Static"
        },
        {
          "file": "src/test/java/org/springframework/samples/petclinic/vet/VetTests.java",
          "pattern": "assertThat",
          "match": "assertThat",
          "line": 38,
          "language": "Java",
          "source": "Static"
        }
      ],
      "patterns": [
        "@Test",
        "@ParameterizedTest",
        "@RepeatedTest",
        "@TestFactory",
        "assertThat",
        "assertEquals",
        "assertTrue",
        "assertFalse",
        "assertNotNull",
        "assertNull",
        "Mockito",
        "@Mock",
        "@InjectMocks",
        "when\\(.*\\)\\.thenReturn",
        "verify",
        "@SpringBootTest",
        "@WebMvcTest",
        "@DataJpaTest",
        "@RestClientTest",
        "TestRestTemplate",
        "MockMvc",
        "perform\\(.*\\)",
        "andExpect",
        "andReturn",
        "@Test",
        "assertEquals",
        "assertTrue",
        "assertFalse",
        "assertNotNull",
        "assertNull"
      ],
      "score": 65.22448979591837,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 1500.0% (15/1 expected files)",
        "Traditional Coverage: 1500.0% (15/1 relevant files)",
        "Confidence: medium",
        "Found 344 matches across 15 files",
        "  src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java:104 - @Test",
        "  src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java:112 - @Test",
        "  src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java:123 - @Test",
        "  ... and 341 more matches"
      ],
      "recommendations": [
        "Improve: Enhance Automated Tests implementation",
        "Current: 1500.0% coverage, Target: 10% coverage",
        "Need to implement in -14 more files"
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 112,
      "relevant_files": 18,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 30,
          "matches": 453,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 344,
        "overlap_matches": 109,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 65.22448979591837,
          "final_score": 65.22448979591837,
          "matches_count": 344,
          "expected_coverage": {
            "percentage": 40,
            "reasoning": "Automated tests should cover critical business logic and API endpoints",
            "confidence": "high",
            "max_files_expected": 150
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    }
  ],
  "metadata": {
    "file_count": 112,
    "line_count": 14402,
    "language_distribution": {
      "Docker": {
        "files": 1,
        "percentage": 1.3
      },
      "JSON": {
        "files": 1,
        "percentage": 1.3
      },
      "YAML": {
        "files": 3,
        "percentage": 3.8
      },
      "Batch": {
        "files": 1,
        "percentage": 1.3
      },
      "XML": {
        "files": 3,
        "percentage": 3.8
      },
      "Gradle": {
        "files": 1,
        "percentage": 1.3
      },
      "Java": {
        "files": 43,
        "percentage": 55.1
      },
      "SQL": {
        "files": 9,
        "percentage": 11.5
      },
      "CSS": {
        "files": 1,
        "percentage": 1.3
      },
      "HTML": {
        "files": 11,
        "percentage": 14.1
      },
      "SCSS": {
        "files": 4,
        "percentage": 5.1
      }
    },
    "primary_technologies": [
      "Java",
      "HTML",
      "SQL",
      "SCSS",
      "YAML"
    ],
    "scan_duration": 0,
    "pattern_library_version": "2.0.0"
  },
  "llm_info": {
    "provider": "none",
    "model": "unknown",
    "patterns_generated": 0,
    "patterns_matched": 0,
    "confidence": "low"
  },
  "weighted_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 0,
      "total_static_patterns": 300,
      "total_llm_matches": 0,
      "total_static_matches": 474,
      "total_unique_matches": 360,
      "total_overlap_matches": 114,
      "coverage_improvement": 0.0,
      "confidence_distribution": {
        "high": 0,
        "medium": 3,
        "low": 13
      }
    },
    "pattern_library_version": "2.0.0",
    "static_patterns_used": 300,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {
      "high": 0,
      "medium": 3,
      "low": 13
    },
    "weighted_scoring": {
      "total_weight": 174.0,
      "applicable_gates": 16,
      "gate_scores": {
        "STRUCTURED_LOGS": {
          "score": 0.0,
          "weight": 15.0,
          "weighted_score": 0.0
        },
        "AVOID_LOGGING_SECRETS": {
          "score": 100.0,
          "weight": 25.0,
          "weighted_score": 2500.0
        },
        "AUDIT_TRAIL": {
          "score": 1.777777777777778,
          "weight": 12.0,
          "weighted_score": 21.333333333333336
        },
        "CORRELATION_ID": {
          "score": 0.0,
          "weight": 8.0,
          "weighted_score": 0.0
        },
        "LOG_API_CALLS": {
          "score": 0.0,
          "weight": 12.0,
          "weighted_score": 0.0
        },
        "LOG_APPLICATION_MESSAGES": {
          "score": 0.0,
          "weight": 10.0,
          "weighted_score": 0.0
        },
        "UI_ERRORS": {
          "score": 0.0,
          "weight": 8.0,
          "weighted_score": 0.0
        },
        "RETRY_LOGIC": {
          "score": 0.0,
          "weight": 12.0,
          "weighted_score": 0.0
        },
        "TIMEOUTS": {
          "score": 0.0,
          "weight": 12.0,
          "weighted_score": 0.0
        },
        "THROTTLING": {
          "score": 0.0,
          "weight": 10.0,
          "weighted_score": 0.0
        },
        "CIRCUIT_BREAKERS": {
          "score": 0.0,
          "weight": 12.0,
          "weighted_score": 0.0
        },
        "ERROR_LOGS": {
          "score": 31.47058823529412,
          "weight": 15.0,
          "weighted_score": 472.05882352941177
        },
        "HTTP_CODES": {
          "score": 0.0,
          "weight": 8.0,
          "weighted_score": 0.0
        },
        "AUTOMATED_TESTS": {
          "score": 65.22448979591837,
          "weight": 15.0,
          "weighted_score": 978.3673469387757
        }
      },
      "overall_weighted_score": 22.826204044836324
    },
    "pattern_statistics": {
      "total_gates": 14,
      "total_patterns": 1050,
      "supported_technologies": [
        "java",
        "python",
        "javascript",
        "typescript",
        "csharp",
        "go",
        "rust",
        "php",
        "ruby",
        "all_languages"
      ],
      "technology_coverage": {
        "java": 187,
        "python": 106,
        "javascript": 118,
        "typescript": 92,
        "csharp": 93,
        "go": 89,
        "rust": 89,
        "php": 82,
        "ruby": 81,
        "all_languages": 113
      }
    }
  },
  "applicability": {
    "enabled": true,
    "codebase_characteristics": {
      "languages": [
        "HTML",
        "Gradle",
        "Java",
        "SQL",
        "Batch",
        "XML",
        "JSON",
        "CSS",
        "Docker",
        "SCSS",
        "YAML"
      ],
      "language_counts": {
        "Docker": 1,
        "JSON": 1,
        "YAML": 3,
        "Batch": 1,
        "XML": 3,
        "Gradle": 1,
        "Java": 43,
        "SQL": 9,
        "CSS": 1,
        "HTML": 11,
        "SCSS": 4
      },
      "is_frontend": true,
      "is_backend": true,
      "is_api": true,
      "is_mobile": false,
      "is_backend_only": false,
      "is_frontend_only": false,
      "is_fullstack": true,
      "primary_technology": "backend"
    },
    "total_gates": 16,
    "applicable_gates": 16,
    "non_applicable_gates": 0,
    "applicable_by_category": {},
    "non_applicable_details": [],
    "applicable_gate_names": [
      "ALERTING_ACTIONABLE",
      "STRUCTURED_LOGS",
      "AVOID_LOGGING_SECRETS",
      "AUDIT_TRAIL",
      "CORRELATION_ID",
      "LOG_API_CALLS",
      "LOG_APPLICATION_MESSAGES",
      "UI_ERRORS",
      "RETRY_LOGIC",
      "TIMEOUTS",
      "THROTTLING",
      "CIRCUIT_BREAKERS",
      "ERROR_LOGS",
      "HTTP_CODES",
      "UI_ERROR_TOOLS",
      "AUTOMATED_TESTS"
    ]
  }
}