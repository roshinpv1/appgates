{
  "report_metadata": {
    "scan_id": "a1ab8134-8ed8-4dd8-8c07-6558a5b58471",
    "repository_url": "https://github.com/apache/fineract",
    "branch": "develop",
    "generated_at": "2025-07-20T21:43:51.056369",
    "version": "2.0.0",
    "llm_source": "unknown",
    "llm_model": "unknown",
    "validation_type": "hybrid"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 5000,
    "total_lines": 502652,
    "timestamp": "2025-07-20T21:43:51.056393",
    "project_name": "apache/fineract (develop)",
    "project_path": "https://github.com/apache/fineract",
    "repository_url": "https://github.com/apache/fineract"
  },
  "languages_detected": [
    "YAML",
    "JSON",
    "XML",
    "SQL",
    "Shell",
    "Gradle",
    "Java"
  ],
  "gates": [
    {
      "name": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "status": "FAIL",
      "score": 31.211401425178146,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 3.5% (146/4210 expected files)",
        "Traditional Coverage: 3.5% (146/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 635 matches across 146 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:229 - @Slf4j",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:949 - log.debug",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:51 - slf4j",
        "  ... and 632 more matches"
      ],
      "category": "Logging",
      "priority": "high",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "patterns_used": 78,
      "matches_found": 635,
      "recommendations": [
        "Critical: Implement Logs Searchable/Available throughout your codebase",
        "Expected 10% coverage, currently at 3.5% (based on 4210 expected files)",
        "Focus on ensure logs are structured and searchable for operational monitoring",
        "Moderate Gap: Need to implement in 275 more files"
      ],
      "pattern_description": "Static pattern analysis for Logs Searchable/Available",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 78,
          "matches": 1718,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 635,
        "overlap_matches": 1083
      },
      "expected": 78,
      "found": 635,
      "coverage": 31.211401425178146,
      "quality_score": 31.211401425178146,
      "matches": []
    },
    {
      "name": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "status": "PASS",
      "score": 90.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (1/4210 expected files)",
        "Traditional Coverage: 0.0% (1/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 1 matches across 1 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/migration/TenantDatabaseUpgradeService.java:131 - log.info(\"- fineract.tenant.readonly.password: {}\""
      ],
      "category": "Security",
      "priority": "critical",
      "description": "Prevent sensitive data from being logged accidentally",
      "patterns_used": 5,
      "matches_found": 1,
      "recommendations": [
        "Good: Avoid Logging Confidential Data is well implemented",
        "Achieved: 0.0% coverage (Target: 10%)"
      ],
      "pattern_description": "Static pattern analysis for Avoid Logging Confidential Data",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 2,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1,
        "overlap_matches": 1
      },
      "expected": 5,
      "found": 1,
      "coverage": 90.0,
      "quality_score": 90.0,
      "matches": []
    },
    {
      "name": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "status": "FAIL",
      "score": 21.163895486935868,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 2.4% (99/4210 expected files)",
        "Traditional Coverage: 2.4% (99/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 275 matches across 99 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:949 - log.debug",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:979 - TransactionChronologicallyLatest = loanTransaction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:989 - TransactionChronolog",
        "  ... and 272 more matches"
      ],
      "category": "Compliance",
      "priority": "high",
      "description": "Log critical business operations for audit compliance",
      "patterns_used": 16,
      "matches_found": 275,
      "recommendations": [
        "Critical: Implement Create Audit Trail Logs throughout your codebase",
        "Expected 10% coverage, currently at 2.4% (based on 4210 expected files)",
        "Focus on log critical business operations for audit compliance",
        "Moderate Gap: Need to implement in 322 more files"
      ],
      "pattern_description": "Static pattern analysis for Create Audit Trail Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 343,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 275,
        "overlap_matches": 68
      },
      "expected": 16,
      "found": 275,
      "coverage": 21.163895486935868,
      "quality_score": 21.163895486935868,
      "matches": []
    },
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Tracking ID for Logs"
      ],
      "category": "Observability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 13,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 13,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 13,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "FAIL",
      "score": 24.156769596199528,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 2.7% (113/4210 expected files)",
        "Traditional Coverage: 2.7% (113/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 886 matches across 113 files",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:2731 - @Get",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:2961 - @Get",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:2989 - @Get",
        "  ... and 883 more matches"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 28,
      "matches_found": 886,
      "recommendations": [
        "Critical: Implement Log REST API Calls throughout your codebase",
        "Expected 10% coverage, currently at 2.7% (based on 4210 expected files)",
        "Focus on log all api requests and responses for monitoring",
        "Moderate Gap: Need to implement in 307 more files"
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 28,
          "matches": 886,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 886,
        "overlap_matches": 0
      },
      "expected": 28,
      "found": 886,
      "coverage": 24.156769596199528,
      "quality_score": 24.156769596199528,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "FAIL",
      "score": 27.57719714964371,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 3.1% (129/4210 expected files)",
        "Traditional Coverage: 3.1% (129/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 1144 matches across 129 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:949 - log.debug",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:78 - business.domain.loan.LoanAcceptTransferBusinessEve",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:79 - business.domain.loan.LoanAdjustTransactionBusiness",
        "  ... and 1141 more matches"
      ],
      "category": "Logging",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 16,
      "matches_found": 1144,
      "recommendations": [
        "Critical: Implement Log Application Messages throughout your codebase",
        "Expected 10% coverage, currently at 3.1% (based on 4210 expected files)",
        "Focus on log important application state changes and events",
        "Moderate Gap: Need to implement in 292 more files"
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 1219,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1144,
        "overlap_matches": 75
      },
      "expected": 16,
      "found": 1144,
      "coverage": 27.57719714964371,
      "quality_score": 27.57719714964371,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Client UI Errors Logged"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 0,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Client UI Errors Logged throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on capture and log client-side ui errors",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Client UI Errors Logged",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 0,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Retry Logic"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Retry Logic throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on implement retry mechanisms for resilient operations",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Timeouts in IO Ops"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 5,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Timeouts in IO Ops throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on set appropriate timeouts for i/o operations",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 5,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Throttling & Drop Request"
      ],
      "category": "Performance",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 4,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Throttling & Drop Request throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on implement rate limiting and request throttling",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 4,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Circuit Breakers"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Circuit Breakers throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on implement circuit breaker pattern for fault tolerance",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "WARNING",
      "score": 69.26365795724466,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 7.7% (324/4210 expected files)",
        "Traditional Coverage: 7.7% (324/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 6545 matches across 324 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:685 - try {",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:704 - try {",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:688 - catch (",
        "  ... and 6542 more matches"
      ],
      "category": "Error Handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 22,
      "matches_found": 6545,
      "recommendations": [
        "Improve: Enhance Log System Errors implementation",
        "Current: 7.7% coverage, Target: 10% coverage",
        "Need to implement in 97 more files"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 22,
          "matches": 20912,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 6545,
        "overlap_matches": 14367
      },
      "expected": 22,
      "found": 6545,
      "coverage": 69.26365795724466,
      "quality_score": 69.26365795724466,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for HTTP Error Codes"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement HTTP Error Codes throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on use appropriate http status codes for api responses",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (0/4210 expected files)",
        "Traditional Coverage: 0.0% (0/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: medium",
        "No matches found for Client Error Tracking"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 0,
      "matches_found": 0,
      "recommendations": [
        "Critical: Implement Client Error Tracking throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on integrate client-side error tracking tools",
        "Moderate Gap: Need to implement in 421 more files"
      ],
      "pattern_description": "Static pattern analysis for Client Error Tracking",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0
      },
      "expected": 0,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "PASS",
      "score": 91.0,
      "details": [
        "Expected Coverage: 10% (Standard expectation for this gate type)",
        "Maximum Files Expected: 308 files",
        "Actual Coverage: 35.7% (110/308 expected files)",
        "Traditional Coverage: 35.7% (110/308 relevant files)",
        "Technology Filter: Using 308 relevant files (from 5000 total files)",
        "Confidence: medium",
        "Found 2833 matches across 110 files",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:29 - junit",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:30 - junit",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:31 - junit",
        "  ... and 2830 more matches"
      ],
      "category": "Testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 24,
      "matches_found": 2833,
      "recommendations": [
        "Good: Automated Tests is well implemented",
        "Achieved: 35.7% coverage (Target: 10%)",
        "Exceeds expectations by 25.7%"
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 308,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 308 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 24,
          "matches": 3965,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 2833,
        "overlap_matches": 1132
      },
      "expected": 24,
      "found": 2833,
      "coverage": 91.0,
      "quality_score": 91.0,
      "matches": []
    }
  ],
  "score": 23.62486144101346,
  "overall_score": 23.62486144101346,
  "passed_gates": 2,
  "warning_gates": 1,
  "failed_gates": 12,
  "not_applicable_gates": 0,
  "total_applicable_gates": 15,
  "total_all_gates": 15,
  "critical_issues": [],
  "recommendations": [
    "Critical: Implement Logs Searchable/Available throughout your codebase",
    "Expected 10% coverage, currently at 3.5% (based on 4210 expected files)",
    "Focus on ensure logs are structured and searchable for operational monitoring",
    "Moderate Gap: Need to implement in 275 more files",
    "Good: Avoid Logging Confidential Data is well implemented",
    "Achieved: 0.0% coverage (Target: 10%)",
    "Critical: Implement Create Audit Trail Logs throughout your codebase",
    "Expected 10% coverage, currently at 2.4% (based on 4210 expected files)",
    "Focus on log critical business operations for audit compliance",
    "Moderate Gap: Need to implement in 322 more files",
    "Critical: Implement Tracking ID for Logs throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on include correlation ids for distributed tracing",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Log REST API Calls throughout your codebase",
    "Expected 10% coverage, currently at 2.7% (based on 4210 expected files)",
    "Focus on log all api requests and responses for monitoring",
    "Moderate Gap: Need to implement in 307 more files",
    "Critical: Implement Log Application Messages throughout your codebase",
    "Expected 10% coverage, currently at 3.1% (based on 4210 expected files)",
    "Focus on log important application state changes and events",
    "Moderate Gap: Need to implement in 292 more files",
    "Critical: Implement Client UI Errors Logged throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on capture and log client-side ui errors",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Retry Logic throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on implement retry mechanisms for resilient operations",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Timeouts in IO Ops throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on set appropriate timeouts for i/o operations",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Throttling & Drop Request throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on implement rate limiting and request throttling",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Circuit Breakers throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on implement circuit breaker pattern for fault tolerance",
    "Moderate Gap: Need to implement in 421 more files",
    "Improve: Enhance Log System Errors implementation",
    "Current: 7.7% coverage, Target: 10% coverage",
    "Need to implement in 97 more files",
    "Critical: Implement HTTP Error Codes throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on use appropriate http status codes for api responses",
    "Moderate Gap: Need to implement in 421 more files",
    "Critical: Implement Client Error Tracking throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on integrate client-side error tracking tools",
    "Moderate Gap: Need to implement in 421 more files",
    "Good: Automated Tests is well implemented",
    "Achieved: 35.7% coverage (Target: 10%)",
    "Exceeds expectations by 25.7%"
  ],
  "hybrid_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 0,
      "total_static_patterns": 220,
      "total_llm_matches": 0,
      "total_static_matches": 29045,
      "total_unique_matches": 12319,
      "total_overlap_matches": 16726,
      "coverage_improvement": 0.0,
      "confidence_distribution": {
        "high": 0,
        "medium": 7,
        "low": 8
      }
    },
    "pattern_library_version": "1.0.0",
    "static_patterns_used": 220,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {
      "high": 0,
      "medium": 7,
      "low": 8
    }
  }
}