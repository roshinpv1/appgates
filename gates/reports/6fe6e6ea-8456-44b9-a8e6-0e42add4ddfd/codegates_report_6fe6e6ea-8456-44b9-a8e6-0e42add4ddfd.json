{
  "report_metadata": {
    "scan_id": "6fe6e6ea-8456-44b9-a8e6-0e42add4ddfd",
    "repository_url": "https://github.com/spring-projects/spring-petclinic",
    "branch": "main",
    "generated_at": "2025-07-13T14:09:59.689504",
    "version": "2.0.0",
    "llm_source": "local",
    "llm_model": "meta-llama-3.1-8b-instruct"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 112,
    "total_lines": 14402,
    "timestamp": "2025-07-13T14:09:59.689514",
    "project_name": "spring-projects/spring-petclinic",
    "project_path": "https://github.com/spring-projects/spring-petclinic",
    "repository_url": "https://github.com/spring-projects/spring-petclinic"
  },
  "languages_detected": [
    "Docker",
    "JSON",
    "YAML",
    "Batch",
    "XML",
    "Gradle",
    "Java",
    "SQL",
    "CSS",
    "HTML",
    "SCSS"
  ],
  "gates": [
    {
      "name": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Logs Searchable/Available"
      ],
      "category": "Logging",
      "priority": "high",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Implement Logs Searchable/Available throughout your codebase",
        "Focus on ensure logs are structured and searchable for operational monitoring"
      ],
      "pattern_description": "These patterns capture structured log messages with timestamps, log levels, and message contents.",
      "pattern_significance": "Structured logging is essential for operational monitoring and troubleshooting in complex systems like this pet clinic application.",
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Found 222 matches across 18 files",
        "  src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java:36 - \t@GeneratedValue(strategy = GenerationType.IDENTIT",
        "  src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java:44 - \t\tthis.id = id;",
        "  src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java:48 - \t\treturn this.id == null;",
        "  ... and 219 more matches"
      ],
      "category": "Security",
      "priority": "critical",
      "description": "Prevent sensitive data from being logged accidentally",
      "patterns_used": 3,
      "matches_found": 222,
      "recommendations": [
        "Implement Avoid Logging Confidential Data throughout your codebase",
        "Focus on prevent sensitive data from being logged accidentally"
      ],
      "pattern_description": "These patterns detect potential logging of sensitive information, such as passwords or API keys.",
      "pattern_significance": "Avoiding the logging of secrets is crucial for security and compliance in this application.",
      "expected": 3,
      "found": 222,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Create Audit Trail Logs"
      ],
      "category": "Compliance",
      "priority": "high",
      "description": "Log critical business operations for audit compliance",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Implement Create Audit Trail Logs throughout your codebase",
        "Focus on log critical business operations for audit compliance"
      ],
      "pattern_description": "These patterns capture critical business operations for audit compliance.",
      "pattern_significance": "Auditing is essential for regulatory compliance and trustworthiness in this pet clinic application.",
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Tracking ID for Logs"
      ],
      "category": "Observability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Tracking ID for Logs throughout your codebase",
        "Focus on include correlation ids for distributed tracing"
      ],
      "pattern_description": "These patterns detect correlation IDs for distributed tracing.",
      "pattern_significance": "Including correlation IDs is crucial for troubleshooting and debugging in complex systems like this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Log REST API Calls"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Log REST API Calls throughout your codebase",
        "Focus on log all api requests and responses for monitoring"
      ],
      "pattern_description": "These patterns capture all API requests and responses for monitoring.",
      "pattern_significance": "Logging API calls is essential for monitoring and troubleshooting in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Log Application Messages"
      ],
      "category": "Logging",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Log Application Messages throughout your codebase",
        "Focus on log important application state changes and events"
      ],
      "pattern_description": "These patterns capture important application state changes and events.",
      "pattern_significance": "Logging application messages is crucial for monitoring and troubleshooting in this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Client UI Errors Logged"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Client UI Errors Logged throughout your codebase",
        "Focus on capture and log client-side ui errors"
      ],
      "pattern_description": "These patterns capture client-side UI errors.",
      "pattern_significance": "Capturing UI errors is essential for user experience and troubleshooting in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Retry Logic"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Retry Logic throughout your codebase",
        "Focus on implement retry mechanisms for resilient operations"
      ],
      "pattern_description": "These patterns detect retry mechanisms for resilient operations.",
      "pattern_significance": "Implementing retries is crucial for fault tolerance and reliability in this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Timeouts in IO Ops"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Timeouts in IO Ops throughout your codebase",
        "Focus on set appropriate timeouts for i/o operations"
      ],
      "pattern_description": "These patterns capture timeouts for I/O operations.",
      "pattern_significance": "Setting appropriate timeouts is essential for performance and reliability in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Throttling & Drop Request"
      ],
      "category": "Performance",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Throttling & Drop Request throughout your codebase",
        "Focus on implement rate limiting and request throttling"
      ],
      "pattern_description": "These patterns detect rate limiting and request throttling.",
      "pattern_significance": "Implementing rate limiting is crucial for preventing abuse and ensuring fair usage in this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Circuit Breakers"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Circuit Breakers throughout your codebase",
        "Focus on implement circuit breaker pattern for fault tolerance"
      ],
      "pattern_description": "These patterns capture circuit breaker pattern for fault tolerance.",
      "pattern_significance": "Implementing circuit breakers is essential for preventing cascading failures in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Log System Errors"
      ],
      "category": "Error Handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Log System Errors throughout your codebase",
        "Focus on comprehensive error logging and exception handling"
      ],
      "pattern_description": "These patterns capture comprehensive error logging and exception handling.",
      "pattern_significance": "Accurate error logging is crucial for troubleshooting and debugging in this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for HTTP Error Codes"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement HTTP Error Codes throughout your codebase",
        "Focus on use appropriate http status codes for api responses"
      ],
      "pattern_description": "These patterns detect appropriate HTTP status codes for API responses.",
      "pattern_significance": "Using correct HTTP status codes is essential for API usability and reliability in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Client Error Tracking"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Client Error Tracking throughout your codebase",
        "Focus on integrate client-side error tracking tools"
      ],
      "pattern_description": "These patterns capture client-side error tracking tools.",
      "pattern_significance": "Integrating client-side error tracking is crucial for user experience and troubleshooting in this application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Automated Tests"
      ],
      "category": "Testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Automated Tests throughout your codebase",
        "Focus on comprehensive automated test coverage"
      ],
      "pattern_description": "These patterns capture comprehensive automated test coverage.",
      "pattern_significance": "Accurate automated testing is essential for ensuring the quality and reliability of this pet clinic application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    }
  ],
  "score": 0.0,
  "overall_score": 0.0,
  "passed_gates": 0,
  "warning_gates": 0,
  "failed_gates": 15,
  "critical_issues": [],
  "recommendations": [
    "Implement Logs Searchable/Available throughout your codebase",
    "Focus on ensure logs are structured and searchable for operational monitoring",
    "Implement Avoid Logging Confidential Data throughout your codebase",
    "Focus on prevent sensitive data from being logged accidentally",
    "Implement Create Audit Trail Logs throughout your codebase",
    "Focus on log critical business operations for audit compliance",
    "Implement Tracking ID for Logs throughout your codebase",
    "Focus on include correlation ids for distributed tracing",
    "Implement Log REST API Calls throughout your codebase",
    "Focus on log all api requests and responses for monitoring",
    "Implement Log Application Messages throughout your codebase",
    "Focus on log important application state changes and events",
    "Implement Client UI Errors Logged throughout your codebase",
    "Focus on capture and log client-side ui errors",
    "Implement Retry Logic throughout your codebase",
    "Focus on implement retry mechanisms for resilient operations",
    "Implement Timeouts in IO Ops throughout your codebase",
    "Focus on set appropriate timeouts for i/o operations",
    "Implement Throttling & Drop Request throughout your codebase",
    "Focus on implement rate limiting and request throttling",
    "Implement Circuit Breakers throughout your codebase",
    "Focus on implement circuit breaker pattern for fault tolerance",
    "Implement Log System Errors throughout your codebase",
    "Focus on comprehensive error logging and exception handling",
    "Implement HTTP Error Codes throughout your codebase",
    "Focus on use appropriate http status codes for api responses",
    "Implement Client Error Tracking throughout your codebase",
    "Focus on integrate client-side error tracking tools",
    "Implement Automated Tests throughout your codebase",
    "Focus on comprehensive automated test coverage"
  ]
}