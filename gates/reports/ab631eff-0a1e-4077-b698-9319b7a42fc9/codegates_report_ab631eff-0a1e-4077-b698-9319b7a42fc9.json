{
  "report_metadata": {
    "scan_id": "ab631eff-0a1e-4077-b698-9319b7a42fc9",
    "repository_url": "https://github.com/apache/fineract",
    "branch": "develop",
    "generated_at": "2025-07-20T21:39:39.539172",
    "version": "2.0.0",
    "llm_source": "fallback",
    "llm_model": "built-in",
    "validation_type": "hybrid"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 5000,
    "total_lines": 502652,
    "timestamp": "2025-07-20T21:39:39.539179",
    "project_name": "apache/fineract (develop)",
    "project_path": "https://github.com/apache/fineract",
    "repository_url": "https://github.com/apache/fineract"
  },
  "languages_detected": [
    "YAML",
    "JSON",
    "XML",
    "SQL",
    "Shell",
    "Gradle",
    "Java"
  ],
  "gates": [
    {
      "name": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "status": "FAIL",
      "score": 27.743467933491686,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 3.5% (146/4210 expected files)",
        "Traditional Coverage: 3.5% (146/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 635 matches across 146 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/dataqueries/service/ReadReportingServiceImpl.java:472 - LOG.info",
        "  fineract-core/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java:176 - log.info",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/config/SecurityConfig.java:97 - JsonSerializer<PlatformRequestLog",
        "  ... and 632 more matches"
      ],
      "category": "Logging",
      "priority": "high",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "patterns_used": 83,
      "matches_found": 635,
      "recommendations": [
        "Critical: Implement Logs Searchable/Available throughout your codebase",
        "Expected 10% coverage, currently at 3.5% (based on 4210 expected files)",
        "Focus on ensure logs are structured and searchable for operational monitoring",
        "Moderate Gap: Need to implement in 275 more files"
      ],
      "pattern_description": "Fallback patterns for STRUCTURED_LOGS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 5,
          "matches": 26,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 78,
          "matches": 1718,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 635,
        "overlap_matches": 1109
      },
      "expected": 83,
      "found": 635,
      "coverage": 27.743467933491686,
      "quality_score": 27.743467933491686,
      "matches": []
    },
    {
      "name": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 1.7% (73/4210 expected files)",
        "Traditional Coverage: 1.7% (73/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 534 matches across 73 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:24 - Token",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:229 - Token",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:1294 - Token",
        "  ... and 531 more matches"
      ],
      "category": "Security",
      "priority": "critical",
      "description": "Prevent sensitive data from being logged accidentally",
      "patterns_used": 11,
      "matches_found": 534,
      "recommendations": [
        "Critical: Implement Avoid Logging Confidential Data throughout your codebase",
        "Expected 10% coverage, currently at 1.7% (based on 4210 expected files)",
        "Focus on prevent sensitive data from being logged accidentally",
        "Moderate Gap: Need to implement in 347 more files"
      ],
      "pattern_description": "Fallback patterns for AVOID_LOGGING_SECRETS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 6,
          "matches": 681,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 2,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 534,
        "overlap_matches": 149
      },
      "expected": 11,
      "found": 534,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "status": "FAIL",
      "score": 18.81235154394299,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 2.4% (99/4210 expected files)",
        "Traditional Coverage: 2.4% (99/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 275 matches across 99 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:979 - TransactionChronologicallyLatest = loanTransaction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:989 - TransactionChronolog",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:995 - TransactionChronolog",
        "  ... and 272 more matches"
      ],
      "category": "Compliance",
      "priority": "high",
      "description": "Log critical business operations for audit compliance",
      "patterns_used": 20,
      "matches_found": 275,
      "recommendations": [
        "Critical: Implement Create Audit Trail Logs throughout your codebase",
        "Expected 10% coverage, currently at 2.4% (based on 4210 expected files)",
        "Focus on log critical business operations for audit compliance",
        "Moderate Gap: Need to implement in 322 more files"
      ],
      "pattern_description": "Fallback patterns for AUDIT_TRAIL - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 15,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 343,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 275,
        "overlap_matches": 83
      },
      "expected": 20,
      "found": 275,
      "coverage": 18.81235154394299,
      "quality_score": 18.81235154394299,
      "matches": []
    },
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.19002375296912116,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (1/4210 expected files)",
        "Traditional Coverage: 0.0% (1/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 1 matches across 1 files",
        "  fineract-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/rescheduleloan/service/LoanRescheduleRequestReadPlatformServiceImpl.java:111 - request_id"
      ],
      "category": "Observability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 17,
      "matches_found": 1,
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 420 more files"
      ],
      "pattern_description": "Fallback patterns for CORRELATION_ID - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 1,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 13,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1,
        "overlap_matches": 0
      },
      "expected": 17,
      "found": 1,
      "coverage": 0.19002375296912116,
      "quality_score": 0.19002375296912116,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "FAIL",
      "score": 22.04275534441805,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 2.8% (116/4210 expected files)",
        "Traditional Coverage: 2.8% (116/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 893 matches across 116 files",
        "  fineract-provider/src/main/java/org/apache/fineract/interoperation/api/InteropApiResource.java:328 - ResponseData result = (InteropQuoteResponseData) c",
        "  fineract-provider/src/main/java/org/apache/fineract/interoperation/api/InteropApiResource.java:375 - ResponseData result = (InteropTransferResponseData",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/dataqueries/service/ReadReportingServiceImpl.java:124 - Request Name: {} - {}     Elapsed Time: {}\", LogPa",
        "  ... and 890 more matches"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 32,
      "matches_found": 893,
      "recommendations": [
        "Critical: Implement Log REST API Calls throughout your codebase",
        "Expected 10% coverage, currently at 2.8% (based on 4210 expected files)",
        "Focus on log all api requests and responses for monitoring",
        "Moderate Gap: Need to implement in 305 more files"
      ],
      "pattern_description": "Fallback patterns for LOG_API_CALLS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 9,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 28,
          "matches": 886,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 893,
        "overlap_matches": 2
      },
      "expected": 32,
      "found": 893,
      "coverage": 22.04275534441805,
      "quality_score": 22.04275534441805,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "FAIL",
      "score": 24.51306413301663,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 3.1% (129/4210 expected files)",
        "Traditional Coverage: 3.1% (129/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 1144 matches across 129 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:78 - business.domain.loan.LoanAcceptTransferBusinessEve",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:79 - business.domain.loan.LoanAdjustTransactionBusiness",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:80 - business.domain.loan.LoanBalanceChangedBusinessEve",
        "  ... and 1141 more matches"
      ],
      "category": "Logging",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 20,
      "matches_found": 1144,
      "recommendations": [
        "Critical: Implement Log Application Messages throughout your codebase",
        "Expected 10% coverage, currently at 3.1% (based on 4210 expected files)",
        "Focus on log important application state changes and events",
        "Moderate Gap: Need to implement in 292 more files"
      ],
      "pattern_description": "Fallback patterns for LOG_APPLICATION_MESSAGES - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 891,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 1219,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 1144,
        "overlap_matches": 966
      },
      "expected": 20,
      "found": 1144,
      "coverage": 24.51306413301663,
      "quality_score": 24.51306413301663,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "FAIL",
      "score": 18.24228028503563,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 2.3% (96/4210 expected files)",
        "Traditional Coverage: 2.3% (96/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 342 matches across 96 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:691 - uilder baseDataValidator = new DataValidatorBuilde",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:709 - uilder baseDataValidator = new DataValidatorBuilde",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:1736 - uiredException(\"loan.disburse.to.savings\", error",
        "  ... and 339 more matches"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 4,
      "matches_found": 342,
      "recommendations": [
        "Critical: Implement Client UI Errors Logged throughout your codebase",
        "Expected 10% coverage, currently at 2.3% (based on 4210 expected files)",
        "Focus on capture and log client-side ui errors",
        "Moderate Gap: Need to implement in 324 more files"
      ],
      "pattern_description": "Fallback patterns for UI_ERRORS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 342,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 342,
        "overlap_matches": 0
      },
      "expected": 4,
      "found": 342,
      "coverage": 18.24228028503563,
      "quality_score": 18.24228028503563,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 1.330166270783848,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.2% (7/4210 expected files)",
        "Traditional Coverage: 0.2% (7/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 62 matches across 7 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:33 - retry",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:2398 - Retry",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountWritePlatformServiceJpaRepositoryImpl.java:34 - retry",
        "  ... and 59 more matches"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 8,
      "matches_found": 62,
      "recommendations": [
        "Critical: Implement Retry Logic throughout your codebase",
        "Expected 10% coverage, currently at 0.2% (based on 4210 expected files)",
        "Focus on implement retry mechanisms for resilient operations",
        "Moderate Gap: Need to implement in 414 more files"
      ],
      "pattern_description": "Fallback patterns for RETRY_LOGIC - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 5,
          "matches": 89,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 62,
        "overlap_matches": 27
      },
      "expected": 8,
      "found": 62,
      "coverage": 1.330166270783848,
      "quality_score": 1.330166270783848,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.7600950118764846,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.1% (4/4210 expected files)",
        "Traditional Coverage: 0.1% (4/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 27 matches across 4 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:99 - Timeout",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:100 - Timeout",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:120 - timeout",
        "  ... and 24 more matches"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 9,
      "matches_found": 27,
      "recommendations": [
        "Critical: Implement Timeouts in IO Ops throughout your codebase",
        "Expected 10% coverage, currently at 0.1% (based on 4210 expected files)",
        "Focus on set appropriate timeouts for i/o operations",
        "Moderate Gap: Need to implement in 417 more files"
      ],
      "pattern_description": "Fallback patterns for TIMEOUTS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 51,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 27,
        "overlap_matches": 24
      },
      "expected": 9,
      "found": 27,
      "coverage": 0.7600950118764846,
      "quality_score": 0.7600950118764846,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.3800475059382423,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (2/4210 expected files)",
        "Traditional Coverage: 0.0% (2/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 2 matches across 2 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/RecurringDepositAccount.java:151 - RateChart chart, final boolean allowOverdraft, fin",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/api/SavingsAccountsApiResource.java:158 - Rate, interestCompoundingPeriodType, interestCalcu"
      ],
      "category": "Performance",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 8,
      "matches_found": 2,
      "recommendations": [
        "Critical: Implement Throttling & Drop Request throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on implement rate limiting and request throttling",
        "Moderate Gap: Need to implement in 419 more files"
      ],
      "pattern_description": "Fallback patterns for THROTTLING - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 2,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 2,
        "overlap_matches": 0
      },
      "expected": 8,
      "found": 2,
      "coverage": 0.3800475059382423,
      "quality_score": 0.3800475059382423,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.7600950118764846,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.1% (4/4210 expected files)",
        "Traditional Coverage: 0.1% (4/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 5 matches across 4 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:33 - resilience4j",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountWritePlatformServiceJpaRepositoryImpl.java:34 - resilience4j",
        "  fineract-core/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java:27 - resilience4j",
        "  ... and 2 more matches"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 8,
      "matches_found": 5,
      "recommendations": [
        "Critical: Implement Circuit Breakers throughout your codebase",
        "Expected 10% coverage, currently at 0.1% (based on 4210 expected files)",
        "Focus on implement circuit breaker pattern for fault tolerance",
        "Moderate Gap: Need to implement in 417 more files"
      ],
      "pattern_description": "Fallback patterns for CIRCUIT_BREAKERS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 5,
          "matches": 5,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 5,
        "overlap_matches": 0
      },
      "expected": 8,
      "found": 5,
      "coverage": 0.7600950118764846,
      "quality_score": 0.7600950118764846,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "WARNING",
      "score": 61.567695961995256,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 7.7% (324/4210 expected files)",
        "Traditional Coverage: 7.7% (324/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 6545 matches across 324 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:67 - ErrorHandler",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:273 - ErrorHandler errorHandler",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:2450 - errorHandler",
        "  ... and 6542 more matches"
      ],
      "category": "Error Handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 26,
      "matches_found": 6545,
      "recommendations": [
        "Improve: Enhance Log System Errors implementation",
        "Current: 7.7% coverage, Target: 10% coverage",
        "Need to implement in 97 more files"
      ],
      "pattern_description": "Fallback patterns for ERROR_LOGS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 4,
          "matches": 183,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 22,
          "matches": 20912,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 6545,
        "overlap_matches": 14550
      },
      "expected": 26,
      "found": 6545,
      "coverage": 61.567695961995256,
      "quality_score": 61.567695961995256,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 12.731591448931118,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 1.6% (67/4210 expected files)",
        "Traditional Coverage: 1.6% (67/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 272 matches across 67 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:244 - 500",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:1313 - 500",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java:808 - status_id as lifeCycleStatusId, l.loan_transaction",
        "  ... and 269 more matches"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 10,
      "matches_found": 272,
      "recommendations": [
        "Critical: Implement HTTP Error Codes throughout your codebase",
        "Expected 10% coverage, currently at 1.6% (based on 4210 expected files)",
        "Focus on use appropriate http status codes for api responses",
        "Moderate Gap: Need to implement in 354 more files"
      ],
      "pattern_description": "Fallback patterns for HTTP_CODES - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 7,
          "matches": 275,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 272,
        "overlap_matches": 3
      },
      "expected": 10,
      "found": 272,
      "coverage": 12.731591448931118,
      "quality_score": 12.731591448931118,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.19002375296912116,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 4210 files",
        "Actual Coverage: 0.0% (1/4210 expected files)",
        "Traditional Coverage: 0.0% (1/4210 relevant files)",
        "Technology Filter: Using 4210 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 4 matches across 1 files",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:1012 - sEntry",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:1014 - sEntry",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:2247 - sEntry",
        "  ... and 1 more matches"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 5,
      "matches_found": 4,
      "recommendations": [
        "Critical: Implement Client Error Tracking throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
        "Focus on integrate client-side error tracking tools",
        "Moderate Gap: Need to implement in 420 more files"
      ],
      "pattern_description": "Fallback patterns for UI_ERROR_TOOLS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 5,
          "matches": 4,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 4,
        "overlap_matches": 0
      },
      "expected": 5,
      "found": 4,
      "coverage": 0.19002375296912116,
      "quality_score": 0.19002375296912116,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "PASS",
      "score": 81.0,
      "details": [
        "Expected Coverage: 10% (Fallback expectation - LLM analysis unavailable for technology-specific estimation)",
        "Maximum Files Expected: 308 files",
        "Actual Coverage: 92.2% (284/308 expected files)",
        "Traditional Coverage: 92.2% (284/308 relevant files)",
        "Technology Filter: Using 308 relevant files (from 5000 total files)",
        "Confidence: low",
        "Found 5317 matches across 284 files",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:19 - test",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:21 - test",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:22 - test",
        "  ... and 5314 more matches"
      ],
      "category": "Testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 31,
      "matches_found": 5317,
      "recommendations": [
        "Good: Automated Tests is well implemented",
        "Achieved: 92.2% coverage (Target: 10%)",
        "Exceeds expectations by 82.2%"
      ],
      "pattern_description": "Fallback patterns for AUTOMATED_TESTS - basic implementation patterns",
      "pattern_significance": "These are fallback patterns when LLM analysis is unavailable. They provide basic coverage but may not be optimized for your specific technology stack.",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Fallback expectation - LLM analysis unavailable for technology-specific estimation",
        "confidence": "low"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 308,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "low",
        "analysis_basis": "Based on 308 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "llm_patterns": {
          "count": 7,
          "matches": 6330,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 24,
          "matches": 3965,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 5317,
        "overlap_matches": 4978
      },
      "expected": 31,
      "found": 5317,
      "coverage": 81.0,
      "quality_score": 81.0,
      "matches": []
    }
  ],
  "score": 18.017577197149645,
  "overall_score": 18.017577197149645,
  "passed_gates": 1,
  "warning_gates": 1,
  "failed_gates": 13,
  "not_applicable_gates": 0,
  "total_applicable_gates": 15,
  "total_all_gates": 15,
  "critical_issues": [],
  "recommendations": [
    "Critical: Implement Logs Searchable/Available throughout your codebase",
    "Expected 10% coverage, currently at 3.5% (based on 4210 expected files)",
    "Focus on ensure logs are structured and searchable for operational monitoring",
    "Moderate Gap: Need to implement in 275 more files",
    "Critical: Implement Avoid Logging Confidential Data throughout your codebase",
    "Expected 10% coverage, currently at 1.7% (based on 4210 expected files)",
    "Focus on prevent sensitive data from being logged accidentally",
    "Moderate Gap: Need to implement in 347 more files",
    "Critical: Implement Create Audit Trail Logs throughout your codebase",
    "Expected 10% coverage, currently at 2.4% (based on 4210 expected files)",
    "Focus on log critical business operations for audit compliance",
    "Moderate Gap: Need to implement in 322 more files",
    "Critical: Implement Tracking ID for Logs throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on include correlation ids for distributed tracing",
    "Moderate Gap: Need to implement in 420 more files",
    "Critical: Implement Log REST API Calls throughout your codebase",
    "Expected 10% coverage, currently at 2.8% (based on 4210 expected files)",
    "Focus on log all api requests and responses for monitoring",
    "Moderate Gap: Need to implement in 305 more files",
    "Critical: Implement Log Application Messages throughout your codebase",
    "Expected 10% coverage, currently at 3.1% (based on 4210 expected files)",
    "Focus on log important application state changes and events",
    "Moderate Gap: Need to implement in 292 more files",
    "Critical: Implement Client UI Errors Logged throughout your codebase",
    "Expected 10% coverage, currently at 2.3% (based on 4210 expected files)",
    "Focus on capture and log client-side ui errors",
    "Moderate Gap: Need to implement in 324 more files",
    "Critical: Implement Retry Logic throughout your codebase",
    "Expected 10% coverage, currently at 0.2% (based on 4210 expected files)",
    "Focus on implement retry mechanisms for resilient operations",
    "Moderate Gap: Need to implement in 414 more files",
    "Critical: Implement Timeouts in IO Ops throughout your codebase",
    "Expected 10% coverage, currently at 0.1% (based on 4210 expected files)",
    "Focus on set appropriate timeouts for i/o operations",
    "Moderate Gap: Need to implement in 417 more files",
    "Critical: Implement Throttling & Drop Request throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on implement rate limiting and request throttling",
    "Moderate Gap: Need to implement in 419 more files",
    "Critical: Implement Circuit Breakers throughout your codebase",
    "Expected 10% coverage, currently at 0.1% (based on 4210 expected files)",
    "Focus on implement circuit breaker pattern for fault tolerance",
    "Moderate Gap: Need to implement in 417 more files",
    "Improve: Enhance Log System Errors implementation",
    "Current: 7.7% coverage, Target: 10% coverage",
    "Need to implement in 97 more files",
    "Critical: Implement HTTP Error Codes throughout your codebase",
    "Expected 10% coverage, currently at 1.6% (based on 4210 expected files)",
    "Focus on use appropriate http status codes for api responses",
    "Moderate Gap: Need to implement in 354 more files",
    "Critical: Implement Client Error Tracking throughout your codebase",
    "Expected 10% coverage, currently at 0.0% (based on 4210 expected files)",
    "Focus on integrate client-side error tracking tools",
    "Moderate Gap: Need to implement in 420 more files",
    "Good: Automated Tests is well implemented",
    "Achieved: 92.2% coverage (Target: 10%)",
    "Exceeds expectations by 82.2%"
  ],
  "hybrid_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 72,
      "total_static_patterns": 220,
      "total_llm_matches": 8904,
      "total_static_matches": 29045,
      "total_unique_matches": 16058,
      "total_overlap_matches": 21891,
      "coverage_improvement": 80.34591194968553,
      "confidence_distribution": {
        "high": 7,
        "medium": 8,
        "low": 0
      }
    },
    "pattern_library_version": "1.0.0",
    "static_patterns_used": 220,
    "llm_patterns_used": 72,
    "coverage_improvement": 80.34591194968553,
    "confidence_distribution": {
      "high": 7,
      "medium": 8,
      "low": 0
    }
  }
}