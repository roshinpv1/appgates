{
  "scan_id": "9e1dfe19-deaf-4283-b1b3-b2e8b41ac103",
  "project_name": "apache/fineract (develop)",
  "repository_url": "https://github.com/apache/fineract",
  "branch": "develop",
  "scan_timestamp": "2025-07-20T23:49:09.038202",
  "scan_timestamp_formatted": "2025-07-20 23:49:09",
  "overall_score": 81.35144861837267,
  "threshold": 70,
  "status": "PASS",
  "summary": {
    "total_gates": 15,
    "passed_gates": 11,
    "failed_gates": 2,
    "warning_gates": 0,
    "not_applicable_gates": 2,
    "total_files": 5000,
    "total_lines": 502652
  },
  "gates": [
    {
      "gate": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "category": "Logging",
      "priority": "high",
      "patterns_used": 8,
      "matches_found": 185,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 11700.0% (117/1 expected files)",
        "Traditional Coverage: 11700.0% (117/1 relevant files)",
        "Confidence: medium",
        "Found 185 matches across 117 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:229 - @Slf4j",
        "  fineract-progressive-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/transactionprocessor/impl/AdvancedPaymentScheduleTransactionProcessor.java:119 - @Slf4j",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/serialization/LoanApplicationValidator.java:135 - @Slf4j",
        "  ... and 182 more matches"
      ],
      "recommendations": [
        "Good: Logs Searchable/Available is well implemented",
        "Achieved: 11700.0% coverage (Target: 10%)",
        "Exceeds expectations by 11690.0%"
      ],
      "pattern_description": "Static pattern analysis for Logs Searchable/Available",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 8,
          "matches": 252,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 185,
        "overlap_matches": 67,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 185,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Structured logging should be implemented across core application files",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.8,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.3,
            "penalty_multiplier": 0.7
          }
        }
      }
    },
    {
      "gate": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "description": "Prevent sensitive data from being logged accidentally",
      "category": "Security",
      "priority": "critical",
      "patterns_used": 5,
      "matches_found": 3,
      "score": 40,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 200.0% (2/1 expected files)",
        "Traditional Coverage: 200.0% (2/1 relevant files)",
        "Confidence: medium",
        "Found 3 matches across 2 files",
        "  fineract-client/src/main/java/org/apache/fineract/client/util/FineractClient.java:562 - log.warn(\"Username and password haven't been confi",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/migration/TenantDatabaseUpgradeService.java:120 - log.info(\"- fineract.tenant.password: ****\")",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/service/migration/TenantDatabaseUpgradeService.java:131 - log.info(\"- fineract.tenant.readonly.password: {}\""
      ],
      "recommendations": [
        "Critical: Implement Avoid Logging Confidential Data throughout your codebase",
        "Expected 10% coverage, currently at 200.0% (based on 1 expected files)",
        "Focus on prevent sensitive data from being logged accidentally",
        "Moderate Gap: Need to implement in -1 more files"
      ],
      "pattern_description": "Static pattern analysis for Avoid Logging Confidential Data",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 3,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 3,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 0.0,
          "weighted_score": 40,
          "final_score": 40,
          "matches_count": 3,
          "expected_coverage": {
            "percentage": 0,
            "reasoning": "No secrets should be logged",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "violation_penalty": 20,
            "max_penalty": 100,
            "bonus_for_clean": 10
          },
          "security_violations": 3,
          "penalty_applied": 60
        }
      }
    },
    {
      "gate": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "description": "Log critical business operations for audit compliance",
      "category": "Compliance",
      "priority": "high",
      "patterns_used": 6,
      "matches_found": 15,
      "score": 98.7,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 600.0% (6/1 expected files)",
        "Traditional Coverage: 600.0% (6/1 relevant files)",
        "Confidence: medium",
        "Found 15 matches across 6 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:979 - TransactionChronologicallyLatest = loanTransaction",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:989 - TransactionChronolog",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:995 - TransactionChronolog",
        "  ... and 12 more matches"
      ],
      "recommendations": [
        "Good: Create Audit Trail Logs is well implemented",
        "Achieved: 600.0% coverage (Target: 10%)",
        "Exceeds expectations by 590.0%"
      ],
      "pattern_description": "Static pattern analysis for Create Audit Trail Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 6,
          "matches": 15,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 15,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 94.0,
          "final_score": 98.7,
          "matches_count": 15,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Audit trails should be present in business logic files",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "description": "Include correlation IDs for distributed tracing",
      "category": "Observability",
      "priority": "medium",
      "patterns_used": 16,
      "matches_found": 1,
      "score": 6.206896551724138,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 100.0% (1/1 expected files)",
        "Traditional Coverage: 100.0% (1/1 relevant files)",
        "Confidence: medium",
        "Found 1 matches across 1 files",
        "  fineract-loan/src/main/java/org/apache/fineract/portfolio/loanaccount/rescheduleloan/service/LoanRescheduleRequestReadPlatformServiceImpl.java:111 - request_id"
      ],
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 100.0% (based on 1 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 16,
          "matches": 1,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 6.896551724137931,
          "final_score": 6.206896551724138,
          "matches_count": 1,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Correlation IDs should be present in API and service files",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "description": "Log all API requests and responses for monitoring",
      "category": "API",
      "priority": "medium",
      "patterns_used": 6,
      "matches_found": 5,
      "score": 80.025,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 300.0% (3/1 expected files)",
        "Traditional Coverage: 300.0% (3/1 relevant files)",
        "Confidence: medium",
        "Found 5 matches across 3 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/dataqueries/service/ReadReportingServiceImpl.java:124 - Request Name: {} - {}     Elapsed Time: {}\", LogPa",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/config/SecurityConfig.java:97 - ApiJsonSerializer<PlatformRequestLog",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/core/config/SecurityConfig.java:44 - RequestLog",
        "  ... and 2 more matches"
      ],
      "recommendations": [
        "Good: Log REST API Calls is well implemented",
        "Achieved: 300.0% coverage (Target: 10%)",
        "Exceeds expectations by 290.0%"
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 6,
          "matches": 7,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 5,
        "overlap_matches": 2,
        "weighted_scoring": {
          "gate_weight": 10.0,
          "weighted_score": 72.75,
          "final_score": 80.025,
          "matches_count": 5,
          "expected_coverage": {
            "percentage": 30,
            "reasoning": "API logging should be present in controller/route files",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "description": "Log important application state changes and events",
      "category": "Logging",
      "priority": "medium",
      "patterns_used": 4,
      "matches_found": 887,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 5600.0% (56/1 expected files)",
        "Traditional Coverage: 5600.0% (56/1 relevant files)",
        "Confidence: medium",
        "Found 887 matches across 56 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:78 - business.domain.loan.LoanAcceptTransferBusinessEve",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:79 - business.domain.loan.LoanAdjustTransactionBusiness",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:80 - business.domain.loan.LoanBalanceChangedBusinessEve",
        "  ... and 884 more matches"
      ],
      "recommendations": [
        "Good: Log Application Messages is well implemented",
        "Achieved: 5600.0% coverage (Target: 10%)",
        "Exceeds expectations by 5590.0%"
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 891,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 887,
        "overlap_matches": 4,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 887,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Application messages should be logged in business logic",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "description": "Capture and log client-side UI errors",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend/client-side applications"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend/client-side applications"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend/client-side applications",
      "pattern_significance": "Only applicable for frontend/client-side applications",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend/client-side applications",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "description": "Implement retry mechanisms for resilient operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 5,
      "matches_found": 62,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 700.0% (7/1 expected files)",
        "Traditional Coverage: 700.0% (7/1 relevant files)",
        "Confidence: medium",
        "Found 62 matches across 7 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:33 - retry",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:2398 - Retry",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountWritePlatformServiceJpaRepositoryImpl.java:34 - retry",
        "  ... and 59 more matches"
      ],
      "recommendations": [
        "Good: Retry Logic is well implemented",
        "Achieved: 700.0% coverage (Target: 10%)",
        "Exceeds expectations by 690.0%"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 89,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 62,
        "overlap_matches": 27,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 62,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "Retry logic should be present in external service calls",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "description": "Set appropriate timeouts for I/O operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 4,
      "matches_found": 27,
      "score": 92.4,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 400.0% (4/1 expected files)",
        "Traditional Coverage: 400.0% (4/1 relevant files)",
        "Confidence: medium",
        "Found 27 matches across 4 files",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:99 - Timeout",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:100 - Timeout",
        "  fineract-provider/src/main/java/org/apache/fineract/infrastructure/gcm/domain/Sender.java:120 - timeout",
        "  ... and 24 more matches"
      ],
      "recommendations": [
        "Good: Timeouts in IO Ops is well implemented",
        "Achieved: 400.0% coverage (Target: 10%)",
        "Exceeds expectations by 390.0%"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 51,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 27,
        "overlap_matches": 24,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 84.0,
          "final_score": 92.4,
          "matches_count": 27,
          "expected_coverage": {
            "percentage": 20,
            "reasoning": "Timeouts should be present in I/O operations",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "description": "Implement rate limiting and request throttling",
      "category": "Performance",
      "priority": "medium",
      "patterns_used": 4,
      "matches_found": 2,
      "score": 57.333333333333336,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 200.0% (2/1 expected files)",
        "Traditional Coverage: 200.0% (2/1 relevant files)",
        "Confidence: medium",
        "Found 2 matches across 2 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/RecurringDepositAccount.java:151 - RateChart chart, final boolean allowOverdraft, fin",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/api/SavingsAccountsApiResource.java:158 - Rate, interestCompoundingPeriodType, interestCalcu"
      ],
      "recommendations": [
        "Improve: Enhance Throttling & Drop Request implementation",
        "Current: 200.0% coverage, Target: 10% coverage",
        "Need to implement in -1 more files"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 2,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 2,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 57.333333333333336,
          "final_score": 57.333333333333336,
          "matches_count": 2,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Throttling should be present in API endpoints",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 5,
      "matches_found": 5,
      "score": 88.20952380952382,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 400.0% (4/1 expected files)",
        "Traditional Coverage: 400.0% (4/1 relevant files)",
        "Confidence: medium",
        "Found 5 matches across 4 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:33 - resilience4j",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/service/SavingsAccountWritePlatformServiceJpaRepositoryImpl.java:34 - resilience4j",
        "  fineract-core/src/main/java/org/apache/fineract/commands/service/SynchronousCommandProcessingService.java:27 - resilience4j",
        "  ... and 2 more matches"
      ],
      "recommendations": [
        "Good: Circuit Breakers is well implemented",
        "Achieved: 400.0% coverage (Target: 10%)",
        "Exceeds expectations by 390.0%"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 5,
          "matches": 5,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 5,
        "overlap_matches": 0,
        "weighted_scoring": {
          "gate_weight": 12.0,
          "weighted_score": 80.19047619047619,
          "final_score": 88.20952380952382,
          "matches_count": 5,
          "expected_coverage": {
            "percentage": 15,
            "reasoning": "Circuit breakers should be present in external service calls",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "description": "Comprehensive error logging and exception handling",
      "category": "Error Handling",
      "priority": "high",
      "patterns_used": 7,
      "matches_found": 6526,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 32100.0% (321/1 expected files)",
        "Traditional Coverage: 32100.0% (321/1 relevant files)",
        "Confidence: medium",
        "Found 6526 matches across 321 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:685 - try {",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:704 - try {",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanWritePlatformServiceJpaRepositoryImpl.java:688 - catch (",
        "  ... and 6523 more matches"
      ],
      "recommendations": [
        "Good: Log System Errors is well implemented",
        "Achieved: 32100.0% coverage (Target: 10%)",
        "Exceeds expectations by 32090.0%"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 7,
          "matches": 11517,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 6526,
        "overlap_matches": 4991,
        "weighted_scoring": {
          "gate_weight": 15.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 6526,
          "expected_coverage": {
            "percentage": 30,
            "reasoning": "Error logging should be present in most application files",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.7,
            "bonus_multiplier": 1.1,
            "penalty_threshold": 0.2,
            "penalty_multiplier": 0.8
          }
        }
      }
    },
    {
      "gate": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "description": "Use appropriate HTTP status codes for API responses",
      "category": "API",
      "priority": "medium",
      "patterns_used": 4,
      "matches_found": 954,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 16200.0% (162/1 expected files)",
        "Traditional Coverage: 16200.0% (162/1 relevant files)",
        "Confidence: medium",
        "Found 954 matches across 162 files",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:244 - 500",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanproduct/serialization/LoanProductDataValidator.java:1313 - 500",
        "  fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/service/LoanReadPlatformServiceImpl.java:808 - status_id as lifeCycleStatusId, l.loan_transaction",
        "  ... and 951 more matches"
      ],
      "recommendations": [
        "Good: HTTP Error Codes is well implemented",
        "Achieved: 16200.0% coverage (Target: 10%)",
        "Exceeds expectations by 16190.0%"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4210,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 4,
          "matches": 977,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 954,
        "overlap_matches": 23,
        "weighted_scoring": {
          "gate_weight": 8.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 954,
          "expected_coverage": {
            "percentage": 25,
            "reasoning": "HTTP status codes should be present in API endpoints",
            "confidence": "medium"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.6,
            "bonus_multiplier": 1.05,
            "penalty_threshold": 0.1,
            "penalty_multiplier": 0.9
          }
        }
      }
    },
    {
      "gate": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "description": "Integrate client-side error tracking tools",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend applications with client-side error tracking"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend applications with client-side error tracking"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend applications with client-side error tracking",
      "pattern_significance": "Only applicable for frontend applications with client-side error tracking",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend applications with client-side error tracking",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "description": "Comprehensive automated test coverage",
      "category": "Testing",
      "priority": "high",
      "patterns_used": 7,
      "matches_found": 1845,
      "score": 100.0,
      "status": "PASS",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Actual Coverage: 8000.0% (80/1 expected files)",
        "Traditional Coverage: 8000.0% (80/1 relevant files)",
        "Confidence: medium",
        "Found 1845 matches across 80 files",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:29 - import static org.junit",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:30 - import static org.junit",
        "  fineract-e2e-tests-core/src/test/java/org/apache/fineract/test/stepdef/loan/LoanStepDef.java:31 - import static org.junit",
        "  ... and 1842 more matches"
      ],
      "recommendations": [
        "Good: Automated Tests is well implemented",
        "Achieved: 8000.0% coverage (Target: 10%)",
        "Exceeds expectations by 7990.0%"
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 308,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 7,
          "matches": 2415,
          "source": "weighted_library"
        },
        "combined_confidence": "medium",
        "unique_matches": 1845,
        "overlap_matches": 570,
        "weighted_scoring": {
          "gate_weight": 18.0,
          "weighted_score": 100.0,
          "final_score": 100.0,
          "matches_count": 1845,
          "expected_coverage": {
            "percentage": 40,
            "reasoning": "Tests should cover significant portion of application logic",
            "confidence": "high"
          },
          "scoring_config": {
            "base_score": 100,
            "bonus_threshold": 0.8,
            "bonus_multiplier": 1.15,
            "penalty_threshold": 0.3,
            "penalty_multiplier": 0.7
          }
        }
      }
    }
  ],
  "metadata": {
    "file_count": 5000,
    "line_count": 502652,
    "language_distribution": {
      "YAML": {
        "files": 22,
        "percentage": 0.5
      },
      "JSON": {
        "files": 15,
        "percentage": 0.3
      },
      "XML": {
        "files": 73,
        "percentage": 1.6
      },
      "SQL": {
        "files": 18,
        "percentage": 0.4
      },
      "Shell": {
        "files": 1,
        "percentage": 0.0
      },
      "Gradle": {
        "files": 21,
        "percentage": 0.4
      },
      "Java": {
        "files": 4518,
        "percentage": 96.8
      }
    },
    "primary_technologies": [
      "Java"
    ],
    "scan_duration": 0,
    "pattern_library_version": "2.0.0"
  },
  "llm_info": {
    "provider": "none",
    "model": "unknown",
    "patterns_generated": 0,
    "patterns_matched": 0,
    "confidence": "low"
  },
  "weighted_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 0,
      "total_static_patterns": 81,
      "total_llm_matches": 0,
      "total_static_matches": 16225,
      "total_unique_matches": 10517,
      "total_overlap_matches": 5708,
      "coverage_improvement": 0.0,
      "confidence_distribution": {
        "high": 0,
        "medium": 13,
        "low": 0
      }
    },
    "pattern_library_version": "2.0.0",
    "static_patterns_used": 81,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {
      "high": 0,
      "medium": 13,
      "low": 0
    },
    "weighted_scoring": {
      "total_weight": 163.0,
      "applicable_gates": 13,
      "gate_scores": {
        "STRUCTURED_LOGS": {
          "score": 100.0,
          "weight": 15.0,
          "weighted_score": 1500.0
        },
        "AVOID_LOGGING_SECRETS": {
          "score": 40,
          "weight": 25.0,
          "weighted_score": 1000.0
        },
        "AUDIT_TRAIL": {
          "score": 98.7,
          "weight": 12.0,
          "weighted_score": 1184.4
        },
        "CORRELATION_ID": {
          "score": 6.206896551724138,
          "weight": 8.0,
          "weighted_score": 49.6551724137931
        },
        "LOG_API_CALLS": {
          "score": 80.025,
          "weight": 10.0,
          "weighted_score": 800.25
        },
        "LOG_APPLICATION_MESSAGES": {
          "score": 100.0,
          "weight": 8.0,
          "weighted_score": 800.0
        },
        "RETRY_LOGIC": {
          "score": 100.0,
          "weight": 12.0,
          "weighted_score": 1200.0
        },
        "TIMEOUTS": {
          "score": 92.4,
          "weight": 12.0,
          "weighted_score": 1108.8000000000002
        },
        "THROTTLING": {
          "score": 57.333333333333336,
          "weight": 8.0,
          "weighted_score": 458.6666666666667
        },
        "CIRCUIT_BREAKERS": {
          "score": 88.20952380952382,
          "weight": 12.0,
          "weighted_score": 1058.5142857142857
        },
        "ERROR_LOGS": {
          "score": 100.0,
          "weight": 15.0,
          "weighted_score": 1500.0
        },
        "HTTP_CODES": {
          "score": 100.0,
          "weight": 8.0,
          "weighted_score": 800.0
        },
        "AUTOMATED_TESTS": {
          "score": 100.0,
          "weight": 18.0,
          "weighted_score": 1800.0
        }
      },
      "overall_weighted_score": 81.35144861837267
    },
    "pattern_statistics": {
      "total_gates": 16,
      "total_patterns": 149,
      "supported_technologies": [
        "java",
        "python",
        "javascript",
        "typescript",
        "csharp",
        "go",
        "rust",
        "all_languages"
      ],
      "technology_coverage": {
        "java": 29,
        "python": 23,
        "javascript": 18,
        "typescript": 5,
        "csharp": 4,
        "go": 3,
        "rust": 3,
        "all_languages": 64
      }
    }
  },
  "applicability": {
    "enabled": true,
    "codebase_characteristics": {
      "languages": [
        "Gradle",
        "Java",
        "YAML",
        "XML",
        "SQL",
        "JSON",
        "Shell"
      ],
      "language_counts": {
        "YAML": 22,
        "JSON": 15,
        "XML": 73,
        "SQL": 18,
        "Shell": 1,
        "Gradle": 21,
        "Java": 4518
      },
      "is_frontend": false,
      "is_backend": true,
      "is_api": true,
      "is_mobile": false,
      "is_backend_only": true,
      "is_frontend_only": false,
      "is_fullstack": false,
      "primary_technology": "backend"
    },
    "total_gates": 15,
    "applicable_gates": 13,
    "non_applicable_gates": 2,
    "applicable_by_category": {},
    "non_applicable_details": [
      {
        "name": "UI_ERRORS",
        "display_name": "Client UI Errors Logged",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      },
      {
        "name": "UI_ERROR_TOOLS",
        "display_name": "Client Error Tracking",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      }
    ],
    "applicable_gate_names": [
      "STRUCTURED_LOGS",
      "AVOID_LOGGING_SECRETS",
      "AUDIT_TRAIL",
      "CORRELATION_ID",
      "LOG_API_CALLS",
      "LOG_APPLICATION_MESSAGES",
      "RETRY_LOGIC",
      "TIMEOUTS",
      "THROTTLING",
      "CIRCUIT_BREAKERS",
      "ERROR_LOGS",
      "HTTP_CODES",
      "AUTOMATED_TESTS"
    ]
  }
}