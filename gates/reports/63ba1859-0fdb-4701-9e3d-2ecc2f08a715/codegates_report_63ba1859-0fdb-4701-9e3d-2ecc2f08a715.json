{
  "scan_id": "63ba1859-0fdb-4701-9e3d-2ecc2f08a715",
  "project_name": "APP ID - apache/fineract (develop)",
  "repository_url": "https://github.com/apache/fineract",
  "branch": "develop",
  "scan_timestamp": "2025-07-22T23:15:25.541062",
  "scan_timestamp_formatted": "2025-07-22 23:15:25",
  "overall_score": 0.0,
  "threshold": 70,
  "status": "FAIL",
  "summary": {
    "total_gates": 16,
    "passed_gates": 0,
    "failed_gates": 14,
    "warning_gates": 0,
    "not_applicable_gates": 2,
    "total_files": 5000,
    "total_lines": 503246
  },
  "gates": [
    {
      "gate": "ALERTING_ACTIONABLE",
      "display_name": "All alerting is actionable",
      "description": "Ensure all alerting integrations (Splunk, AppDynamics, ThousandEyes) are present and actionable.",
      "category": "Alerting",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Present: None",
        "Missing: Splunk, AppDynamics, ThousandEyes"
      ],
      "evidence": "Present: None; Missing: Splunk, AppDynamics, ThousandEyes",
      "recommendations": [
        "Missing integrations: Splunk, AppDynamics, ThousandEyes"
      ],
      "pattern_description": "Ensure all alerting integrations (Splunk, AppDynamics, ThousandEyes) are present and actionable.",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 100,
        "reasoning": "All integrations should be present",
        "confidence": "high"
      },
      "total_files": 5000,
      "relevant_files": 1,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "db_integration"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "db_integration"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "category": "Logging",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Logs Searchable/Available"
      ],
      "recommendations": [
        "Critical: Implement Logs Searchable/Available throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on ensure logs are structured and searchable for operational monitoring",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Logs Searchable/Available",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "description": "Prevent sensitive data from being logged accidentally",
      "category": "Security",
      "priority": "critical",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "✅ No security violations found - perfect implementation",
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No security violations found for Avoid Logging Confidential Data"
      ],
      "recommendations": [
        "✅ Avoid Logging Confidential Data is well implemented",
        "No security violations found - perfect implementation"
      ],
      "pattern_description": "Static pattern analysis for Avoid Logging Confidential Data",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "description": "Log critical business operations for audit compliance",
      "category": "Compliance",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Create Audit Trail Logs"
      ],
      "recommendations": [
        "Critical: Implement Create Audit Trail Logs throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on log critical business operations for audit compliance",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Create Audit Trail Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "description": "Include correlation IDs for distributed tracing",
      "category": "Observability",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Tracking ID for Logs"
      ],
      "recommendations": [
        "Critical: Implement Tracking ID for Logs throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on include correlation ids for distributed tracing",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "description": "Log all API requests and responses for monitoring",
      "category": "API",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Log REST API Calls"
      ],
      "recommendations": [
        "Critical: Implement Log REST API Calls throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on log all api requests and responses for monitoring",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "description": "Log important application state changes and events",
      "category": "Logging",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Log Application Messages"
      ],
      "recommendations": [
        "Critical: Implement Log Application Messages throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on log important application state changes and events",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "description": "Capture and log client-side UI errors",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend/client-side applications"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend/client-side applications"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend/client-side applications",
      "pattern_significance": "Only applicable for frontend/client-side applications",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend/client-side applications",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "description": "Implement retry mechanisms for resilient operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Retry Logic"
      ],
      "recommendations": [
        "Critical: Implement Retry Logic throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement retry mechanisms for resilient operations",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "description": "Set appropriate timeouts for I/O operations",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Timeouts in IO Ops"
      ],
      "recommendations": [
        "Critical: Implement Timeouts in IO Ops throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on set appropriate timeouts for i/o operations",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "description": "Implement rate limiting and request throttling",
      "category": "Performance",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Throttling & Drop Request"
      ],
      "recommendations": [
        "Critical: Implement Throttling & Drop Request throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement rate limiting and request throttling",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "category": "Reliability",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Circuit Breakers"
      ],
      "recommendations": [
        "Critical: Implement Circuit Breakers throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on implement circuit breaker pattern for fault tolerance",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "description": "Comprehensive error logging and exception handling",
      "category": "Error Handling",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Log System Errors"
      ],
      "recommendations": [
        "Critical: Implement Log System Errors throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on comprehensive error logging and exception handling",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "description": "Use appropriate HTTP status codes for API responses",
      "category": "API",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for HTTP Error Codes"
      ],
      "recommendations": [
        "Critical: Implement HTTP Error Codes throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on use appropriate http status codes for api responses",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 4209,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    },
    {
      "gate": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "description": "Integrate client-side error tracking tools",
      "category": "Frontend",
      "priority": "medium",
      "patterns_used": 0,
      "matches_found": 0,
      "score": 0.0,
      "status": "NOT_APPLICABLE",
      "details": [
        "This gate is not applicable: Only applicable for frontend applications with client-side error tracking"
      ],
      "recommendations": [
        "Not applicable to this technology stack: Only applicable for frontend applications with client-side error tracking"
      ],
      "pattern_description": "Not applicable: Only applicable for frontend applications with client-side error tracking",
      "pattern_significance": "Only applicable for frontend applications with client-side error tracking",
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "Only applicable for frontend applications with client-side error tracking",
        "confidence": "high"
      },
      "total_files": 5000,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "not_applicable"
        },
        "combined_confidence": "high"
      }
    },
    {
      "gate": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "description": "Comprehensive automated test coverage",
      "category": "Testing",
      "priority": "high",
      "patterns_used": 0,
      "matches_found": 0,
      "matches": [],
      "patterns": [],
      "score": 0.0,
      "status": "FAIL",
      "details": [
        "Expected Coverage: 10% (Standard expectation)",
        "Maximum Files Expected: 1 files",
        "Confidence: medium",
        "No matches found for Automated Tests"
      ],
      "recommendations": [
        "Critical: Implement Automated Tests throughout your codebase",
        "Expected 10% coverage, currently at 0.0% (based on 1 expected files)",
        "Focus on comprehensive automated test coverage",
        "Moderate Gap: Need to implement in 0 more files"
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for code quality and compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "total_files": 5000,
      "relevant_files": 309,
      "validation_sources": {
        "llm_patterns": {
          "count": 0,
          "matches": 0,
          "source": "llm_generated"
        },
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "weighted_library"
        },
        "combined_confidence": "low",
        "unique_matches": 0,
        "overlap_matches": 0,
        "weighted_scoring": {}
      }
    }
  ],
  "metadata": {
    "file_count": 5000,
    "line_count": 503246,
    "language_distribution": {
      "YAML": {
        "files": 22,
        "percentage": 0.5
      },
      "JSON": {
        "files": 15,
        "percentage": 0.3
      },
      "XML": {
        "files": 73,
        "percentage": 1.6
      },
      "SQL": {
        "files": 18,
        "percentage": 0.4
      },
      "Shell": {
        "files": 1,
        "percentage": 0.0
      },
      "Gradle": {
        "files": 21,
        "percentage": 0.4
      },
      "Java": {
        "files": 4518,
        "percentage": 96.8
      }
    },
    "primary_technologies": [
      "Java",
      "XML",
      "YAML",
      "Gradle",
      "SQL"
    ],
    "scan_duration": 0,
    "pattern_library_version": "2.0.0"
  },
  "llm_info": {
    "provider": "none",
    "model": "unknown",
    "patterns_generated": 0,
    "patterns_matched": 0,
    "confidence": "low"
  },
  "weighted_validation": {
    "enabled": true,
    "statistics": {
      "total_llm_patterns": 0,
      "total_static_patterns": 0,
      "total_llm_matches": 0,
      "total_static_matches": 0,
      "total_unique_matches": 0,
      "total_overlap_matches": 0,
      "coverage_improvement": 0.0,
      "confidence_distribution": {
        "high": 1,
        "medium": 0,
        "low": 13
      }
    },
    "pattern_library_version": "2.0.0",
    "static_patterns_used": 0,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {
      "high": 1,
      "medium": 0,
      "low": 13
    },
    "weighted_scoring": {
      "total_weight": 0.0,
      "applicable_gates": 14,
      "gate_scores": {},
      "overall_weighted_score": 0.0
    },
    "pattern_statistics": {
      "total_gates": 0,
      "total_patterns": 0,
      "supported_technologies": [],
      "technology_coverage": {}
    }
  },
  "applicability": {
    "enabled": true,
    "codebase_characteristics": {
      "languages": [
        "Gradle",
        "JSON",
        "XML",
        "SQL",
        "YAML",
        "Java",
        "Shell"
      ],
      "language_counts": {
        "YAML": 22,
        "JSON": 15,
        "XML": 73,
        "SQL": 18,
        "Shell": 1,
        "Gradle": 21,
        "Java": 4518
      },
      "is_frontend": false,
      "is_backend": true,
      "is_api": true,
      "is_mobile": false,
      "is_backend_only": true,
      "is_frontend_only": false,
      "is_fullstack": false,
      "primary_technology": "backend"
    },
    "total_gates": 16,
    "applicable_gates": 14,
    "non_applicable_gates": 2,
    "applicable_by_category": {},
    "non_applicable_details": [
      {
        "name": "UI_ERRORS",
        "display_name": "Client UI Errors Logged",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      },
      {
        "name": "UI_ERROR_TOOLS",
        "display_name": "Client Error Tracking",
        "category": "Frontend",
        "reason": "Not applicable to this technology stack"
      }
    ],
    "applicable_gate_names": [
      "ALERTING_ACTIONABLE",
      "STRUCTURED_LOGS",
      "AVOID_LOGGING_SECRETS",
      "AUDIT_TRAIL",
      "CORRELATION_ID",
      "LOG_API_CALLS",
      "LOG_APPLICATION_MESSAGES",
      "RETRY_LOGIC",
      "TIMEOUTS",
      "THROTTLING",
      "CIRCUIT_BREAKERS",
      "ERROR_LOGS",
      "HTTP_CODES",
      "AUTOMATED_TESTS"
    ]
  }
}