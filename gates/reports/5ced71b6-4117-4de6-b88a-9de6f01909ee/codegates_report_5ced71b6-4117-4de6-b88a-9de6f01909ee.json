{
  "report_metadata": {
    "scan_id": "5ced71b6-4117-4de6-b88a-9de6f01909ee",
    "repository_url": "https://github.com/apache/fineract",
    "branch": "develop",
    "generated_at": "2025-07-20T18:47:18.932915",
    "version": "3.0.0",
    "llm_source": "local",
    "llm_model": "llama-3.2-3b-instruct",
    "validation_type": "llm_enhanced_hybrid"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 5000,
    "total_lines": 502652,
    "timestamp": "2025-07-20T18:47:18.932922",
    "project_name": "apache/fineract",
    "project_path": "https://github.com/apache/fineract",
    "repository_url": "https://github.com/apache/fineract"
  },
  "languages_detected": [
    "YAML",
    "JSON",
    "XML",
    "SQL",
    "Shell",
    "Gradle",
    "Java"
  ],
  "gates": [
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The logging configuration appears to be generally compliant, but there are some issues that need attention.",
        "**Category Health:** good",
        "**Risk Level:** medium",
        "**Compliance Status:** partial",
        "**Critical Category Issues:**",
        "  \u2022 Inconsistent correlation ID tracking across different logging configurations.",
        "  \u2022 Insufficient log API call tracking, with only 24.2% of patterns found."
      ],
      "category": "auditability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 13,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
        "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
        "**Short-term Improvements:**",
        "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
        "**Long-term Strategy:**",
        "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
      ],
      "pattern_description": "Static pattern analysis for Tracking ID for Logs",
      "pattern_significance": "Important for Tracking ID for Logs compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 13,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "good",
        "category_risk": "medium",
        "category_compliance": "partial",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "Inconsistent correlation ID tracking across different logging configurations.",
          "Insufficient log API call tracking, with only 24.2% of patterns found."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement a standardized correlation ID tracking mechanism across all logging configurations.",
            "Enhance log API call tracking to ensure 100% coverage."
          ],
          "short_term": [
            "Analyze and optimize the existing log configuration to improve its performance and scalability."
          ],
          "long_term": [
            "Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "good",
        "category_risk": "medium",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 13,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "FAIL",
      "score": 24.156769596199528,
      "details": [
        "**LLM Category Assessment:** The logging configuration appears to be generally compliant, but there are some issues that need attention.",
        "**Category Health:** good",
        "**Risk Level:** medium",
        "**Compliance Status:** partial",
        "**Critical Category Issues:**",
        "  \u2022 Inconsistent correlation ID tracking across different logging configurations.",
        "  \u2022 Insufficient log API call tracking, with only 24.2% of patterns found."
      ],
      "category": "auditability",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 28,
      "matches_found": 886,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
        "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
        "**Short-term Improvements:**",
        "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
        "**Long-term Strategy:**",
        "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
      ],
      "pattern_description": "Static pattern analysis for Log REST API Calls",
      "pattern_significance": "Important for Log REST API Calls compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 28,
          "matches": 886,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 886,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "good",
        "category_risk": "medium",
        "category_compliance": "partial",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "Inconsistent correlation ID tracking across different logging configurations.",
          "Insufficient log API call tracking, with only 24.2% of patterns found."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement a standardized correlation ID tracking mechanism across all logging configurations.",
            "Enhance log API call tracking to ensure 100% coverage."
          ],
          "short_term": [
            "Analyze and optimize the existing log configuration to improve its performance and scalability."
          ],
          "long_term": [
            "Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
          ]
        }
      },
      "decision_factors": {
        "static_score": 24.156769596199528,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "good",
        "category_risk": "medium",
        "llm_final_status": "FAIL",
        "llm_final_score": 24.156769596199528
      },
      "expected": 28,
      "found": 886,
      "coverage": 24.156769596199528,
      "quality_score": 24.156769596199528,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "FAIL",
      "score": 27.57719714964371,
      "details": [
        "**LLM Category Assessment:** The logging configuration appears to be generally compliant, but there are some issues that need attention.",
        "**Category Health:** good",
        "**Risk Level:** medium",
        "**Compliance Status:** partial",
        "**Critical Category Issues:**",
        "  \u2022 Inconsistent correlation ID tracking across different logging configurations.",
        "  \u2022 Insufficient log API call tracking, with only 24.2% of patterns found."
      ],
      "category": "auditability",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 16,
      "matches_found": 1219,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
        "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
        "**Short-term Improvements:**",
        "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
        "**Long-term Strategy:**",
        "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
      ],
      "pattern_description": "Static pattern analysis for Log Application Messages",
      "pattern_significance": "Important for Log Application Messages compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 16,
          "matches": 1219,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 1219,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "good",
        "category_risk": "medium",
        "category_compliance": "partial",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "Inconsistent correlation ID tracking across different logging configurations.",
          "Insufficient log API call tracking, with only 24.2% of patterns found."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement a standardized correlation ID tracking mechanism across all logging configurations.",
            "Enhance log API call tracking to ensure 100% coverage."
          ],
          "short_term": [
            "Analyze and optimize the existing log configuration to improve its performance and scalability."
          ],
          "long_term": [
            "Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards."
          ]
        }
      },
      "decision_factors": {
        "static_score": 27.57719714964371,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "good",
        "category_risk": "medium",
        "llm_final_status": "FAIL",
        "llm_final_score": 27.57719714964371
      },
      "expected": 16,
      "found": 1219,
      "coverage": 27.57719714964371,
      "quality_score": 27.57719714964371,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** Fallback analysis for accountability - LLM unavailable",
        "**Category Health:** unknown",
        "**Risk Level:** unknown",
        "**Compliance Status:** unknown",
        "**LLM Gate Assessment:** Fallback assessment for Client UI Errors Logged",
        "**LLM Identified Issues:**",
        "  \u2022 LLM analysis failed for Client UI Errors Logged",
        "**Critical Category Issues:**",
        "  \u2022 LLM analysis failed for accountability"
      ],
      "category": "accountability",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 0,
      "matches_found": 0,
      "recommendations": [
        "Review Client UI Errors Logged manually",
        "**Immediate Actions:**",
        "  \u2022 Review accountability manually",
        "**Short-term Improvements:**",
        "  \u2022 Implement accountability improvements",
        "**Long-term Strategy:**",
        "  \u2022 Establish accountability best practices"
      ],
      "pattern_description": "Static pattern analysis for Client UI Errors Logged",
      "pattern_significance": "Important for Client UI Errors Logged compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "unknown",
        "category_risk": "unknown",
        "category_compliance": "unknown",
        "gate_assessment": "Fallback assessment for Client UI Errors Logged",
        "gate_issues": [
          "LLM analysis failed for Client UI Errors Logged"
        ],
        "gate_recommendations": [
          "Review Client UI Errors Logged manually"
        ],
        "critical_issues": [
          "LLM analysis failed for accountability"
        ],
        "category_recommendations": {
          "immediate": [
            "Review accountability manually"
          ],
          "short_term": [
            "Implement accountability improvements"
          ],
          "long_term": [
            "Establish accountability best practices"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "Fallback assessment for Client UI Errors Logged",
        "category_health": "unknown",
        "category_risk": "unknown",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 0,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** Fallback analysis for accountability - LLM unavailable",
        "**Category Health:** unknown",
        "**Risk Level:** unknown",
        "**Compliance Status:** unknown",
        "**LLM Gate Assessment:** Fallback assessment for Client Error Tracking",
        "**LLM Identified Issues:**",
        "  \u2022 LLM analysis failed for Client Error Tracking",
        "**Critical Category Issues:**",
        "  \u2022 LLM analysis failed for accountability"
      ],
      "category": "accountability",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 0,
      "matches_found": 0,
      "recommendations": [
        "Review Client Error Tracking manually",
        "**Immediate Actions:**",
        "  \u2022 Review accountability manually",
        "**Short-term Improvements:**",
        "  \u2022 Implement accountability improvements",
        "**Long-term Strategy:**",
        "  \u2022 Establish accountability best practices"
      ],
      "pattern_description": "Static pattern analysis for Client Error Tracking",
      "pattern_significance": "Important for Client Error Tracking compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 0,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "unknown",
        "category_risk": "unknown",
        "category_compliance": "unknown",
        "gate_assessment": "Fallback assessment for Client Error Tracking",
        "gate_issues": [
          "LLM analysis failed for Client Error Tracking"
        ],
        "gate_recommendations": [
          "Review Client Error Tracking manually"
        ],
        "critical_issues": [
          "LLM analysis failed for accountability"
        ],
        "category_recommendations": {
          "immediate": [
            "Review accountability manually"
          ],
          "short_term": [
            "Implement accountability improvements"
          ],
          "long_term": [
            "Establish accountability best practices"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "Fallback assessment for Client Error Tracking",
        "category_health": "unknown",
        "category_risk": "unknown",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 0,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for Retry Logic",
      "pattern_significance": "Important for Retry Logic compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 5,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for Timeouts in IO Ops",
      "pattern_significance": "Important for Timeouts in IO Ops compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 5,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 5,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 4,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for Throttling & Drop Request",
      "pattern_significance": "Important for Throttling & Drop Request compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 4,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 4,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for Circuit Breakers",
      "pattern_significance": "Important for Circuit Breakers compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "WARNING",
      "score": 69.26365795724466,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 22,
      "matches_found": 20912,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for Log System Errors",
      "pattern_significance": "Important for Log System Errors compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 22,
          "matches": 20912,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 20912,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 69.26365795724466,
        "static_status": "WARNING",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "WARNING",
        "llm_final_score": 69.26365795724466
      },
      "expected": 22,
      "found": 20912,
      "coverage": 69.26365795724466,
      "quality_score": 69.26365795724466,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "**LLM Category Assessment:** The Apache Fineract repository has significant issues with error handling, retry logic, timeouts, and circuit breakers. The project's overall health is poor due to the high number of non-compliant configurations and critical issues.",
        "**Category Health:** poor",
        "**Risk Level:** high",
        "**Compliance Status:** non_compliant",
        "**Critical Category Issues:**",
        "  \u2022 The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
        "  \u2022 Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
        "  \u2022 Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
        "  \u2022 Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
        "  \u2022 Error logs are not properly configured, leading to incomplete error tracking and debugging."
      ],
      "category": "error_handling",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement retry logic in all places where it's missing",
        "  \u2022 Configure timeouts for IO operations correctly",
        "**Short-term Improvements:**",
        "  \u2022 Add throttling and drop request handling mechanisms",
        "  \u2022 Implement circuit breakers to detect and handle cascading failures",
        "**Long-term Strategy:**",
        "  \u2022 Revise error logging mechanisms to improve error tracking and debugging"
      ],
      "pattern_description": "Static pattern analysis for HTTP Error Codes",
      "pattern_significance": "Important for HTTP Error Codes compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 4210,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 4210 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 3,
          "matches": 0,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 0,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "poor",
        "category_risk": "high",
        "category_compliance": "non_compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "The repository lacks robust retry logic in several places, leading to potential failures and data inconsistencies.",
          "Timeouts are not properly configured for IO operations, which can result in slow performance or even crashes.",
          "Throttling and drop requests are not handled correctly, potentially causing issues with concurrent users.",
          "Circuit breakers are missing, making it difficult to detect and handle cascading failures.",
          "Error logs are not properly configured, leading to incomplete error tracking and debugging."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement retry logic in all places where it's missing",
            "Configure timeouts for IO operations correctly"
          ],
          "short_term": [
            "Add throttling and drop request handling mechanisms",
            "Implement circuit breakers to detect and handle cascading failures"
          ],
          "long_term": [
            "Revise error logging mechanisms to improve error tracking and debugging"
          ]
        }
      },
      "decision_factors": {
        "static_score": 0.0,
        "static_status": "FAIL",
        "llm_assessment": "No LLM assessment available",
        "category_health": "poor",
        "category_risk": "high",
        "llm_final_status": "FAIL",
        "llm_final_score": 0.0
      },
      "expected": 3,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "PASS",
      "score": 91.0,
      "details": [
        "**LLM Category Assessment:** The category overall health, compliance status, and risk level are good, compliant, and low respectively.",
        "**Category Health:** good",
        "**Risk Level:** low",
        "**Compliance Status:** compliant",
        "**Critical Category Issues:**",
        "  \u2022 Inconsistent logging configuration across different environments. This inconsistency may lead to incorrect log data being collected.",
        "  \u2022 Insufficient testing coverage for critical business logic. This lack of coverage may result in undetected bugs and errors."
      ],
      "category": "testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 24,
      "matches_found": 3965,
      "recommendations": [
        "**Immediate Actions:**",
        "  \u2022 Implement consistent logging configuration across all environments.",
        "  \u2022 Increase testing coverage for critical business logic.",
        "**Short-term Improvements:**",
        "  \u2022 Review and refactor code to improve maintainability and reduce technical debt.",
        "  \u2022 Develop a comprehensive testing strategy to ensure high test coverage.",
        "**Long-term Strategy:**",
        "  \u2022 Introduce automated testing frameworks for continuous integration and delivery.",
        "  \u2022 Establish a robust testing infrastructure to support the project's growth."
      ],
      "pattern_description": "Static pattern analysis for Automated Tests",
      "pattern_significance": "Important for Automated Tests compliance",
      "expected_coverage": {
        "percentage": 10,
        "reasoning": "Standard expectation for this gate type",
        "confidence": "medium"
      },
      "actual_coverage": {
        "percentage": 0.0,
        "files_with_matches": 0,
        "relevant_files": 308,
        "total_files": 5000,
        "technology_filtered": true
      },
      "coverage_analysis": {
        "gap": 10.0,
        "meets_expectation": false,
        "confidence_level": "medium",
        "analysis_basis": "Based on 308 relevant files (filtered from 5000 total)"
      },
      "validation_sources": {
        "static_patterns": {
          "count": 24,
          "matches": 3965,
          "source": "static_library"
        },
        "combined_confidence": "high",
        "unique_matches": 3965,
        "validation_mode": "static_only"
      },
      "category_analysis": {
        "category_health": "good",
        "category_risk": "low",
        "category_compliance": "compliant",
        "gate_assessment": "No LLM assessment available",
        "gate_issues": [],
        "gate_recommendations": [],
        "critical_issues": [
          "Inconsistent logging configuration across different environments. This inconsistency may lead to incorrect log data being collected.",
          "Insufficient testing coverage for critical business logic. This lack of coverage may result in undetected bugs and errors."
        ],
        "category_recommendations": {
          "immediate": [
            "Implement consistent logging configuration across all environments.",
            "Increase testing coverage for critical business logic."
          ],
          "short_term": [
            "Review and refactor code to improve maintainability and reduce technical debt.",
            "Develop a comprehensive testing strategy to ensure high test coverage."
          ],
          "long_term": [
            "Introduce automated testing frameworks for continuous integration and delivery.",
            "Establish a robust testing infrastructure to support the project's growth."
          ]
        }
      },
      "decision_factors": {
        "static_score": 91.0,
        "static_status": "PASS",
        "llm_assessment": "No LLM assessment available",
        "category_health": "good",
        "category_risk": "low",
        "llm_final_status": "PASS",
        "llm_final_score": 91.0
      },
      "expected": 24,
      "found": 3965,
      "coverage": 91.0,
      "quality_score": 91.0,
      "matches": []
    }
  ],
  "score": 0.0,
  "overall_score": 0.0,
  "passed_gates": 1,
  "warning_gates": 1,
  "failed_gates": 10,
  "not_applicable_gates": 0,
  "total_applicable_gates": 12,
  "total_all_gates": 12,
  "critical_issues": [],
  "recommendations": [
    "**Immediate Actions:**",
    "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
    "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
    "**Short-term Improvements:**",
    "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
    "**Long-term Strategy:**",
    "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards.",
    "**Immediate Actions:**",
    "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
    "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
    "**Short-term Improvements:**",
    "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
    "**Long-term Strategy:**",
    "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards.",
    "**Immediate Actions:**",
    "  \u2022 Implement a standardized correlation ID tracking mechanism across all logging configurations.",
    "  \u2022 Enhance log API call tracking to ensure 100% coverage.",
    "**Short-term Improvements:**",
    "  \u2022 Analyze and optimize the existing log configuration to improve its performance and scalability.",
    "**Long-term Strategy:**",
    "  \u2022 Develop a comprehensive logging strategy that aligns with organizational requirements and industry standards.",
    "Review Client UI Errors Logged manually",
    "**Immediate Actions:**",
    "  \u2022 Review accountability manually",
    "**Short-term Improvements:**",
    "  \u2022 Implement accountability improvements",
    "**Long-term Strategy:**",
    "  \u2022 Establish accountability best practices",
    "Review Client Error Tracking manually",
    "**Immediate Actions:**",
    "  \u2022 Review accountability manually",
    "**Short-term Improvements:**",
    "  \u2022 Implement accountability improvements",
    "**Long-term Strategy:**",
    "  \u2022 Establish accountability best practices",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement retry logic in all places where it's missing",
    "  \u2022 Configure timeouts for IO operations correctly",
    "**Short-term Improvements:**",
    "  \u2022 Add throttling and drop request handling mechanisms",
    "  \u2022 Implement circuit breakers to detect and handle cascading failures",
    "**Long-term Strategy:**",
    "  \u2022 Revise error logging mechanisms to improve error tracking and debugging",
    "**Immediate Actions:**",
    "  \u2022 Implement consistent logging configuration across all environments.",
    "  \u2022 Increase testing coverage for critical business logic.",
    "**Short-term Improvements:**",
    "  \u2022 Review and refactor code to improve maintainability and reduce technical debt.",
    "  \u2022 Develop a comprehensive testing strategy to ensure high test coverage.",
    "**Long-term Strategy:**",
    "  \u2022 Introduce automated testing frameworks for continuous integration and delivery.",
    "  \u2022 Establish a robust testing infrastructure to support the project's growth."
  ],
  "hybrid_validation": {
    "enabled": true,
    "statistics": {},
    "pattern_library_version": "1.0.0",
    "static_patterns_used": 0,
    "llm_patterns_used": 0,
    "coverage_improvement": 0.0,
    "confidence_distribution": {}
  },
  "llm_analysis": {
    "categories_analyzed": 0,
    "analysis_timestamp": "2025-07-20T18:47:18.932938",
    "enhancement_applied": true
  }
}