{
  "report_metadata": {
    "scan_id": "ce1eb8be-f7f8-4651-acfb-b7b2c2c0ecac",
    "repository_url": "https://github.com/spring-projects/spring-petclinic",
    "branch": "main",
    "generated_at": "2025-07-13T16:07:38.599477",
    "version": "2.0.0",
    "llm_source": "local",
    "llm_model": "meta-llama-3.1-8b-instruct"
  },
  "scan_metadata": {
    "scan_duration": 0,
    "total_files": 112,
    "total_lines": 14402,
    "timestamp": "2025-07-13T16:07:38.599485",
    "project_name": "spring-projects/spring-petclinic",
    "project_path": "https://github.com/spring-projects/spring-petclinic",
    "repository_url": "https://github.com/spring-projects/spring-petclinic"
  },
  "languages_detected": [
    "Docker",
    "JSON",
    "YAML",
    "Batch",
    "XML",
    "Gradle",
    "Java",
    "SQL",
    "CSS",
    "HTML",
    "SCSS"
  ],
  "gates": [
    {
      "name": "STRUCTURED_LOGS",
      "display_name": "Logs Searchable/Available",
      "status": "FAIL",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "Logging",
      "priority": "high",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Logs Searchable/Available throughout your codebase",
        "Focus on ensure logs are structured and searchable for operational monitoring"
      ],
      "pattern_description": "Ensure logs are structured and searchable for operational monitoring by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it ensures that logs can be easily searched and analyzed for operational issues.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "AVOID_LOGGING_SECRETS",
      "display_name": "Avoid Logging Confidential Data",
      "status": "PASS",
      "score": 100.0,
      "details": [
        "No matches found for Avoid Logging Confidential Data"
      ],
      "category": "Security",
      "priority": "critical",
      "description": "Prevent sensitive data from being logged accidentally",
      "patterns_used": 3,
      "matches_found": 0,
      "recommendations": [
        "Good implementation of Avoid Logging Confidential Data",
        "Consider optimizing existing patterns"
      ],
      "pattern_description": "Prevent sensitive data from being logged accidentally by excluding passwords, secret keys, and API keys.",
      "pattern_significance": "This gate is significant because it prevents sensitive information from being exposed in logs.",
      "expected": 3,
      "found": 0,
      "coverage": 100.0,
      "quality_score": 100.0,
      "matches": []
    },
    {
      "name": "AUDIT_TRAIL",
      "display_name": "Create Audit Trail Logs",
      "status": "FAIL",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "Compliance",
      "priority": "high",
      "description": "Log critical business operations for audit compliance",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Create Audit Trail Logs throughout your codebase",
        "Focus on log critical business operations for audit compliance"
      ],
      "pattern_description": "Log critical business operations for audit compliance by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it ensures that critical business operations are logged and can be audited.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "CORRELATION_ID",
      "display_name": "Tracking ID for Logs",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Tracking ID for Logs"
      ],
      "category": "Observability",
      "priority": "medium",
      "description": "Include correlation IDs for distributed tracing",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Tracking ID for Logs throughout your codebase",
        "Focus on include correlation ids for distributed tracing"
      ],
      "pattern_description": "Include correlation IDs for distributed tracing by logging them in a standardized format.",
      "pattern_significance": "This gate is significant because it enables distributed tracing and debugging.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "LOG_API_CALLS",
      "display_name": "Log REST API Calls",
      "status": "WARNING",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Log all API requests and responses for monitoring",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Log REST API Calls throughout your codebase",
        "Focus on log all api requests and responses for monitoring"
      ],
      "pattern_description": "Log all API requests and responses for monitoring by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it enables monitoring of API activity.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "LOG_APPLICATION_MESSAGES",
      "display_name": "Log Application Messages",
      "status": "WARNING",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "Logging",
      "priority": "medium",
      "description": "Log important application state changes and events",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Log Application Messages throughout your codebase",
        "Focus on log important application state changes and events"
      ],
      "pattern_description": "Log important application state changes and events by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it enables monitoring of application state.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "UI_ERRORS",
      "display_name": "Client UI Errors Logged",
      "status": "WARNING",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Capture and log client-side UI errors",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Client UI Errors Logged throughout your codebase",
        "Focus on capture and log client-side ui errors"
      ],
      "pattern_description": "Capture and log client-side UI errors by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it enables monitoring of client-side UI issues.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "RETRY_LOGIC",
      "display_name": "Retry Logic",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Retry Logic"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement retry mechanisms for resilient operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Retry Logic throughout your codebase",
        "Focus on implement retry mechanisms for resilient operations"
      ],
      "pattern_description": "Implement retry mechanisms for resilient operations by including keywords like 'retry' and 'retry-policy'.",
      "pattern_significance": "This gate is significant because it enables resilient operation of the application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "TIMEOUTS",
      "display_name": "Timeouts in IO Ops",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Timeouts in IO Ops"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Set appropriate timeouts for I/O operations",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Timeouts in IO Ops throughout your codebase",
        "Focus on set appropriate timeouts for i/o operations"
      ],
      "pattern_description": "Set appropriate timeouts for I/O operations by including keywords like 'timeout' and 'connection-timeout'.",
      "pattern_significance": "This gate is significant because it enables efficient operation of the application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "THROTTLING",
      "display_name": "Throttling & Drop Request",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Throttling & Drop Request"
      ],
      "category": "Performance",
      "priority": "medium",
      "description": "Implement rate limiting and request throttling",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Throttling & Drop Request throughout your codebase",
        "Focus on implement rate limiting and request throttling"
      ],
      "pattern_description": "Implement rate limiting and request throttling by including keywords like 'rate-limiting' and 'throttling'.",
      "pattern_significance": "This gate is significant because it enables efficient operation of the application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "CIRCUIT_BREAKERS",
      "display_name": "Circuit Breakers",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Circuit Breakers"
      ],
      "category": "Reliability",
      "priority": "high",
      "description": "Implement circuit breaker pattern for fault tolerance",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Circuit Breakers throughout your codebase",
        "Focus on implement circuit breaker pattern for fault tolerance"
      ],
      "pattern_description": "Implement circuit breaker pattern for fault tolerance by including keywords like 'circuit-breaker' and 'circuitbreaker'.",
      "pattern_significance": "This gate is significant because it enables fault-tolerant operation of the application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "ERROR_LOGS",
      "display_name": "Log System Errors",
      "status": "FAIL",
      "score": 44.64285714285714,
      "details": [
        "Found 18 matches across 5 files",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:77 - Error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java:78 - error",
        "  ... and 15 more matches"
      ],
      "category": "Error Handling",
      "priority": "high",
      "description": "Comprehensive error logging and exception handling",
      "patterns_used": 4,
      "matches_found": 18,
      "recommendations": [
        "Implement Log System Errors throughout your codebase",
        "Focus on comprehensive error logging and exception handling"
      ],
      "pattern_description": "Comprehensive error logging and exception handling by including a timestamp, log level, and structured data in JSON format.",
      "pattern_significance": "This gate is significant because it enables comprehensive error tracking of the application.",
      "expected": 4,
      "found": 18,
      "coverage": 44.64285714285714,
      "quality_score": 44.64285714285714,
      "matches": []
    },
    {
      "name": "HTTP_CODES",
      "display_name": "HTTP Error Codes",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for HTTP Error Codes"
      ],
      "category": "API",
      "priority": "medium",
      "description": "Use appropriate HTTP status codes for API responses",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement HTTP Error Codes throughout your codebase",
        "Focus on use appropriate http status codes for api responses"
      ],
      "pattern_description": "Use appropriate HTTP status codes for API responses by including keywords like '404' and '500'.",
      "pattern_significance": "This gate is significant because it enables proper communication of errors to clients.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "UI_ERROR_TOOLS",
      "display_name": "Client Error Tracking",
      "status": "FAIL",
      "score": 0.0,
      "details": [
        "No matches found for Client Error Tracking"
      ],
      "category": "Frontend",
      "priority": "medium",
      "description": "Integrate client-side error tracking tools",
      "patterns_used": 2,
      "matches_found": 0,
      "recommendations": [
        "Implement Client Error Tracking throughout your codebase",
        "Focus on integrate client-side error tracking tools"
      ],
      "pattern_description": "Integrate client-side error tracking tools by including keywords like 'error-tracking' and 'exception-handling'.",
      "pattern_significance": "This gate is significant because it enables comprehensive error tracking of the application.",
      "expected": 2,
      "found": 0,
      "coverage": 0.0,
      "quality_score": 0.0,
      "matches": []
    },
    {
      "name": "AUTOMATED_TESTS",
      "display_name": "Automated Tests",
      "status": "PASS",
      "score": 100.0,
      "details": [
        "Found 44 matches across 15 files",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:21 - junit",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:22 - junit",
        "  src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java:37 - junit",
        "  ... and 41 more matches"
      ],
      "category": "Testing",
      "priority": "high",
      "description": "Comprehensive automated test coverage",
      "patterns_used": 2,
      "matches_found": 44,
      "recommendations": [
        "Good implementation of Automated Tests",
        "Consider optimizing existing patterns"
      ],
      "pattern_description": "Comprehensive automated test coverage by including keywords like 'Junit' and 'TestNG'.",
      "pattern_significance": "This gate is significant because it enables comprehensive testing of the application.",
      "expected": 2,
      "found": 44,
      "coverage": 100.0,
      "quality_score": 100.0,
      "matches": []
    }
  ],
  "score": 31.19047619047619,
  "overall_score": 31.19047619047619,
  "passed_gates": 2,
  "warning_gates": 3,
  "failed_gates": 10,
  "not_applicable_gates": 0,
  "total_applicable_gates": 15,
  "total_all_gates": 15,
  "critical_issues": [],
  "recommendations": [
    "Implement Logs Searchable/Available throughout your codebase",
    "Focus on ensure logs are structured and searchable for operational monitoring",
    "Good implementation of Avoid Logging Confidential Data",
    "Consider optimizing existing patterns",
    "Implement Create Audit Trail Logs throughout your codebase",
    "Focus on log critical business operations for audit compliance",
    "Implement Tracking ID for Logs throughout your codebase",
    "Focus on include correlation ids for distributed tracing",
    "Implement Log REST API Calls throughout your codebase",
    "Focus on log all api requests and responses for monitoring",
    "Implement Log Application Messages throughout your codebase",
    "Focus on log important application state changes and events",
    "Implement Client UI Errors Logged throughout your codebase",
    "Focus on capture and log client-side ui errors",
    "Implement Retry Logic throughout your codebase",
    "Focus on implement retry mechanisms for resilient operations",
    "Implement Timeouts in IO Ops throughout your codebase",
    "Focus on set appropriate timeouts for i/o operations",
    "Implement Throttling & Drop Request throughout your codebase",
    "Focus on implement rate limiting and request throttling",
    "Implement Circuit Breakers throughout your codebase",
    "Focus on implement circuit breaker pattern for fault tolerance",
    "Implement Log System Errors throughout your codebase",
    "Focus on comprehensive error logging and exception handling",
    "Implement HTTP Error Codes throughout your codebase",
    "Focus on use appropriate http status codes for api responses",
    "Implement Client Error Tracking throughout your codebase",
    "Focus on integrate client-side error tracking tools",
    "Good implementation of Automated Tests",
    "Consider optimizing existing patterns"
  ]
}