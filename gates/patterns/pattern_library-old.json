{
  "version": "2.0.0",
  "metadata": {
    "description": "Externalized Pattern Library for CodeGates with Weighted Scoring",
    "created": "2024-01-01",
    "total_gates": 15,
    "total_patterns": 556,
    "supported_technologies": ["java", "python", "javascript", "typescript", "csharp", "go", "rust", "php", "ruby"]
  },
  "gates": {
    "STRUCTURED_LOGS": {
      "display_name": "Logs Searchable/Available",
      "description": "Ensure logs are structured and searchable for operational monitoring",
      "category": "Logging",
      "priority": "high",
      "weight": 15.0,
      "expected_coverage": {
        "percentage": 25,
        "reasoning": "Structured logging should be implemented across core application files",
        "confidence": "high"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.8,
        "bonus_multiplier": 1.1,
        "penalty_threshold": 0.3,
        "penalty_multiplier": 0.7
      },
      "patterns": {
        "java": [
          {
            "pattern": "import\\s+org\\.slf4j\\.Logger",
            "weight": 3.0,
            "description": "SLF4J Logger import"
          },
          {
            "pattern": "import\\s+org\\.slf4j\\.LoggerFactory",
            "weight": 3.0,
            "description": "SLF4J LoggerFactory import"
          },
          {
            "pattern": "LoggerFactory\\.getLogger\\(",
            "weight": 4.0,
            "description": "Logger factory usage"
          },
          {
            "pattern": "@Slf4j",
            "weight": 5.0,
            "description": "Lombok logging annotation"
          },
          {
            "pattern": "private\\s+static\\s+final\\s+Logger\\s+\\w+",
            "weight": 4.0,
            "description": "Static logger declaration"
          },
          {
            "pattern": "\\b\\w*logger\\w*\\.(info|debug|error|warn|trace|fatal)",
            "weight": 2.0,
            "description": "Logger method calls"
          },
          {
            "pattern": "logback\\.xml",
            "weight": 3.0,
            "description": "Logback configuration"
          },
          {
            "pattern": "application\\.properties.*logging",
            "weight": 2.0,
            "description": "Spring Boot logging config"
          },
          {
            "pattern": "import\\s+org\\.apache\\.logging\\.log4j",
            "weight": 3.0,
            "description": "Log4j import"
          },
          {
            "pattern": "import\\s+ch\\.qos\\.logback",
            "weight": 3.0,
            "description": "Logback import"
          },
          {
            "pattern": "import\\s+java\\.util\\.logging",
            "weight": 2.0,
            "description": "Java util logging import"
          },
          {
            "pattern": "Logger\\.getLogger\\(",
            "weight": 3.0,
            "description": "Java util Logger usage"
          },
          {
            "pattern": "LogManager\\.getLogger\\(",
            "weight": 3.0,
            "description": "Log4j LogManager usage"
          },
          {
            "pattern": "@Log4j2",
            "weight": 5.0,
            "description": "Lombok Log4j2 annotation"
          },
          {
            "pattern": "import\\s+org\\.springframework\\.boot\\.logging",
            "weight": 3.0,
            "description": "Spring Boot logging import"
          },
          {
            "pattern": "logging\\.level\\.",
            "weight": 2.0,
            "description": "Logging level configuration"
          },
          {
            "pattern": "logging\\.pattern\\.",
            "weight": 2.0,
            "description": "Logging pattern configuration"
          },
          {
            "pattern": "MDC\\.put\\(",
            "weight": 3.0,
            "description": "MDC context usage"
          },
          {
            "pattern": "MDC\\.get\\(",
            "weight": 2.0,
            "description": "MDC context retrieval"
          },
          {
            "pattern": "log\\.(info|debug|error|warn|trace)\\s*\\(",
            "weight": 2.0,
            "description": "Lombok log usage"
          }
        ],
        "python": [
          {
            "pattern": "import\\s+logging",
            "weight": 3.0,
            "description": "Python logging import"
          },
          {
            "pattern": "import\\s+structlog",
            "weight": 4.0,
            "description": "Structured logging import"
          },
          {
            "pattern": "import\\s+loguru",
            "weight": 4.0,
            "description": "Loguru import"
          },
          {
            "pattern": "\\b\\w*log\\w*\\.(info|debug|error|warning|critical|exception)",
            "weight": 2.0,
            "description": "Logging method calls"
          },
          {
            "pattern": "structlog\\.configure\\(",
            "weight": 3.0,
            "description": "Structured logging configuration"
          },
          {
            "pattern": "logging\\.basicConfig\\(",
            "weight": 3.0,
            "description": "Basic logging configuration"
          },
          {
            "pattern": "logging\\.getLogger\\(",
            "weight": 3.0,
            "description": "Logger creation"
          },
          {
            "pattern": "from\\s+loguru\\s+import\\s+logger",
            "weight": 4.0,
            "description": "Loguru logger import"
          },
          {
            "pattern": "logger\\.(info|debug|error|warning|critical|exception)",
            "weight": 2.0,
            "description": "Loguru logger calls"
          },
          {
            "pattern": "structlog\\.get_logger\\(",
            "weight": 3.0,
            "description": "Structlog logger creation"
          },
          {
            "pattern": "import\\s+colorlog",
            "weight": 3.0,
            "description": "Colorlog import"
          },
          {
            "pattern": "colorlog\\.basicConfig\\(",
            "weight": 3.0,
            "description": "Colorlog configuration"
          },
          {
            "pattern": "import\\s+pythonjsonlogger",
            "weight": 4.0,
            "description": "Python JSON logger import"
          },
          {
            "pattern": "JsonFormatter\\(",
            "weight": 3.0,
            "description": "JSON formatter usage"
          },
          {
            "pattern": "logging\\.config\\.dictConfig\\(",
            "weight": 3.0,
            "description": "Dictionary logging configuration"
          },
          {
            "pattern": "logging\\.config\\.fileConfig\\(",
            "weight": 3.0,
            "description": "File logging configuration"
          },
          {
            "pattern": "LOGGING\\s*=",
            "weight": 2.0,
            "description": "Django logging configuration"
          },
          {
            "pattern": "loguru\\.add\\(",
            "weight": 3.0,
            "description": "Loguru sink addition"
          },
          {
            "pattern": "structlog\\.configure\\(processors=",
            "weight": 3.0,
            "description": "Structlog processors configuration"
          }
        ],
        "javascript": [
          {
            "pattern": "import\\s+\\w*[Ll]og\\w*\\s+from",
            "weight": 3.0,
            "description": "ES6 logging import"
          },
          {
            "pattern": "winston\\.createLogger\\(",
            "weight": 4.0,
            "description": "Winston logger creation"
          },
          {
            "pattern": "pino\\(\\)",
            "weight": 4.0,
            "description": "Pino logger"
          },
          {
            "pattern": "\\b\\w*log\\w*\\.(log|info|debug|error|warn|trace)",
            "weight": 2.0,
            "description": "Logging method calls"
          },
          {
            "pattern": "const\\s+logger\\s*=\\s*winston\\.createLogger",
            "weight": 4.0,
            "description": "Winston logger constant"
          },
          {
            "pattern": "const\\s+logger\\s*=\\s*pino\\(",
            "weight": 4.0,
            "description": "Pino logger constant"
          },
          {
            "pattern": "import\\s+pino\\s+from\\s+'pino'",
            "weight": 4.0,
            "description": "Pino import"
          },
          {
            "pattern": "import\\s+winston\\s+from\\s+'winston'",
            "weight": 4.0,
            "description": "Winston import"
          },
          {
            "pattern": "import\\s+bunyan\\s+from\\s+'bunyan'",
            "weight": 4.0,
            "description": "Bunyan import"
          },
          {
            "pattern": "const\\s+logger\\s*=\\s+bunyan\\.createLogger",
            "weight": 4.0,
            "description": "Bunyan logger creation"
          },
          {
            "pattern": "console\\.(log|info|debug|error|warn)",
            "weight": 1.0,
            "description": "Console logging"
          },
          {
            "pattern": "winston\\.format\\.json\\(",
            "weight": 3.0,
            "description": "Winston JSON format"
          },
          {
            "pattern": "winston\\.format\\.combine\\(",
            "weight": 3.0,
            "description": "Winston format combination"
          },
          {
            "pattern": "pino\\.pretty\\(",
            "weight": 3.0,
            "description": "Pino pretty printing"
          },
          {
            "pattern": "logger\\.child\\(",
            "weight": 3.0,
            "description": "Child logger creation"
          },
          {
            "pattern": "import\\s+debug\\s+from\\s+'debug'",
            "weight": 3.0,
            "description": "Debug import"
          },
          {
            "pattern": "debug\\(",
            "weight": 2.0,
            "description": "Debug usage"
          },
          {
            "pattern": "import\\s+log4js\\s+from\\s+'log4js'",
            "weight": 4.0,
            "description": "Log4js import"
          },
          {
            "pattern": "log4js\\.configure\\(",
            "weight": 3.0,
            "description": "Log4js configuration"
          }
        ],
        "typescript": [
          {
            "pattern": "import\\s+\\{\\s*Logger\\s*\\}",
            "weight": 3.0,
            "description": "TypeScript logger import"
          },
          {
            "pattern": "private\\s+logger\\s*:\\s*Logger",
            "weight": 4.0,
            "description": "TypeScript logger property"
          },
          {
            "pattern": "\\b\\w*log\\w*\\.(log|info|debug|error|warn|trace)",
            "weight": 2.0,
            "description": "Logging method calls"
          },
          {
            "pattern": "interface\\s+Logger",
            "weight": 3.0,
            "description": "Logger interface definition"
          },
          {
            "pattern": "class\\s+\\w*Logger",
            "weight": 3.0,
            "description": "Logger class definition"
          },
          {
            "pattern": "import\\s+\\{\\s*createLogger\\s*\\}",
            "weight": 3.0,
            "description": "Create logger import"
          },
          {
            "pattern": "const\\s+logger\\s*:\\s*Logger\\s*=",
            "weight": 4.0,
            "description": "Typed logger constant"
          },
          {
            "pattern": "logger\\s*:\\s*Logger",
            "weight": 3.0,
            "description": "Logger type annotation"
          },
          {
            "pattern": "import\\s+\\{\\s*winston\\s*\\}",
            "weight": 3.0,
            "description": "Winston TypeScript import"
          },
          {
            "pattern": "import\\s+\\{\\s*pino\\s*\\}",
            "weight": 3.0,
            "description": "Pino TypeScript import"
          }
        ],
        "csharp": [
          {
            "pattern": "using\\s+Microsoft\\.Extensions\\.Logging",
            "weight": 3.0,
            "description": ".NET logging import"
          },
          {
            "pattern": "ILogger<\\w+>",
            "weight": 4.0,
            "description": "Generic logger interface"
          },
          {
            "pattern": "\\b\\w*[Ll]og\\w*\\.(Information|Debug|Error|Warning|Critical|Trace|Fatal)",
            "weight": 2.0,
            "description": "Logging method calls"
          },
          {
            "pattern": "using\\s+Serilog",
            "weight": 4.0,
            "description": "Serilog import"
          },
          {
            "pattern": "using\\s+NLog",
            "weight": 4.0,
            "description": "NLog import"
          },
          {
            "pattern": "Log\\.(Information|Debug|Error|Warning|Fatal)",
            "weight": 3.0,
            "description": "Serilog usage"
          },
          {
            "pattern": "Logger\\.(Info|Debug|Error|Warn|Fatal)",
            "weight": 3.0,
            "description": "NLog usage"
          },
          {
            "pattern": "ILoggerFactory",
            "weight": 3.0,
            "description": "Logger factory interface"
          },
          {
            "pattern": "AddLogging\\(",
            "weight": 3.0,
            "description": "Logging service registration"
          },
          {
            "pattern": "ConfigureLogging\\(",
            "weight": 3.0,
            "description": "Logging configuration"
          },
          {
            "pattern": "LoggingBuilder",
            "weight": 3.0,
            "description": "Logging builder"
          },
          {
            "pattern": "AddConsole\\(",
            "weight": 2.0,
            "description": "Console logging"
          },
          {
            "pattern": "AddDebug\\(",
            "weight": 2.0,
            "description": "Debug logging"
          },
          {
            "pattern": "AddFile\\(",
            "weight": 3.0,
            "description": "File logging"
          },
          {
            "pattern": "using\\s+Microsoft\\.Extensions\\.Logging\\.Abstractions",
            "weight": 3.0,
            "description": "Logging abstractions import"
          },
          {
            "pattern": "LogLevel\\.",
            "weight": 2.0,
            "description": "Log level usage"
          },
          {
            "pattern": "Logging\\.LogLevel",
            "weight": 2.0,
            "description": "Log level configuration"
          }
        ],
        "go": [
          {
            "pattern": "import\\s+\"log\"",
            "weight": 2.0,
            "description": "Go log import"
          },
          {
            "pattern": "import\\s+\"github\\.com/sirupsen/logrus\"",
            "weight": 4.0,
            "description": "Logrus import"
          },
          {
            "pattern": "logrus\\.(Info|Debug|Error|Warn|Trace|Fatal|Panic)",
            "weight": 3.0,
            "description": "Logrus method calls"
          },
          {
            "pattern": "import\\s+\"go\\.uber\\.org/zap\"",
            "weight": 4.0,
            "description": "Zap import"
          },
          {
            "pattern": "zap\\.NewProduction\\(",
            "weight": 4.0,
            "description": "Zap production logger"
          },
          {
            "pattern": "zap\\.NewDevelopment\\(",
            "weight": 4.0,
            "description": "Zap development logger"
          },
          {
            "pattern": "logger\\.(Info|Debug|Error|Warn|Fatal|Panic)",
            "weight": 3.0,
            "description": "Zap logger calls"
          },
          {
            "pattern": "import\\s+\"github\\.com/rs/zerolog\"",
            "weight": 4.0,
            "description": "Zerolog import"
          },
          {
            "pattern": "zerolog\\.(Info|Debug|Error|Warn|Fatal|Panic)",
            "weight": 3.0,
            "description": "Zerolog method calls"
          },
          {
            "pattern": "log\\.(Print|Printf|Println)",
            "weight": 2.0,
            "description": "Standard log calls"
          },
          {
            "pattern": "log\\.(Fatal|Fatalf|Fatalln)",
            "weight": 2.0,
            "description": "Fatal log calls"
          },
          {
            "pattern": "log\\.SetFlags\\(",
            "weight": 2.0,
            "description": "Log flags setting"
          },
          {
            "pattern": "log\\.SetOutput\\(",
            "weight": 2.0,
            "description": "Log output setting"
          },
          {
            "pattern": "logrus\\.SetFormatter\\(",
            "weight": 3.0,
            "description": "Logrus formatter setting"
          },
          {
            "pattern": "logrus\\.SetLevel\\(",
            "weight": 3.0,
            "description": "Logrus level setting"
          },
          {
            "pattern": "zap\\.NewJSONEncoder\\(",
            "weight": 3.0,
            "description": "Zap JSON encoder"
          },
          {
            "pattern": "zerolog\\.ConsoleWriter\\(",
            "weight": 3.0,
            "description": "Zerolog console writer"
          }
        ],
        "rust": [
          {
            "pattern": "use\\s+log::\\{",
            "weight": 3.0,
            "description": "Rust log import"
          },
          {
            "pattern": "info!\\(",
            "weight": 3.0,
            "description": "Rust info macro"
          },
          {
            "pattern": "debug!\\(",
            "weight": 2.0,
            "description": "Rust debug macro"
          },
          {
            "pattern": "error!\\(",
            "weight": 3.0,
            "description": "Rust error macro"
          },
          {
            "pattern": "warn!\\(",
            "weight": 2.0,
            "description": "Rust warn macro"
          },
          {
            "pattern": "trace!\\(",
            "weight": 2.0,
            "description": "Rust trace macro"
          },
          {
            "pattern": "use\\s+env_logger",
            "weight": 3.0,
            "description": "Env logger import"
          },
          {
            "pattern": "env_logger::init\\(",
            "weight": 3.0,
            "description": "Env logger initialization"
          },
          {
            "pattern": "use\\s+log4rs",
            "weight": 4.0,
            "description": "Log4rs import"
          },
          {
            "pattern": "log4rs::init_config\\(",
            "weight": 4.0,
            "description": "Log4rs configuration"
          },
          {
            "pattern": "use\\s+fern",
            "weight": 4.0,
            "description": "Fern import"
          },
          {
            "pattern": "fern::Dispatch::new\\(",
            "weight": 4.0,
            "description": "Fern dispatch creation"
          },
          {
            "pattern": "use\\s+tracing",
            "weight": 4.0,
            "description": "Tracing import"
          },
          {
            "pattern": "tracing::info!\\(",
            "weight": 3.0,
            "description": "Tracing info macro"
          },
          {
            "pattern": "tracing::error!\\(",
            "weight": 3.0,
            "description": "Tracing error macro"
          },
          {
            "pattern": "tracing_subscriber::fmt::init\\(",
            "weight": 4.0,
            "description": "Tracing subscriber initialization"
          },
          {
            "pattern": "RUST_LOG",
            "weight": 2.0,
            "description": "Rust log environment variable"
          }
        ],
        "php": [
          {
            "pattern": "use\\s+Monolog\\\\Logger",
            "weight": 4.0,
            "description": "Monolog Logger import"
          },
          {
            "pattern": "use\\s+Monolog\\\\Handler",
            "weight": 3.0,
            "description": "Monolog Handler import"
          },
          {
            "pattern": "new\\s+Logger\\(",
            "weight": 4.0,
            "description": "Monolog logger creation"
          },
          {
            "pattern": "\\$logger->(info|debug|error|warning|critical)",
            "weight": 2.0,
            "description": "Monolog method calls"
          },
          {
            "pattern": "use\\s+Psr\\\\Log\\\\LoggerInterface",
            "weight": 3.0,
            "description": "PSR-3 Logger interface"
          },
          {
            "pattern": "use\\s+Psr\\\\Log\\\\LoggerTrait",
            "weight": 3.0,
            "description": "PSR-3 Logger trait"
          },
          {
            "pattern": "error_log\\(",
            "weight": 2.0,
            "description": "PHP error_log function"
          },
          {
            "pattern": "syslog\\(",
            "weight": 2.0,
            "description": "PHP syslog function"
          },
          {
            "pattern": "\\$logger->pushHandler\\(",
            "weight": 3.0,
            "description": "Monolog handler addition"
          },
          {
            "pattern": "use\\s+Monolog\\\\Formatter",
            "weight": 3.0,
            "description": "Monolog formatter import"
          },
          {
            "pattern": "JsonFormatter\\(",
            "weight": 3.0,
            "description": "Monolog JSON formatter"
          }
        ],
        "ruby": [
          {
            "pattern": "require\\s+'logger'",
            "weight": 3.0,
            "description": "Ruby logger require"
          },
          {
            "pattern": "Logger\\.new\\(",
            "weight": 3.0,
            "description": "Ruby logger creation"
          },
          {
            "pattern": "\\$logger\\.(info|debug|error|warn|fatal)",
            "weight": 2.0,
            "description": "Ruby logger calls"
          },
          {
            "pattern": "require\\s+'log4r'",
            "weight": 4.0,
            "description": "Log4r require"
          },
          {
            "pattern": "Log4r::Logger\\.new\\(",
            "weight": 4.0,
            "description": "Log4r logger creation"
          },
          {
            "pattern": "require\\s+'logging'",
            "weight": 4.0,
            "description": "Logging gem require"
          },
          {
            "pattern": "Logging\\.logger\\[",
            "weight": 4.0,
            "description": "Logging gem usage"
          },
          {
            "pattern": "Rails\\.logger",
            "weight": 3.0,
            "description": "Rails logger"
          },
          {
            "pattern": "ActiveSupport::Logger",
            "weight": 3.0,
            "description": "ActiveSupport logger"
          },
          {
            "pattern": "logger\\.(info|debug|error|warn|fatal)",
            "weight": 2.0,
            "description": "Rails logger calls"
          }
        ]
      }
    },
    "AVOID_LOGGING_SECRETS": {
      "display_name": "Avoid Logging Confidential Data",
      "description": "Prevent sensitive data from being logged accidentally",
      "category": "Security",
      "priority": "critical",
      "weight": 25.0,
      "expected_coverage": {
        "percentage": 0,
        "reasoning": "No secrets should be logged",
        "confidence": "high"
      },
      "scoring": {
        "base_score": 100,
        "violation_penalty": 20,
        "max_penalty": 100,
        "bonus_for_clean": 10
      },
      "patterns": {
        "all_languages": [
          {
            "pattern": "(?i)\"(password|secret|token|apikey|credential)\"\\s*[:=]\\s*[\"'][^\"']{6,}[\"']",
            "weight": 10.0,
            "description": "Hardcoded secrets"
          },
          {
            "pattern": "(?i)\\b(?:sk_live_|pk_live_|sk_test_|pk_test_)[A-Za-z0-9]{20,}\\b",
            "weight": 15.0,
            "description": "Stripe API keys"
          },
          {
            "pattern": "(?i)\\bgithub_pat_[A-Za-z0-9_]{20,}\\b",
            "weight": 15.0,
            "description": "GitHub personal access tokens"
          },
          {
            "pattern": "-----BEGIN\\s+(?:RSA\\s+)?PRIVATE\\s+KEY-----",
            "weight": 20.0,
            "description": "Private keys"
          },
          {
            "pattern": "(?i)\\b(?:ghp_|gho_|ghu_|ghs_|ghr_)[A-Za-z0-9_]{20,}\\b",
            "weight": 15.0,
            "description": "GitHub tokens"
          },
          {
            "pattern": "(?i)\\b(?:AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\\b",
            "weight": 15.0,
            "description": "AWS access keys"
          },
          {
            "pattern": "(?i)\\b(?:ya29\\.[0-9A-Za-z\\-_]+)\\b",
            "weight": 15.0,
            "description": "Google OAuth tokens"
          },
          {
            "pattern": "(?i)\\b(?:1//[0-9A-Za-z\\-_]{43})\\b",
            "weight": 15.0,
            "description": "Google service account tokens"
          },
          {
            "pattern": "(?i)\\b(?:AIza[0-9A-Za-z\\-_]{35})\\b",
            "weight": 15.0,
            "description": "Google API keys"
          },
          {
            "pattern": "(?i)\\b(?:sk-[0-9A-Za-z]{24})\\b",
            "weight": 15.0,
            "description": "OpenAI API keys"
          },
          {
            "pattern": "(?i)\\b(?:pk-[0-9A-Za-z]{24})\\b",
            "weight": 15.0,
            "description": "OpenAI API keys"
          },
          {
            "pattern": "(?i)\\b(?:xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Slack tokens"
          },
          {
            "pattern": "(?i)\\b(?:xoxr-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Slack bot tokens"
          },
          {
            "pattern": "(?i)\\b(?:xoxa-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Slack app tokens"
          },
          {
            "pattern": "(?i)\\b(?:xoxa-2-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Slack app tokens v2"
          },
          {
            "pattern": "(?i)\\b(?:sk-[0-9A-Za-z]{48})\\b",
            "weight": 15.0,
            "description": "Twilio API keys"
          },
          {
            "pattern": "(?i)\\b(?:AC[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Twilio account SIDs"
          },
          {
            "pattern": "(?i)\\b(?:CA[a-z0-9]{32})\\b",
            "weight": 15.0,
            "description": "Twilio auth tokens"
          },
          {
            "pattern": "(?i)\\b(?:SG\\.[a-z0-9]{22}\\.[a-z0-9]{43})\\b",
            "weight": 15.0,
            "description": "SendGrid API keys"
          },
          {
            "pattern": "(?i)\\b(?:key-[0-9a-zA-Z]{32})\\b",
            "weight": 15.0,
            "description": "Mailgun API keys"
          },
          {
            "pattern": "(?i)\\b(?:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\\b",
            "weight": 10.0,
            "description": "UUIDs (potential secrets)"
          },
          {
            "pattern": "(?i)\\b(?:[a-z0-9]{32})\\b",
            "weight": 8.0,
            "description": "32-character hex strings (potential hashes)"
          },
          {
            "pattern": "(?i)\\b(?:[a-z0-9]{40})\\b",
            "weight": 8.0,
            "description": "40-character hex strings (potential SHA1)"
          },
          {
            "pattern": "(?i)\\b(?:[a-z0-9]{64})\\b",
            "weight": 8.0,
            "description": "64-character hex strings (potential SHA256)"
          }
        ],
        "java": [
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"'].*?\\)",
            "weight": 8.0,
            "description": "Java logging secrets"
          },
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*String\\.format\\s*\\(.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "Java logging secrets with String.format"
          },
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*MessageFormat\\.format\\s*\\(.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "Java logging secrets with MessageFormat"
          },
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*\"\\{0\\}\".*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "Java logging secrets with placeholders"
          },
          {
            "pattern": "(?i)\\bSystem\\.out\\.println\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Java System.out secrets"
          },
          {
            "pattern": "(?i)\\bSystem\\.err\\.println\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Java System.err secrets"
          },
          {
            "pattern": "(?i)\\bprintStackTrace\\s*\\(\\s*\\).*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 6.0,
            "description": "Java stack trace secrets"
          }
        ],
        "python": [
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Python logging secrets"
          },
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*f?[\"'].*?%s.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "Python logging secrets with % formatting"
          },
          {
            "pattern": "(?i)\\b(logging|logger|log|audit_logger|app_logger)\\.(debug|info|warning|warn|error|critical|exception)\\s*\\(\\s*f?[\"'].*?\\{\\}.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "Python logging secrets with {} formatting"
          },
          {
            "pattern": "(?i)\\bprint\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Python print secrets"
          },
          {
            "pattern": "(?i)\\bsys\\.stdout\\.write\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Python sys.stdout secrets"
          },
          {
            "pattern": "(?i)\\bsys\\.stderr\\.write\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Python sys.stderr secrets"
          },
          {
            "pattern": "(?i)\\bstructlog\\.get_logger\\(\\)\\.(info|debug|error|warning|critical)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Python structlog secrets"
          },
          {
            "pattern": "(?i)\\bloguru\\.logger\\.(info|debug|error|warning|critical)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Python loguru secrets"
          }
        ],
        "javascript": [
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "JavaScript logging secrets"
          },
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*`.*?(password|secret|token|apikey|access[_-]?key|credential).*?`",
            "weight": 8.0,
            "description": "JavaScript logging secrets with template literals"
          },
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*\\$\\{.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "JavaScript logging secrets with interpolation"
          },
          {
            "pattern": "(?i)\\bwinston\\.createLogger\\(\\).*\\.(info|debug|error|warn)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Winston logging secrets"
          },
          {
            "pattern": "(?i)\\bpino\\(\\).*\\.(info|debug|error|warn)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Pino logging secrets"
          },
          {
            "pattern": "(?i)\\bbunyan\\.createLogger\\(\\).*\\.(info|debug|error|warn)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Bunyan logging secrets"
          }
        ],
        "typescript": [
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "TypeScript logging secrets"
          },
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*`.*?(password|secret|token|apikey|access[_-]?key|credential).*?`",
            "weight": 8.0,
            "description": "TypeScript logging secrets with template literals"
          },
          {
            "pattern": "(?i)\\b(console|logger|log|audit_logger|app_logger)\\.(log|info|debug|error|warn|trace)\\s*\\(\\s*\\$\\{.*?(password|secret|token|apikey|access[_-]?key|credential)",
            "weight": 8.0,
            "description": "TypeScript logging secrets with interpolation"
          }
        ],
        "csharp": [
          {
            "pattern": "(?i)\\b(_logger|logger|log|logFactory|serilog|nlog)\\.(LogInformation|LogDebug|LogWarning|LogError|LogCritical|LogTrace|Information|Debug|Warning|Error|Trace|Fatal)\\s*\\(\\s*\".*?(password|secret|token|apikey|credential).*?\"",
            "weight": 8.0,
            "description": "C# logging secrets"
          },
          {
            "pattern": "(?i)\\b(_logger|logger|log|logFactory|serilog|nlog)\\.(LogInformation|LogDebug|LogWarning|LogError|LogCritical|LogTrace|Information|Debug|Warning|Error|Trace|Fatal)\\s*\\(\\s*\\$@?\".*?(password|secret|token|apikey|credential)",
            "weight": 8.0,
            "description": "C# logging secrets with string interpolation"
          },
          {
            "pattern": "(?i)\\b(_logger|logger|log|logFactory|serilog|nlog)\\.(LogInformation|LogDebug|LogWarning|LogError|LogCritical|LogTrace|Information|Debug|Warning|Error|Trace|Fatal)\\s*\\(\\s*string\\.Format\\s*\\(.*?(password|secret|token|apikey|credential)",
            "weight": 8.0,
            "description": "C# logging secrets with string.Format"
          },
          {
            "pattern": "(?i)\\bConsole\\.(WriteLine|Write)\\s*\\(\\s*\".*?(password|secret|token|apikey|credential).*?\"",
            "weight": 6.0,
            "description": "C# Console secrets"
          },
          {
            "pattern": "(?i)\\bDebug\\.(WriteLine|Write)\\s*\\(\\s*\".*?(password|secret|token|apikey|credential).*?\"",
            "weight": 6.0,
            "description": "C# Debug secrets"
          },
          {
            "pattern": "(?i)\\bTrace\\.(WriteLine|Write)\\s*\\(\\s*\".*?(password|secret|token|apikey|credential).*?\"",
            "weight": 6.0,
            "description": "C# Trace secrets"
          }
        ],
        "go": [
          {
            "pattern": "(?i)\\b(log|logger|logrus|zap|zerolog)\\.(Info|Debug|Error|Warn|Fatal|Panic|Print|Printf|Println)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Go logging secrets"
          },
          {
            "pattern": "(?i)\\b(log|logger|logrus|zap|zerolog)\\.(Info|Debug|Error|Warn|Fatal|Panic|Print|Printf|Println)\\s*\\(\\s*`.*?(password|secret|token|apikey|access[_-]?key|credential).*?`",
            "weight": 8.0,
            "description": "Go logging secrets with backticks"
          },
          {
            "pattern": "(?i)\\bfmt\\.(Print|Printf|Println)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Go fmt secrets"
          },
          {
            "pattern": "(?i)\\blog\\.(Print|Printf|Println|Fatal|Fatalf|Fatalln)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Go log package secrets"
          }
        ],
        "rust": [
          {
            "pattern": "(?i)\\b(info!|debug!|error!|warn!|trace!)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Rust logging secrets"
          },
          {
            "pattern": "(?i)\\bprintln!\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Rust println secrets"
          },
          {
            "pattern": "(?i)\\beprintln!\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Rust eprintln secrets"
          },
          {
            "pattern": "(?i)\\bprint!\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Rust print secrets"
          },
          {
            "pattern": "(?i)\\beprint!\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Rust eprint secrets"
          }
        ],
        "php": [
          {
            "pattern": "(?i)\\b(\\$logger|\\$log|\\$audit_logger|\\$app_logger)->(info|debug|error|warning|critical)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "PHP logging secrets"
          },
          {
            "pattern": "(?i)\\berror_log\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "PHP error_log secrets"
          },
          {
            "pattern": "(?i)\\bsyslog\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "PHP syslog secrets"
          },
          {
            "pattern": "(?i)\\bprint\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "PHP print secrets"
          },
          {
            "pattern": "(?i)\\becho\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "PHP echo secrets"
          }
        ],
        "ruby": [
          {
            "pattern": "(?i)\\b(\\$logger|\\$log|\\$audit_logger|\\$app_logger)\\.(info|debug|error|warn|fatal)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Ruby logging secrets"
          },
          {
            "pattern": "(?i)\\bputs\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Ruby puts secrets"
          },
          {
            "pattern": "(?i)\\bprint\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Ruby print secrets"
          },
          {
            "pattern": "(?i)\\bp\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 6.0,
            "description": "Ruby p method secrets"
          },
          {
            "pattern": "(?i)\\bRails\\.logger\\.(info|debug|error|warn|fatal)\\s*\\(\\s*f?[\"'].*?(password|secret|token|apikey|access[_-]?key|credential).*?[\"']",
            "weight": 8.0,
            "description": "Rails logger secrets"
          }
        ]
      }
    },
    "AUDIT_TRAIL": {
      "display_name": "Create Audit Trail Logs",
      "description": "Log critical business operations for audit compliance",
      "category": "Compliance",
      "priority": "high",
      "weight": 12.0,
      "expected_coverage": {
        "percentage": 15,
        "reasoning": "Audit trails should be present in business logic files",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.7,
        "bonus_multiplier": 1.05,
        "penalty_threshold": 0.2,
        "penalty_multiplier": 0.8
      },
      "patterns": {
        "java": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "transaction.*log",
            "weight": 3.0,
            "description": "Transaction logging"
          },
          {
            "pattern": "@Audited",
            "weight": 5.0,
            "description": "Hibernate Envers audit annotation"
          },
          {
            "pattern": "@AuditTable",
            "weight": 4.0,
            "description": "Hibernate Envers audit table annotation"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event class"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger class"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service class"
          },
          {
            "pattern": "audit\\.(info|debug|error|warn|trace)",
            "weight": 3.0,
            "description": "Audit logger method calls"
          },
          {
            "pattern": "logAuditEvent",
            "weight": 4.0,
            "description": "Audit event logging method"
          },
          {
            "pattern": "recordAudit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "auditTrail",
            "weight": 4.0,
            "description": "Audit trail variable/method"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "python": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "audit_event",
            "weight": 4.0,
            "description": "Audit event"
          },
          {
            "pattern": "audit_logger",
            "weight": 4.0,
            "description": "Audit logger"
          },
          {
            "pattern": "audit_service",
            "weight": 4.0,
            "description": "Audit service"
          },
          {
            "pattern": "log_audit",
            "weight": 4.0,
            "description": "Log audit method"
          },
          {
            "pattern": "record_audit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "audit_trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          },
          {
            "pattern": "from\\s+audit",
            "weight": 3.0,
            "description": "Audit module import"
          },
          {
            "pattern": "import\\s+audit",
            "weight": 3.0,
            "description": "Audit module import"
          },
          {
            "pattern": "class.*Audit",
            "weight": 4.0,
            "description": "Audit class definition"
          },
          {
            "pattern": "def.*audit",
            "weight": 3.0,
            "description": "Audit function definition"
          }
        ],
        "javascript": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "auditEvent",
            "weight": 4.0,
            "description": "Audit event"
          },
          {
            "pattern": "auditLogger",
            "weight": 4.0,
            "description": "Audit logger"
          },
          {
            "pattern": "auditService",
            "weight": 4.0,
            "description": "Audit service"
          },
          {
            "pattern": "logAudit",
            "weight": 4.0,
            "description": "Log audit method"
          },
          {
            "pattern": "recordAudit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "auditTrail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          },
          {
            "pattern": "class.*Audit",
            "weight": 4.0,
            "description": "Audit class definition"
          },
          {
            "pattern": "function.*audit",
            "weight": 3.0,
            "description": "Audit function definition"
          },
          {
            "pattern": "const.*audit",
            "weight": 3.0,
            "description": "Audit constant"
          },
          {
            "pattern": "let.*audit",
            "weight": 3.0,
            "description": "Audit variable"
          }
        ],
        "typescript": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "interface.*Audit",
            "weight": 4.0,
            "description": "Audit interface"
          },
          {
            "pattern": "type.*Audit",
            "weight": 4.0,
            "description": "Audit type"
          },
          {
            "pattern": "class.*Audit",
            "weight": 4.0,
            "description": "Audit class"
          },
          {
            "pattern": "auditEvent",
            "weight": 4.0,
            "description": "Audit event"
          },
          {
            "pattern": "auditLogger",
            "weight": 4.0,
            "description": "Audit logger"
          },
          {
            "pattern": "auditService",
            "weight": 4.0,
            "description": "Audit service"
          },
          {
            "pattern": "logAudit",
            "weight": 4.0,
            "description": "Log audit method"
          },
          {
            "pattern": "recordAudit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "auditTrail",
            "weight": 4.0,
            "description": "Audit trail"
          }
        ],
        "csharp": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event class"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger class"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service class"
          },
          {
            "pattern": "IAuditService",
            "weight": 4.0,
            "description": "Audit service interface"
          },
          {
            "pattern": "LogAuditEvent",
            "weight": 4.0,
            "description": "Log audit event method"
          },
          {
            "pattern": "RecordAudit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "AuditTrail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "go": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event struct"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger struct"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service struct"
          },
          {
            "pattern": "LogAudit",
            "weight": 4.0,
            "description": "Log audit function"
          },
          {
            "pattern": "RecordAudit",
            "weight": 4.0,
            "description": "Record audit function"
          },
          {
            "pattern": "AuditTrail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "rust": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event struct"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger struct"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service struct"
          },
          {
            "pattern": "log_audit",
            "weight": 4.0,
            "description": "Log audit function"
          },
          {
            "pattern": "record_audit",
            "weight": 4.0,
            "description": "Record audit function"
          },
          {
            "pattern": "audit_trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "php": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event class"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger class"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service class"
          },
          {
            "pattern": "logAudit",
            "weight": 4.0,
            "description": "Log audit method"
          },
          {
            "pattern": "recordAudit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "auditTrail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "ruby": [
          {
            "pattern": "audit.*log",
            "weight": 4.0,
            "description": "Audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 3.0,
            "description": "Business logging"
          },
          {
            "pattern": "AuditEvent",
            "weight": 4.0,
            "description": "Audit event class"
          },
          {
            "pattern": "AuditLogger",
            "weight": 4.0,
            "description": "Audit logger class"
          },
          {
            "pattern": "AuditService",
            "weight": 4.0,
            "description": "Audit service class"
          },
          {
            "pattern": "log_audit",
            "weight": 4.0,
            "description": "Log audit method"
          },
          {
            "pattern": "record_audit",
            "weight": 4.0,
            "description": "Record audit method"
          },
          {
            "pattern": "audit_trail",
            "weight": 4.0,
            "description": "Audit trail"
          },
          {
            "pattern": "compliance.*log",
            "weight": 3.0,
            "description": "Compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 3.0,
            "description": "Regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 4.0,
            "description": "Security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 3.0,
            "description": "User action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 3.0,
            "description": "Data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 3.0,
            "description": "System event logging"
          }
        ],
        "all_languages": [
          {
            "pattern": "audit.*log",
            "weight": 3.0,
            "description": "Generic audit logging"
          },
          {
            "pattern": "audit.*trail",
            "weight": 3.0,
            "description": "Generic audit trail"
          },
          {
            "pattern": "business.*log",
            "weight": 2.0,
            "description": "Generic business logging"
          },
          {
            "pattern": "compliance.*log",
            "weight": 2.0,
            "description": "Generic compliance logging"
          },
          {
            "pattern": "regulatory.*log",
            "weight": 2.0,
            "description": "Generic regulatory logging"
          },
          {
            "pattern": "security.*event",
            "weight": 3.0,
            "description": "Generic security event logging"
          },
          {
            "pattern": "user.*action",
            "weight": 2.0,
            "description": "Generic user action logging"
          },
          {
            "pattern": "data.*access",
            "weight": 2.0,
            "description": "Generic data access logging"
          },
          {
            "pattern": "system.*event",
            "weight": 2.0,
            "description": "Generic system event logging"
          }
        ]
      }
    },
    "CORRELATION_ID": {
      "display_name": "Tracking ID for Logs",
      "description": "Include correlation IDs for distributed tracing",
      "category": "Observability",
      "priority": "medium",
      "weight": 8.0,
      "expected_coverage": {
        "percentage": 20,
        "reasoning": "Correlation IDs should be present in API and service files",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.6,
        "bonus_multiplier": 1.05,
        "penalty_threshold": 0.1,
        "penalty_multiplier": 0.9
      },
      "patterns": {
        "all_languages": [
          {
            "pattern": "x-correlation-id",
            "weight": 4.0,
            "description": "X-Correlation-ID header"
          },
          {
            "pattern": "x-request-id",
            "weight": 4.0,
            "description": "X-Request-ID header"
          },
          {
            "pattern": "x-trace-id",
            "weight": 3.5,
            "description": "X-Trace-ID header"
          },
          {
            "pattern": "x-b3-traceid",
            "weight": 3.5,
            "description": "B3 Trace ID (Zipkin/Sleuth compatible)"
          },
          {
            "pattern": "MDC\\.put\\(\"(correlationId|traceId|requestId)\"",
            "weight": 4.0,
            "description": "Injecting correlation ID into SLF4J MDC"
          },
          {
            "pattern": "MDC\\.get\\(\"(correlationId|traceId|requestId)\"",
            "weight": 3.0,
            "description": "Reading correlation ID from SLF4J MDC"
          },
          {
            "pattern": "req\\.headers\\[['\"]x-(correlation-id|request-id)['\"]\\]",
            "weight": 3.5,
            "description": "Accessing correlation ID from request headers in Express"
          },
          {
            "pattern": "res\\.set\\(['\"]x-(correlation-id|request-id)['\"],",
            "weight": 3.5,
            "description": "Setting correlation ID in response headers in Express"
          },
          {
            "pattern": "request\\.headers\\.get\\(['\"]x-(correlation-id|request-id)['\"]",
            "weight": 3.5,
            "description": "Extracting correlation ID from headers in Python web frameworks"
          },
          {
            "pattern": "logger\\.bind\\(correlation_id=",
            "weight": 3.5,
            "description": "Binding correlation ID to logger context (e.g., structlog)"
          },
          {
            "pattern": "traceparent",
            "weight": 3.0,
            "description": "W3C Trace Context header"
          },
          {
            "pattern": "uber-trace-id",
            "weight": 3.0,
            "description": "Jaeger trace header"
          },
          {
            "pattern": "correlation_id",
            "weight": 5.0,
            "description": "Correlation ID"
          },
          {
            "pattern": "request_id",
            "weight": 4.0,
            "description": "Request ID"
          },
          {
            "pattern": "trace_id",
            "weight": 4.0,
            "description": "Trace ID"
          },
          {
            "pattern": "tracking.*id",
            "weight": 3.0,
            "description": "Tracking ID"
          }
        ]
      }
    },
    "LOG_API_CALLS": {
      "display_name": "Log REST API Calls",
      "description": "Log all API requests and responses for monitoring",
      "category": "Logging",
      "priority": "high",
      "weight": 12.0,
      "expected_coverage": {
        "percentage": 30,
        "reasoning": "API calls should be logged for monitoring and debugging",
        "confidence": "high"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.7,
        "bonus_multiplier": 1.1,
        "penalty_threshold": 0.2,
        "penalty_multiplier": 0.8
      },
      "patterns": {
        "java": [
          {
            "pattern": "@RequestMapping.*log",
            "weight": 3.0,
            "description": "Spring request mapping with logging"
          },
          {
            "pattern": "@RestController.*log",
            "weight": 3.0,
            "description": "REST controller with logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "HttpServletRequest.*log",
            "weight": 3.0,
            "description": "HTTP request logging"
          },
          {
            "pattern": "HttpServletResponse.*log",
            "weight": 3.0,
            "description": "HTTP response logging"
          },
          {
            "pattern": "RestTemplate.*log",
            "weight": 3.0,
            "description": "REST template logging"
          },
          {
            "pattern": "WebClient.*log",
            "weight": 3.0,
            "description": "WebClient logging"
          },
          {
            "pattern": "FeignClient.*log",
            "weight": 3.0,
            "description": "Feign client logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "python": [
          {
            "pattern": "logger\\.(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "requests\\.(get|post|put|delete).*log",
            "weight": 3.0,
            "description": "Requests library logging"
          },
          {
            "pattern": "aiohttp.*log",
            "weight": 3.0,
            "description": "Aiohttp logging"
          },
          {
            "pattern": "httpx.*log",
            "weight": 3.0,
            "description": "Httpx logging"
          },
          {
            "pattern": "urllib.*log",
            "weight": 2.0,
            "description": "Urllib logging"
          },
          {
            "pattern": "flask.*log",
            "weight": 3.0,
            "description": "Flask request logging"
          },
          {
            "pattern": "django.*log",
            "weight": 3.0,
            "description": "Django request logging"
          },
          {
            "pattern": "fastapi.*log",
            "weight": 3.0,
            "description": "FastAPI request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "javascript": [
          {
            "pattern": "logger\\.(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "fetch.*log",
            "weight": 3.0,
            "description": "Fetch API logging"
          },
          {
            "pattern": "axios.*log",
            "weight": 3.0,
            "description": "Axios logging"
          },
          {
            "pattern": "superagent.*log",
            "weight": 3.0,
            "description": "Superagent logging"
          },
          {
            "pattern": "express.*log",
            "weight": 3.0,
            "description": "Express request logging"
          },
          {
            "pattern": "koa.*log",
            "weight": 3.0,
            "description": "Koa request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "typescript": [
          {
            "pattern": "logger\\.(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "fetch.*log",
            "weight": 3.0,
            "description": "Fetch API logging"
          },
          {
            "pattern": "axios.*log",
            "weight": 3.0,
            "description": "Axios logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "csharp": [
          {
            "pattern": "logger\\.(Information|Debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "HttpClient.*log",
            "weight": 3.0,
            "description": "HttpClient logging"
          },
          {
            "pattern": "HttpRequestMessage.*log",
            "weight": 3.0,
            "description": "HTTP request logging"
          },
          {
            "pattern": "HttpResponseMessage.*log",
            "weight": 3.0,
            "description": "HTTP response logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "go": [
          {
            "pattern": "logger\\.(Info|Debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "http\\.Client.*log",
            "weight": 3.0,
            "description": "HTTP client logging"
          },
          {
            "pattern": "http\\.Request.*log",
            "weight": 3.0,
            "description": "HTTP request logging"
          },
          {
            "pattern": "http\\.Response.*log",
            "weight": 3.0,
            "description": "HTTP response logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "rust": [
          {
            "pattern": "info!.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "info!.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "info!.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "reqwest.*log",
            "weight": 3.0,
            "description": "Reqwest logging"
          },
          {
            "pattern": "hyper.*log",
            "weight": 3.0,
            "description": "Hyper logging"
          },
          {
            "pattern": "info!.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "info!.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "info!.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "info!.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "info!.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "php": [
          {
            "pattern": "\\$logger->(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "curl.*log",
            "weight": 3.0,
            "description": "cURL logging"
          },
          {
            "pattern": "GuzzleHttp.*log",
            "weight": 3.0,
            "description": "Guzzle HTTP logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "ruby": [
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*request",
            "weight": 4.0,
            "description": "Request logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*response",
            "weight": 4.0,
            "description": "Response logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*api",
            "weight": 4.0,
            "description": "API call logging"
          },
          {
            "pattern": "Net::HTTP.*log",
            "weight": 3.0,
            "description": "Net::HTTP logging"
          },
          {
            "pattern": "HTTParty.*log",
            "weight": 3.0,
            "description": "HTTParty logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*endpoint",
            "weight": 4.0,
            "description": "Endpoint logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*url",
            "weight": 3.0,
            "description": "URL logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "HTTP method logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*status",
            "weight": 3.0,
            "description": "Status code logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*duration",
            "weight": 3.0,
            "description": "Request duration logging"
          }
        ],
        "all_languages": [
          {
            "pattern": "api.*log",
            "weight": 3.0,
            "description": "Generic API logging"
          },
          {
            "pattern": "request.*log",
            "weight": 3.0,
            "description": "Generic request logging"
          },
          {
            "pattern": "response.*log",
            "weight": 3.0,
            "description": "Generic response logging"
          },
          {
            "pattern": "endpoint.*log",
            "weight": 3.0,
            "description": "Generic endpoint logging"
          },
          {
            "pattern": "http.*log",
            "weight": 2.0,
            "description": "Generic HTTP logging"
          },
          {
            "pattern": "rest.*log",
            "weight": 2.0,
            "description": "Generic REST logging"
          }
        ]
      }
    },
    "LOG_APPLICATION_MESSAGES": {
      "display_name": "Log Application Messages",
      "description": "Log important application events and messages",
      "category": "Logging",
      "priority": "medium",
      "weight": 10.0,
      "expected_coverage": {
        "percentage": 40,
        "reasoning": "Application messages should be logged across business logic",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.6,
        "bonus_multiplier": 1.05,
        "penalty_threshold": 0.2,
        "penalty_multiplier": 0.9
      },
      "patterns": {
        "java": [
          {
            "pattern": "logger\\.(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "python": [
          {
            "pattern": "logger\\.(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "javascript": [
          {
            "pattern": "logger\\.(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "typescript": [
          {
            "pattern": "logger\\.(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "csharp": [
          {
            "pattern": "logger\\.(Information|Debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(Information|Debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "go": [
          {
            "pattern": "logger\\.(Info|Debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "logger\\.(Info|Debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "rust": [
          {
            "pattern": "info!.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "info!.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "info!.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "info!.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "info!.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "info!.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "info!.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "info!.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "info!.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "info!.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "info!.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "info!.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "info!.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "info!.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "info!.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "php": [
          {
            "pattern": "\\$logger->(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "\\$logger->(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "ruby": [
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*application",
            "weight": 4.0,
            "description": "Application message logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*business",
            "weight": 4.0,
            "description": "Business logic logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*event",
            "weight": 4.0,
            "description": "Event logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*process",
            "weight": 3.0,
            "description": "Process logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*operation",
            "weight": 3.0,
            "description": "Operation logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*service",
            "weight": 3.0,
            "description": "Service logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*function",
            "weight": 3.0,
            "description": "Function logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*method",
            "weight": 3.0,
            "description": "Method logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*start",
            "weight": 3.0,
            "description": "Start operation logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*end",
            "weight": 3.0,
            "description": "End operation logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*complete",
            "weight": 3.0,
            "description": "Completion logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*success",
            "weight": 3.0,
            "description": "Success logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*failure",
            "weight": 3.0,
            "description": "Failure logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*result",
            "weight": 3.0,
            "description": "Result logging"
          },
          {
            "pattern": "\\$logger\\.(info|debug)\\(.*data",
            "weight": 3.0,
            "description": "Data logging"
          }
        ],
        "all_languages": [
          {
            "pattern": "application.*log",
            "weight": 2.0,
            "description": "Generic application logging"
          },
          {
            "pattern": "business.*log",
            "weight": 2.0,
            "description": "Generic business logging"
          },
          {
            "pattern": "event.*log",
            "weight": 2.0,
            "description": "Generic event logging"
          },
          {
            "pattern": "process.*log",
            "weight": 2.0,
            "description": "Generic process logging"
          },
          {
            "pattern": "operation.*log",
            "weight": 2.0,
            "description": "Generic operation logging"
          },
          {
            "pattern": "service.*log",
            "weight": 2.0,
            "description": "Generic service logging"
          },
          {
            "pattern": "function.*log",
            "weight": 2.0,
            "description": "Generic function logging"
          },
          {
            "pattern": "method.*log",
            "weight": 2.0,
            "description": "Generic method logging"
          }
        ]
      }
    },
    "UI_ERRORS": {
      "display_name": "Client UI Errors Logged",
      "description": "Log client-side errors and UI exceptions",
      "category": "Logging",
      "priority": "medium",
      "weight": 8.0,
      "expected_coverage": {
        "percentage": 15,
        "reasoning": "UI error logging should be present in frontend files",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.5,
        "bonus_multiplier": 1.05,
        "penalty_threshold": 0.1,
        "penalty_multiplier": 0.9
      },
      "patterns": {
        "javascript": [
          {
            "pattern": "console\\.error\\(",
            "weight": 3.0,
            "description": "Console error logging"
          },
          {
            "pattern": "logger\\.error\\(",
            "weight": 4.0,
            "description": "Logger error calls"
          },
          {
            "pattern": "catch.*error",
            "weight": 3.0,
            "description": "Error catching"
          },
          {
            "pattern": "window\\.onerror",
            "weight": 4.0,
            "description": "Global error handler"
          },
          {
            "pattern": "addEventListener.*error",
            "weight": 3.0,
            "description": "Error event listener"
          },
          {
            "pattern": "throw.*Error",
            "weight": 2.0,
            "description": "Error throwing"
          },
          {
            "pattern": "new\\s+Error\\(",
            "weight": 2.0,
            "description": "Error creation"
          },
          {
            "pattern": "error.*log",
            "weight": 3.0,
            "description": "Error logging"
          },
          {
            "pattern": "ui.*error",
            "weight": 4.0,
            "description": "UI error handling"
          },
          {
            "pattern": "client.*error",
            "weight": 4.0,
            "description": "Client error handling"
          },
          {
            "pattern": "frontend.*error",
            "weight": 4.0,
            "description": "Frontend error handling"
          },
          {
            "pattern": "user.*error",
            "weight": 3.0,
            "description": "User error handling"
          },
          {
            "pattern": "interface.*error",
            "weight": 3.0,
            "description": "Interface error handling"
          },
          {
            "pattern": "display.*error",
            "weight": 3.0,
            "description": "Display error handling"
          },
          {
            "pattern": "render.*error",
            "weight": 3.0,
            "description": "Render error handling"
          }
        ],
        "typescript": [
          {
            "pattern": "console\\.error\\(",
            "weight": 3.0,
            "description": "Console error logging"
          },
          {
            "pattern": "logger\\.error\\(",
            "weight": 4.0,
            "description": "Logger error calls"
          },
          {
            "pattern": "catch.*error",
            "weight": 3.0,
            "description": "Error catching"
          },
          {
            "pattern": "window\\.onerror",
            "weight": 4.0,
            "description": "Global error handler"
          },
          {
            "pattern": "addEventListener.*error",
            "weight": 3.0,
            "description": "Error event listener"
          },
          {
            "pattern": "throw.*Error",
            "weight": 2.0,
            "description": "Error throwing"
          },
          {
            "pattern": "new\\s+Error\\(",
            "weight": 2.0,
            "description": "Error creation"
          },
          {
            "pattern": "error.*log",
            "weight": 3.0,
            "description": "Error logging"
          },
          {
            "pattern": "ui.*error",
            "weight": 4.0,
            "description": "UI error handling"
          },
          {
            "pattern": "client.*error",
            "weight": 4.0,
            "description": "Client error handling"
          },
          {
            "pattern": "frontend.*error",
            "weight": 4.0,
            "description": "Frontend error handling"
          },
          {
            "pattern": "user.*error",
            "weight": 3.0,
            "description": "User error handling"
          },
          {
            "pattern": "interface.*error",
            "weight": 3.0,
            "description": "Interface error handling"
          },
          {
            "pattern": "display.*error",
            "weight": 3.0,
            "description": "Display error handling"
          },
          {
            "pattern": "render.*error",
            "weight": 3.0,
            "description": "Render error handling"
          }
        ],
        "all_languages": [
          {
            "pattern": "ui.*error",
            "weight": 3.0,
            "description": "Generic UI error handling"
          },
          {
            "pattern": "client.*error",
            "weight": 3.0,
            "description": "Generic client error handling"
          },
          {
            "pattern": "frontend.*error",
            "weight": 3.0,
            "description": "Generic frontend error handling"
          },
          {
            "pattern": "user.*error",
            "weight": 2.0,
            "description": "Generic user error handling"
          },
          {
            "pattern": "interface.*error",
            "weight": 2.0,
            "description": "Generic interface error handling"
          },
          {
            "pattern": "display.*error",
            "weight": 2.0,
            "description": "Generic display error handling"
          },
          {
            "pattern": "render.*error",
            "weight": 2.0,
            "description": "Generic render error handling"
          }
        ]
      }
    },
    "RETRY_LOGIC": {
      "display_name": "Retry Logic",
      "description": "Implement retry mechanisms for transient failures",
      "category": "Resilience",
      "priority": "high",
      "weight": 12.0,
      "expected_coverage": {
        "percentage": 20,
        "reasoning": "Retry logic should be present in network and external service calls",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.6,
        "bonus_multiplier": 1.1,
        "penalty_threshold": 0.1,
        "penalty_multiplier": 0.8
      },
      "patterns": {
        "java": [
          {
            "pattern": "@Retryable",
            "weight": 5.0,
            "description": "Spring Retry annotation"
          },
          {
            "pattern": "@EnableRetry",
            "weight": 4.0,
            "description": "Spring Retry enablement"
          },
          {
            "pattern": "RetryTemplate",
            "weight": 4.0,
            "description": "Spring RetryTemplate"
          },
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "python": [
          {
            "pattern": "tenacity",
            "weight": 5.0,
            "description": "Tenacity retry library"
          },
          {
            "pattern": "retry\\.decorator",
            "weight": 4.0,
            "description": "Retry decorator"
          },
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "javascript": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          },
          {
            "pattern": "axios.*retry",
            "weight": 3.0,
            "description": "Axios retry interceptor"
          },
          {
            "pattern": "fetch.*retry",
            "weight": 3.0,
            "description": "Fetch retry wrapper"
          }
        ],
        "typescript": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "csharp": [
          {
            "pattern": "Polly\\.Retry",
            "weight": 5.0,
            "description": "Polly retry policy"
          },
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "go": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "rust": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "php": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "ruby": [
          {
            "pattern": "retry.*attempt",
            "weight": 3.0,
            "description": "Retry attempt logic"
          },
          {
            "pattern": "retry.*count",
            "weight": 3.0,
            "description": "Retry count logic"
          },
          {
            "pattern": "retry.*delay",
            "weight": 3.0,
            "description": "Retry delay logic"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 4.0,
            "description": "Retry backoff logic"
          },
          {
            "pattern": "retry.*policy",
            "weight": 4.0,
            "description": "Retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 4.0,
            "description": "Retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 4.0,
            "description": "Retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 4.0,
            "description": "Retry logic"
          },
          {
            "pattern": "retry.*handler",
            "weight": 3.0,
            "description": "Retry handler"
          },
          {
            "pattern": "retry.*callback",
            "weight": 3.0,
            "description": "Retry callback"
          },
          {
            "pattern": "retry.*exception",
            "weight": 3.0,
            "description": "Retry exception handling"
          },
          {
            "pattern": "retry.*failure",
            "weight": 3.0,
            "description": "Retry failure handling"
          }
        ],
        "all_languages": [
          {
            "pattern": "retry.*attempt",
            "weight": 2.0,
            "description": "Generic retry attempt"
          },
          {
            "pattern": "retry.*count",
            "weight": 2.0,
            "description": "Generic retry count"
          },
          {
            "pattern": "retry.*delay",
            "weight": 2.0,
            "description": "Generic retry delay"
          },
          {
            "pattern": "retry.*backoff",
            "weight": 3.0,
            "description": "Generic retry backoff"
          },
          {
            "pattern": "retry.*policy",
            "weight": 3.0,
            "description": "Generic retry policy"
          },
          {
            "pattern": "retry.*strategy",
            "weight": 3.0,
            "description": "Generic retry strategy"
          },
          {
            "pattern": "retry.*mechanism",
            "weight": 3.0,
            "description": "Generic retry mechanism"
          },
          {
            "pattern": "retry.*logic",
            "weight": 3.0,
            "description": "Generic retry logic"
          }
        ]
      }
    },
    "TIMEOUTS": {
      "display_name": "Timeouts in IO Ops",
      "description": "Implement timeouts for all I/O operations",
      "category": "Resilience",
      "priority": "high",
      "weight": 12.0,
      "expected_coverage": {
        "percentage": 25,
        "reasoning": "Timeouts should be present in network and database operations",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.6,
        "bonus_multiplier": 1.1,
        "penalty_threshold": 0.1,
        "penalty_multiplier": 0.8
      },
      "patterns": {
        "java": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "setTimeout\\(",
            "weight": 3.0,
            "description": "Set timeout method"
          },
          {
            "pattern": "withTimeout\\(",
            "weight": 4.0,
            "description": "With timeout method"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "python": [
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "timeout.*milliseconds",
            "weight": 3.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          },
          {
            "pattern": "requests\\.get.*timeout",
            "weight": 4.0,
            "description": "Requests timeout"
          },
          {
            "pattern": "aiohttp.*timeout",
            "weight": 4.0,
            "description": "Aiohttp timeout"
          }
        ],
        "javascript": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "setTimeout\\(",
            "weight": 3.0,
            "description": "Set timeout method"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          },
          {
            "pattern": "axios.*timeout",
            "weight": 4.0,
            "description": "Axios timeout"
          },
          {
            "pattern": "fetch.*timeout",
            "weight": 3.0,
            "description": "Fetch timeout"
          }
        ],
        "typescript": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "setTimeout\\(",
            "weight": 3.0,
            "description": "Set timeout method"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "csharp": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "CancellationTokenSource",
            "weight": 4.0,
            "description": "Cancellation token source"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "go": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "context\\.WithTimeout",
            "weight": 4.0,
            "description": "Context with timeout"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "rust": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "tokio::time::timeout",
            "weight": 4.0,
            "description": "Tokio timeout"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "php": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "ruby": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 4.0,
            "description": "Timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 4.0,
            "description": "Timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 3.0,
            "description": "Timeout in minutes"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 4.0,
            "description": "Timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 3.0,
            "description": "Timeout configuration"
          },
          {
            "pattern": "timeout.*handler",
            "weight": 3.0,
            "description": "Timeout handler"
          },
          {
            "pattern": "timeout.*exception",
            "weight": 3.0,
            "description": "Timeout exception"
          },
          {
            "pattern": "timeout.*error",
            "weight": 3.0,
            "description": "Timeout error"
          },
          {
            "pattern": "timeout.*failure",
            "weight": 3.0,
            "description": "Timeout failure"
          },
          {
            "pattern": "timeout.*response",
            "weight": 3.0,
            "description": "Timeout response"
          },
          {
            "pattern": "timeout.*request",
            "weight": 3.0,
            "description": "Timeout request"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 4.0,
            "description": "Connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 4.0,
            "description": "Read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 4.0,
            "description": "Write timeout"
          }
        ],
        "all_languages": [
          {
            "pattern": "timeout.*milliseconds",
            "weight": 3.0,
            "description": "Generic timeout in milliseconds"
          },
          {
            "pattern": "timeout.*seconds",
            "weight": 3.0,
            "description": "Generic timeout in seconds"
          },
          {
            "pattern": "timeout.*minutes",
            "weight": 2.0,
            "description": "Generic timeout in minutes"
          },
          {
            "pattern": "timeout.*policy",
            "weight": 3.0,
            "description": "Generic timeout policy"
          },
          {
            "pattern": "timeout.*config",
            "weight": 2.0,
            "description": "Generic timeout configuration"
          },
          {
            "pattern": "timeout.*connection",
            "weight": 3.0,
            "description": "Generic connection timeout"
          },
          {
            "pattern": "timeout.*read",
            "weight": 3.0,
            "description": "Generic read timeout"
          },
          {
            "pattern": "timeout.*write",
            "weight": 3.0,
            "description": "Generic write timeout"
          }
        ]
      }
    },
    "THROTTLING": {
      "display_name": "Throttling & Drop Request",
      "description": "Implement request throttling and rate limiting",
      "category": "Resilience",
      "priority": "medium",
      "weight": 10.0,
      "expected_coverage": {
        "percentage": 15,
        "reasoning": "Throttling should be present in API endpoints and external service calls",
        "confidence": "medium"
      },
      "scoring": {
        "base_score": 100,
        "bonus_threshold": 0.5,
        "bonus_multiplier": 1.05,
        "penalty_threshold": 0.1,
        "penalty_multiplier": 0.9
      },
      "patterns": {
        "java": [
          {
            "pattern": "@RateLimiter",
            "weight": 5.0,
            "description": "Rate limiter annotation"
          },
          {
            "pattern": "RateLimiter",
            "weight": 4.0,
            "description": "Rate limiter usage"
          },
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "python": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          },
          {
            "pattern": "ratelimit",
            "weight": 4.0,
            "description": "Rate limiting"
          },
          {
            "pattern": "slowapi",
            "weight": 4.0,
            "description": "SlowAPI rate limiting"
          }
        ],
        "javascript": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          },
          {
            "pattern": "express-rate-limit",
            "weight": 4.0,
            "description": "Express rate limiting"
          },
          {
            "pattern": "rate-limit",
            "weight": 4.0,
            "description": "Rate limiting"
          }
        ],
        "typescript": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "csharp": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "go": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "rust": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "php": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "ruby": [
          {
            "pattern": "throttle.*request",
            "weight": 4.0,
            "description": "Request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 4.0,
            "description": "Rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 4.0,
            "description": "Limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 4.0,
            "description": "Throttling policy"
          },
          {
            "pattern": "throttle.*config",
            "weight": 3.0,
            "description": "Throttling configuration"
          },
          {
            "pattern": "throttle.*handler",
            "weight": 3.0,
            "description": "Throttling handler"
          },
          {
            "pattern": "throttle.*exception",
            "weight": 3.0,
            "description": "Throttling exception"
          },
          {
            "pattern": "throttle.*error",
            "weight": 3.0,
            "description": "Throttling error"
          },
          {
            "pattern": "throttle.*failure",
            "weight": 3.0,
            "description": "Throttling failure"
          },
          {
            "pattern": "throttle.*response",
            "weight": 3.0,
            "description": "Throttling response"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 4.0,
            "description": "Request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 4.0,
            "description": "Request rejection"
          },
          {
            "pattern": "throttle.*queue",
            "weight": 3.0,
            "description": "Request queuing"
          }
        ],
        "all_languages": [
          {
            "pattern": "throttle.*request",
            "weight": 3.0,
            "description": "Generic request throttling"
          },
          {
            "pattern": "throttle.*rate",
            "weight": 3.0,
            "description": "Generic rate throttling"
          },
          {
            "pattern": "throttle.*limit",
            "weight": 3.0,
            "description": "Generic limit throttling"
          },
          {
            "pattern": "throttle.*policy",
            "weight": 3.0,
            "description": "Generic throttling policy"
          },
          {
            "pattern": "throttle.*drop",
            "weight": 3.0,
            "description": "Generic request dropping"
          },
          {
            "pattern": "throttle.*reject",
            "weight": 3.0,
            "description": "Generic request rejection"
          },
          {
            "pattern": "rate.*limit",
            "weight": 3.0,
            "description": "Generic rate limiting"
          }
        ]
      }
    }
  }
} 